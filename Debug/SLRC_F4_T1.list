
SLRC_F4_T1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011040  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c18  080111e0  080111e0  000121e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012df8  08012df8  000140a8  2**0
                  CONTENTS
  4 .ARM          00000008  08012df8  08012df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e00  08012e00  000140a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e00  08012e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e04  08012e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08012e08  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a90  200000a8  08012eb0  000140a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08012eb0  00014b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000140a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005b789  00000000  00000000  000140d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d29  00000000  00000000  0006f861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004488  00000000  00000000  00075590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000035f2  00000000  00000000  00079a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccd0  00000000  00000000  0007d00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032033  00000000  00000000  00099cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6bf0  00000000  00000000  000cbd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001828fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00012e60  00000000  00000000  00182940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001957a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080111c8 	.word	0x080111c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	080111c8 	.word	0x080111c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <Actuator_Init>:
Gripper_Arm - 4
Gripper - 5*/

// Initialize the actuators
void Actuator_Init()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f003 ff29 	bl	8004da8 <setTCAChannel>
    PCA9685_Init(50);
 8000f56:	2032      	movs	r0, #50	@ 0x32
 8000f58:	f005 f970 	bl	800623c <PCA9685_Init>
    PCA9685_SetServoAngle(1, 110);
 8000f5c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000f9c <Actuator_Init+0x50>
 8000f60:	2001      	movs	r0, #1
 8000f62:	f005 f9b1 	bl	80062c8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(2, 90);
 8000f66:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8000fa0 <Actuator_Init+0x54>
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f005 f9ac 	bl	80062c8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(3, 100);
 8000f70:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000fa4 <Actuator_Init+0x58>
 8000f74:	2003      	movs	r0, #3
 8000f76:	f005 f9a7 	bl	80062c8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(4, 60); // 170
 8000f7a:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000fa8 <Actuator_Init+0x5c>
 8000f7e:	2004      	movs	r0, #4
 8000f80:	f005 f9a2 	bl	80062c8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(5, 170);
 8000f84:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000fac <Actuator_Init+0x60>
 8000f88:	2005      	movs	r0, #5
 8000f8a:	f005 f99d 	bl	80062c8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(14, 0); // 170
 8000f8e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000fb0 <Actuator_Init+0x64>
 8000f92:	200e      	movs	r0, #14
 8000f94:	f005 f998 	bl	80062c8 <PCA9685_SetServoAngle>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	42dc0000 	.word	0x42dc0000
 8000fa0:	42b40000 	.word	0x42b40000
 8000fa4:	42c80000 	.word	0x42c80000
 8000fa8:	42700000 	.word	0x42700000
 8000fac:	432a0000 	.word	0x432a0000
 8000fb0:	00000000 	.word	0x00000000

08000fb4 <TankLift>:

void TankLift()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f003 fef5 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(3, 100, 60, 10);
 8000fbe:	210a      	movs	r1, #10
 8000fc0:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000fdc <TankLift+0x28>
 8000fc4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000fe0 <TankLift+0x2c>
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f005 f9c3 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(800);
 8000fce:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000fd2:	f000 fa9d 	bl	8001510 <delay_ms>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	42700000 	.word	0x42700000
 8000fe0:	42c80000 	.word	0x42c80000

08000fe4 <TankLower>:
void TankLower()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f003 fedd 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(3, 60, 100, 10);
 8000fee:	210a      	movs	r1, #10
 8000ff0:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800100c <TankLower+0x28>
 8000ff4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001010 <TankLower+0x2c>
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f005 f9ab 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(300);
 8000ffe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001002:	f000 fa85 	bl	8001510 <delay_ms>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	42c80000 	.word	0x42c80000
 8001010:	42700000 	.word	0x42700000

08001014 <WhiteTnk>:
/// @brief ////////////////////////////////
void WhiteTnk()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001018:	2002      	movs	r0, #2
 800101a:	f003 fec5 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngle(1, 60);
 800101e:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800102c <WhiteTnk+0x18>
 8001022:	2001      	movs	r0, #1
 8001024:	f005 f950 	bl	80062c8 <PCA9685_SetServoAngle>
    // PCA9685_SetServoAngleSlow(1,100,50,5);
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	42700000 	.word	0x42700000

08001030 <W_Nutral>:

void W_Nutral()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001034:	2002      	movs	r0, #2
 8001036:	f003 feb7 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngle(1, 110);
 800103a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8001048 <W_Nutral+0x18>
 800103e:	2001      	movs	r0, #1
 8001040:	f005 f942 	bl	80062c8 <PCA9685_SetServoAngle>
    // PCA9685_SetServoAngleSlow(1,50,100,5);
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	42dc0000 	.word	0x42dc0000

0800104c <YellowTnk>:

void YellowTnk()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001050:	2002      	movs	r0, #2
 8001052:	f003 fea9 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngle(1, 143);
 8001056:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8001064 <YellowTnk+0x18>
 800105a:	2001      	movs	r0, #1
 800105c:	f005 f934 	bl	80062c8 <PCA9685_SetServoAngle>
    // PCA9685_SetServoAngleSlow(1,100,143,5);
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	430f0000 	.word	0x430f0000

08001068 <Y_Nutral>:
void Y_Nutral()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 800106c:	2002      	movs	r0, #2
 800106e:	f003 fe9b 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngle(1, 110);
 8001072:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8001080 <Y_Nutral+0x18>
 8001076:	2001      	movs	r0, #1
 8001078:	f005 f926 	bl	80062c8 <PCA9685_SetServoAngle>
    // PCA9685_SetServoAngleSlow(1,143,100,5);
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	42dc0000 	.word	0x42dc0000

08001084 <open_white_door>:
/// @brief //////////////////////////////////
void open_white_door()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001088:	2002      	movs	r0, #2
 800108a:	f003 fe8d 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(1, 100, 115, 5);
 800108e:	2105      	movs	r1, #5
 8001090:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80010bc <open_white_door+0x38>
 8001094:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80010c0 <open_white_door+0x3c>
 8001098:	2001      	movs	r0, #1
 800109a:	f005 f95b 	bl	8006354 <PCA9685_SetServoAngleSlow>
    PCA9685_SetServoAngleSlow(2, 90, 180, 5);
 800109e:	2105      	movs	r1, #5
 80010a0:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80010c4 <open_white_door+0x40>
 80010a4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80010c8 <open_white_door+0x44>
 80010a8:	2002      	movs	r0, #2
 80010aa:	f005 f953 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(400);
 80010ae:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80010b2:	f000 fa2d 	bl	8001510 <delay_ms>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	42e60000 	.word	0x42e60000
 80010c0:	42c80000 	.word	0x42c80000
 80010c4:	43340000 	.word	0x43340000
 80010c8:	42b40000 	.word	0x42b40000

080010cc <close_white_door>:
void close_white_door()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 80010d0:	2002      	movs	r0, #2
 80010d2:	f003 fe69 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(1, 115, 100, 5);
 80010d6:	2105      	movs	r1, #5
 80010d8:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001104 <close_white_door+0x38>
 80010dc:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001108 <close_white_door+0x3c>
 80010e0:	2001      	movs	r0, #1
 80010e2:	f005 f937 	bl	8006354 <PCA9685_SetServoAngleSlow>
    PCA9685_SetServoAngleSlow(2, 180, 90, 5);
 80010e6:	2105      	movs	r1, #5
 80010e8:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800110c <close_white_door+0x40>
 80010ec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001110 <close_white_door+0x44>
 80010f0:	2002      	movs	r0, #2
 80010f2:	f005 f92f 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(400);
 80010f6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80010fa:	f000 fa09 	bl	8001510 <delay_ms>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	42c80000 	.word	0x42c80000
 8001108:	42e60000 	.word	0x42e60000
 800110c:	42b40000 	.word	0x42b40000
 8001110:	43340000 	.word	0x43340000

08001114 <open_yellow_door>:
void open_yellow_door()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001118:	2002      	movs	r0, #2
 800111a:	f003 fe45 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(1, 100, 85, 5);
 800111e:	2105      	movs	r1, #5
 8001120:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800114c <open_yellow_door+0x38>
 8001124:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001150 <open_yellow_door+0x3c>
 8001128:	2001      	movs	r0, #1
 800112a:	f005 f913 	bl	8006354 <PCA9685_SetServoAngleSlow>
    PCA9685_SetServoAngleSlow(2, 90, 0, 5);
 800112e:	2105      	movs	r1, #5
 8001130:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001154 <open_yellow_door+0x40>
 8001134:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001158 <open_yellow_door+0x44>
 8001138:	2002      	movs	r0, #2
 800113a:	f005 f90b 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(400);
 800113e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001142:	f000 f9e5 	bl	8001510 <delay_ms>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	42aa0000 	.word	0x42aa0000
 8001150:	42c80000 	.word	0x42c80000
 8001154:	00000000 	.word	0x00000000
 8001158:	42b40000 	.word	0x42b40000

0800115c <close_yellow_door>:
void close_yellow_door()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001160:	2002      	movs	r0, #2
 8001162:	f003 fe21 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(1, 85, 100, 5);
 8001166:	2105      	movs	r1, #5
 8001168:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001194 <close_yellow_door+0x38>
 800116c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001198 <close_yellow_door+0x3c>
 8001170:	2001      	movs	r0, #1
 8001172:	f005 f8ef 	bl	8006354 <PCA9685_SetServoAngleSlow>
    PCA9685_SetServoAngleSlow(2, 0, 90, 5);
 8001176:	2105      	movs	r1, #5
 8001178:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800119c <close_yellow_door+0x40>
 800117c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80011a0 <close_yellow_door+0x44>
 8001180:	2002      	movs	r0, #2
 8001182:	f005 f8e7 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(400);
 8001186:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800118a:	f000 f9c1 	bl	8001510 <delay_ms>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	42c80000 	.word	0x42c80000
 8001198:	42aa0000 	.word	0x42aa0000
 800119c:	42b40000 	.word	0x42b40000
 80011a0:	00000000 	.word	0x00000000

080011a4 <Arm_Down>:

/////////////////////////////////////

void Arm_Down()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 80011a8:	2002      	movs	r0, #2
 80011aa:	f003 fdfd 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(4, 55, 176, 10);
 80011ae:	210a      	movs	r1, #10
 80011b0:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80011cc <Arm_Down+0x28>
 80011b4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80011d0 <Arm_Down+0x2c>
 80011b8:	2004      	movs	r0, #4
 80011ba:	f005 f8cb 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(500);
 80011be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c2:	f000 f9a5 	bl	8001510 <delay_ms>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	43300000 	.word	0x43300000
 80011d0:	425c0000 	.word	0x425c0000

080011d4 <BOX_Arm_Down>:
void BOX_Arm_Down()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 80011d8:	2002      	movs	r0, #2
 80011da:	f003 fde5 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(4, 55, 178, 10);
 80011de:	210a      	movs	r1, #10
 80011e0:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80011fc <BOX_Arm_Down+0x28>
 80011e4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001200 <BOX_Arm_Down+0x2c>
 80011e8:	2004      	movs	r0, #4
 80011ea:	f005 f8b3 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(500);
 80011ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011f2:	f000 f98d 	bl	8001510 <delay_ms>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	43320000 	.word	0x43320000
 8001200:	425c0000 	.word	0x425c0000

08001204 <BOX_Arm_Up>:
void BOX_Arm_Up()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001208:	2002      	movs	r0, #2
 800120a:	f003 fdcd 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(4, 178, 55, 10);
 800120e:	210a      	movs	r1, #10
 8001210:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800122c <BOX_Arm_Up+0x28>
 8001214:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001230 <BOX_Arm_Up+0x2c>
 8001218:	2004      	movs	r0, #4
 800121a:	f005 f89b 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(500);
 800121e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001222:	f000 f975 	bl	8001510 <delay_ms>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	425c0000 	.word	0x425c0000
 8001230:	43320000 	.word	0x43320000

08001234 <Arm_Up>:
void Arm_Up()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001238:	2002      	movs	r0, #2
 800123a:	f003 fdb5 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(4, 176, 40, 10);
 800123e:	210a      	movs	r1, #10
 8001240:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8001254 <Arm_Up+0x20>
 8001244:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001258 <Arm_Up+0x24>
 8001248:	2004      	movs	r0, #4
 800124a:	f005 f883 	bl	8006354 <PCA9685_SetServoAngleSlow>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	42200000 	.word	0x42200000
 8001258:	43300000 	.word	0x43300000

0800125c <Arm_mid>:

void Arm_mid()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001260:	2002      	movs	r0, #2
 8001262:	f003 fda1 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(4, 40, 55, 10);
 8001266:	210a      	movs	r1, #10
 8001268:	eddf 0a04 	vldr	s1, [pc, #16]	@ 800127c <Arm_mid+0x20>
 800126c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001280 <Arm_mid+0x24>
 8001270:	2004      	movs	r0, #4
 8001272:	f005 f86f 	bl	8006354 <PCA9685_SetServoAngleSlow>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	425c0000 	.word	0x425c0000
 8001280:	42200000 	.word	0x42200000

08001284 <Gripper_Open>:
void Gripper_Open()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001288:	2002      	movs	r0, #2
 800128a:	f003 fd8d 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(5, 170, 130, 5);
 800128e:	2105      	movs	r1, #5
 8001290:	eddf 0a04 	vldr	s1, [pc, #16]	@ 80012a4 <Gripper_Open+0x20>
 8001294:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80012a8 <Gripper_Open+0x24>
 8001298:	2005      	movs	r0, #5
 800129a:	f005 f85b 	bl	8006354 <PCA9685_SetServoAngleSlow>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	43020000 	.word	0x43020000
 80012a8:	432a0000 	.word	0x432a0000

080012ac <Gripper_Close>:

void Gripper_Close()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 80012b0:	2002      	movs	r0, #2
 80012b2:	f003 fd79 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(5, 130, 170, 5);
 80012b6:	2105      	movs	r1, #5
 80012b8:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80012d4 <Gripper_Close+0x28>
 80012bc:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80012d8 <Gripper_Close+0x2c>
 80012c0:	2005      	movs	r0, #5
 80012c2:	f005 f847 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(500);
 80012c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ca:	f000 f921 	bl	8001510 <delay_ms>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	432a0000 	.word	0x432a0000
 80012d8:	43020000 	.word	0x43020000

080012dc <BOX_Gripper_Open>:
{
    setTCAChannel(2);
    PCA9685_SetServoAngleSlow(5, 110, 160, 5);
}
void BOX_Gripper_Open()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 80012e0:	2002      	movs	r0, #2
 80012e2:	f003 fd61 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(5, 170, 125, 5);
 80012e6:	2105      	movs	r1, #5
 80012e8:	eddf 0a04 	vldr	s1, [pc, #16]	@ 80012fc <BOX_Gripper_Open+0x20>
 80012ec:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001300 <BOX_Gripper_Open+0x24>
 80012f0:	2005      	movs	r0, #5
 80012f2:	f005 f82f 	bl	8006354 <PCA9685_SetServoAngleSlow>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	42fa0000 	.word	0x42fa0000
 8001300:	432a0000 	.word	0x432a0000

08001304 <BOX_Gripper_Close>:
void BOX_Gripper_Close()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001308:	2002      	movs	r0, #2
 800130a:	f003 fd4d 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(5, 125, 170, 5);
 800130e:	2105      	movs	r1, #5
 8001310:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800132c <BOX_Gripper_Close+0x28>
 8001314:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001330 <BOX_Gripper_Close+0x2c>
 8001318:	2005      	movs	r0, #5
 800131a:	f005 f81b 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(500);
 800131e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001322:	f000 f8f5 	bl	8001510 <delay_ms>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	432a0000 	.word	0x432a0000
 8001330:	42fa0000 	.word	0x42fa0000

08001334 <water_pump_mid>:
    setTCAChannel(2);
    PCA9685_SetServoAngleSlow(14, 108, 0, 0);
    delay_ms(1000);
}
void water_pump_mid()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001338:	2002      	movs	r0, #2
 800133a:	f003 fd35 	bl	8004da8 <setTCAChannel>
    delay_ms(1000);
 800133e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001342:	f000 f8e5 	bl	8001510 <delay_ms>
    PCA9685_SetServoAngle(14, 10);
 8001346:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800134a:	200e      	movs	r0, #14
 800134c:	f004 ffbc 	bl	80062c8 <PCA9685_SetServoAngle>
    delay_ms(800);
 8001350:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001354:	f000 f8dc 	bl	8001510 <delay_ms>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <water_pump_mid_to_down>:
{
    setTCAChannel(2);
    PCA9685_SetServoAngleSlow(14, 0, 108, 0);
    delay_ms(1000);
}
void water_pump_mid_to_down(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001360:	2002      	movs	r0, #2
 8001362:	f003 fd21 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(14, 60, 110, 0);
 8001366:	2100      	movs	r1, #0
 8001368:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001384 <water_pump_mid_to_down+0x28>
 800136c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001388 <water_pump_mid_to_down+0x2c>
 8001370:	200e      	movs	r0, #14
 8001372:	f004 ffef 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(1000);
 8001376:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800137a:	f000 f8c9 	bl	8001510 <delay_ms>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	42dc0000 	.word	0x42dc0000
 8001388:	42700000 	.word	0x42700000

0800138c <water_pump_down_to_mid>:
void water_pump_down_to_mid(){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    setTCAChannel(2);
 8001390:	2002      	movs	r0, #2
 8001392:	f003 fd09 	bl	8004da8 <setTCAChannel>
    PCA9685_SetServoAngleSlow(14, 110, 60, 0);
 8001396:	2100      	movs	r1, #0
 8001398:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80013b4 <water_pump_down_to_mid+0x28>
 800139c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80013b8 <water_pump_down_to_mid+0x2c>
 80013a0:	200e      	movs	r0, #14
 80013a2:	f004 ffd7 	bl	8006354 <PCA9685_SetServoAngleSlow>
    delay_ms(1000);
 80013a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013aa:	f000 f8b1 	bl	8001510 <delay_ms>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	42700000 	.word	0x42700000
 80013b8:	42dc0000 	.word	0x42dc0000

080013bc <pump_1_on>:
//////////////////////////////////////
void pump_1_on()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, PUMP_1_Pin, GPIO_PIN_SET); // Turn on PUMP_1
 80013c0:	2201      	movs	r2, #1
 80013c2:	2140      	movs	r1, #64	@ 0x40
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <pump_1_on+0x14>)
 80013c6:	f00b fff1 	bl	800d3ac <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020400 	.word	0x40020400

080013d4 <pump_1_off>:
void pump_1_off()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, PUMP_1_Pin, GPIO_PIN_RESET); // Turn off PUMP_1
 80013d8:	2200      	movs	r2, #0
 80013da:	2140      	movs	r1, #64	@ 0x40
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <pump_1_off+0x14>)
 80013de:	f00b ffe5 	bl	800d3ac <HAL_GPIO_WritePin>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40020400 	.word	0x40020400

080013ec <pump_2_on>:
void pump_2_on()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PUMP_2_GPIO_Port, PUMP_2_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013f6:	4802      	ldr	r0, [pc, #8]	@ (8001400 <pump_2_on+0x14>)
 80013f8:	f00b ffd8 	bl	800d3ac <HAL_GPIO_WritePin>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020000 	.word	0x40020000

08001404 <pump_2_off>:
void pump_2_off()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PUMP_2_GPIO_Port, PUMP_2_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140e:	4802      	ldr	r0, [pc, #8]	@ (8001418 <pump_2_off+0x14>)
 8001410:	f00b ffcc 	bl	800d3ac <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020000 	.word	0x40020000

0800141c <TimerDelay_Init>:
#define TIMER  TIM9
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001422:	f00e f8bd 	bl	800f5a0 <HAL_RCC_GetHCLKFreq>
 8001426:	4603      	mov	r3, r0
 8001428:	4a28      	ldr	r2, [pc, #160]	@ (80014cc <TimerDelay_Init+0xb0>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9b      	lsrs	r3, r3, #18
 8001430:	4a27      	ldr	r2, [pc, #156]	@ (80014d0 <TimerDelay_Init+0xb4>)
 8001432:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <TimerDelay_Init+0xb8>)
 8001436:	4a28      	ldr	r2, [pc, #160]	@ (80014d8 <TimerDelay_Init+0xbc>)
 8001438:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <TimerDelay_Init+0xb4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	4a1f      	ldr	r2, [pc, #124]	@ (80014d4 <TimerDelay_Init+0xb8>)
 8001458:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <TimerDelay_Init+0xb8>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8001460:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <TimerDelay_Init+0xb8>)
 8001462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001466:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <TimerDelay_Init+0xb8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <TimerDelay_Init+0xb8>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <TimerDelay_Init+0xb8>)
 8001476:	f00e f8b3 	bl	800f5e0 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 8001480:	f004 f942 	bl	8005708 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001488:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	4619      	mov	r1, r3
 8001490:	4810      	ldr	r0, [pc, #64]	@ (80014d4 <TimerDelay_Init+0xb8>)
 8001492:	f00e fd3f 	bl	800ff14 <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 800149c:	f004 f934 	bl	8005708 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	4619      	mov	r1, r3
 80014ac:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <TimerDelay_Init+0xb8>)
 80014ae:	f00f f903 	bl	80106b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 80014b8:	f004 f926 	bl	8005708 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <TimerDelay_Init+0xb8>)
 80014be:	f00e f8df 	bl	800f680 <HAL_TIM_Base_Start>

}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	2000010c 	.word	0x2000010c
 80014d4:	200000c4 	.word	0x200000c4
 80014d8:	40014000 	.word	0x40014000

080014dc <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <delay_us+0x30>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HTIMx.Instance->CNT < au16_us);
 80014ee:	bf00      	nop
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <delay_us+0x30>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	b292      	uxth	r2, r2
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3f8      	bcc.n	80014f0 <delay_us+0x14>
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	200000c4 	.word	0x200000c4

08001510 <delay_ms>:

void delay_ms(volatile uint16_t au16_ms)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	while(au16_ms > 0)
 800151a:	e00f      	b.n	800153c <delay_ms+0x2c>
	{
		HTIMx.Instance->CNT = 0;
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <delay_ms+0x44>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
		au16_ms--;
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	b29b      	uxth	r3, r3
 8001528:	3b01      	subs	r3, #1
 800152a:	b29b      	uxth	r3, r3
 800152c:	80fb      	strh	r3, [r7, #6]
		while (HTIMx.Instance->CNT < 1000);
 800152e:	bf00      	nop
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <delay_ms+0x44>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800153a:	d3f9      	bcc.n	8001530 <delay_ms+0x20>
	while(au16_ms > 0)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	b29b      	uxth	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1eb      	bne.n	800151c <delay_ms+0xc>
	}
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200000c4 	.word	0x200000c4

08001558 <enc_drive_accel>:

#define LINE_THRESHOLD 500 // Adjust based on your IR sensor values
#define MIN_WORKING_PWM 40 // Minimum speed that keeps motors moving

void enc_drive_accel(int target_distance, const int maxSpeed, const int minSpeed)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	@ 0x38
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
    resetEncoders();
 8001564:	f003 fc10 	bl	8004d88 <resetEncoders>

    const int accelSteps = target_distance / 4; // Distance for acceleration
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	da00      	bge.n	8001570 <enc_drive_accel+0x18>
 800156e:	3303      	adds	r3, #3
 8001570:	109b      	asrs	r3, r3, #2
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
    int currentSpeed = minSpeed;                // Start at minimum speed
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 8001578:	f003 fbf2 	bl	8004d60 <getLeftEncoderCounts>
 800157c:	4603      	mov	r3, r0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
        int right_count = getRightEncoderCounts();
 8001580:	f003 fbda 	bl	8004d38 <getRightEncoderCounts>
 8001584:	4603      	mov	r3, r0
 8001586:	623b      	str	r3, [r7, #32]

        // Compute the distance (average of both wheels)
        int enc_dist = (left_count + right_count) / 2;
 8001588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	4413      	add	r3, r2
 800158e:	0fda      	lsrs	r2, r3, #31
 8001590:	4413      	add	r3, r2
 8001592:	105b      	asrs	r3, r3, #1
 8001594:	61fb      	str	r3, [r7, #28]

        // Break the loop if the target distance is reached
        if (enc_dist >= target_distance)
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	429a      	cmp	r2, r3
 800159c:	f280 809a 	bge.w	80016d4 <enc_drive_accel+0x17c>
        {
            break;
        }

        // Acceleration phase
        if (enc_dist < accelSteps)
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	429a      	cmp	r2, r3
 80015a6:	da0c      	bge.n	80015c2 <enc_drive_accel+0x6a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * enc_dist / accelSteps;
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	fb03 f202 	mul.w	r2, r3, r2
 80015b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
 80015c0:	e001      	b.n	80015c6 <enc_drive_accel+0x6e>
        }
        else
        {
            currentSpeed = maxSpeed; // Maintain max speed after acceleration
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Calculate the error (difference in encoder counts)
        int difference_ = left_count - right_count;
 80015c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	61bb      	str	r3, [r7, #24]

        // Integral term with anti-windup
        integral += difference_;
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d8:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <enc_drive_accel+0x198>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e2:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <enc_drive_accel+0x198>)
 80015e4:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 80015e8:	4b42      	ldr	r3, [pc, #264]	@ (80016f4 <enc_drive_accel+0x19c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	4b3e      	ldr	r3, [pc, #248]	@ (80016f0 <enc_drive_accel+0x198>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d508      	bpl.n	8001616 <enc_drive_accel+0xbe>
            integral = integral_limit;
 8001604:	4b3b      	ldr	r3, [pc, #236]	@ (80016f4 <enc_drive_accel+0x19c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <enc_drive_accel+0x198>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 8001616:	4b37      	ldr	r3, [pc, #220]	@ (80016f4 <enc_drive_accel+0x19c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	425b      	negs	r3, r3
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001624:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <enc_drive_accel+0x198>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	dd09      	ble.n	8001648 <enc_drive_accel+0xf0>
            integral = -integral_limit;
 8001634:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <enc_drive_accel+0x19c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	425b      	negs	r3, r3
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001642:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <enc_drive_accel+0x198>)
 8001644:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        int correction = (difference_ * Kp1) + (integral * Ki1);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <enc_drive_accel+0x1a0>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <enc_drive_accel+0x198>)
 800165e:	edd3 6a00 	vldr	s13, [r3]
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <enc_drive_accel+0x1a4>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	617b      	str	r3, [r7, #20]

        // Adjust motor speeds with correction
        int speedL = currentSpeed + correction;
 800167a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4413      	add	r3, r2
 8001680:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 8001682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 800168a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168c:	2b00      	cmp	r3, #0
 800168e:	bfb8      	it	lt
 8001690:	425b      	neglt	r3, r3
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dd07      	ble.n	80016a8 <enc_drive_accel+0x150>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8001698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169a:	2b00      	cmp	r3, #0
 800169c:	da02      	bge.n	80016a4 <enc_drive_accel+0x14c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	425b      	negs	r3, r3
 80016a2:	e000      	b.n	80016a6 <enc_drive_accel+0x14e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 80016a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bfb8      	it	lt
 80016ae:	425b      	neglt	r3, r3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dd07      	ble.n	80016c6 <enc_drive_accel+0x16e>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da02      	bge.n	80016c2 <enc_drive_accel+0x16a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	425b      	negs	r3, r3
 80016c0:	e000      	b.n	80016c4 <enc_drive_accel+0x16c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 80016c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80016c8:	f004 f872 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80016cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016ce:	f004 f821 	bl	8005714 <setMotorSpeedR>
    {
 80016d2:	e751      	b.n	8001578 <enc_drive_accel+0x20>
            break;
 80016d4:	bf00      	nop
    }

    // Stop the motors after reaching the target
    setMotorSpeedR(0);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f004 f81c 	bl	8005714 <setMotorSpeedR>
    setMotorSpeedL(0);
 80016dc:	2000      	movs	r0, #0
 80016de:	f004 f867 	bl	80057b0 <setMotorSpeedL>
    resetEncoders();
 80016e2:	f003 fb51 	bl	8004d88 <resetEncoders>
}
 80016e6:	bf00      	nop
 80016e8:	3738      	adds	r7, #56	@ 0x38
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000011c 	.word	0x2000011c
 80016f4:	20000018 	.word	0x20000018
 80016f8:	20000008 	.word	0x20000008
 80016fc:	2000000c 	.word	0x2000000c

08001700 <enc_drive_decel>:
void enc_drive_decel(int target_distance, const int maxSpeed, const int minSpeed)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08e      	sub	sp, #56	@ 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
    resetEncoders();
 800170c:	f003 fb3c 	bl	8004d88 <resetEncoders>

    const int decelStart = target_distance - (target_distance / 1.8); // Start decelerating early
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f7fe ff07 	bl	8000524 <__aeabi_i2d>
 8001716:	4604      	mov	r4, r0
 8001718:	460d      	mov	r5, r1
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7fe ff02 	bl	8000524 <__aeabi_i2d>
 8001720:	a371      	add	r3, pc, #452	@ (adr r3, 80018e8 <enc_drive_decel+0x1e8>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7ff f891 	bl	800084c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fda9 	bl	8000288 <__aeabi_dsub>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff f9f5 	bl	8000b2c <__aeabi_d2iz>
 8001742:	4603      	mov	r3, r0
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28

    int currentSpeed = maxSpeed; // Start at max speed
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 800174a:	f003 fb09 	bl	8004d60 <getLeftEncoderCounts>
 800174e:	4603      	mov	r3, r0
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
        int right_count = getRightEncoderCounts();
 8001752:	f003 faf1 	bl	8004d38 <getRightEncoderCounts>
 8001756:	4603      	mov	r3, r0
 8001758:	623b      	str	r3, [r7, #32]

        // Compute the distance (average of both wheels)
        int enc_dist = (left_count + right_count) / 2;
 800175a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	4413      	add	r3, r2
 8001760:	0fda      	lsrs	r2, r3, #31
 8001762:	4413      	add	r3, r2
 8001764:	105b      	asrs	r3, r3, #1
 8001766:	61fb      	str	r3, [r7, #28]

        // Break the loop if the target distance is reached
        if (enc_dist >= target_distance)
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	f280 80a3 	bge.w	80018b8 <enc_drive_decel+0x1b8>
        {
            break;
        }

        // Deceleration phase
        if (enc_dist > decelStart)
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001776:	429a      	cmp	r2, r3
 8001778:	dd17      	ble.n	80017aa <enc_drive_decel+0xaa>
        {
            int remaining = target_distance - enc_dist;
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	61bb      	str	r3, [r7, #24]
            if (remaining > 0)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dd0e      	ble.n	80017a6 <enc_drive_decel+0xa6>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target_distance - decelStart);
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	fb03 f202 	mul.w	r2, r3, r2
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001798:	1acb      	subs	r3, r1, r3
 800179a:	fb92 f3f3 	sdiv	r3, r2, r3
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80017a4:	e001      	b.n	80017aa <enc_drive_decel+0xaa>
            }
            else
            {
                currentSpeed = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        // Calculate the error (difference in encoder counts)
        int difference_ = left_count - right_count;
 80017aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]

        // Integral term with anti-windup
        integral += difference_;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	4b46      	ldr	r3, [pc, #280]	@ (80018d8 <enc_drive_decel+0x1d8>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <enc_drive_decel+0x1d8>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 80017cc:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <enc_drive_decel+0x1dc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d8:	4b3f      	ldr	r3, [pc, #252]	@ (80018d8 <enc_drive_decel+0x1d8>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	d508      	bpl.n	80017fa <enc_drive_decel+0xfa>
            integral = integral_limit;
 80017e8:	4b3c      	ldr	r3, [pc, #240]	@ (80018dc <enc_drive_decel+0x1dc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f4:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <enc_drive_decel+0x1d8>)
 80017f6:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <enc_drive_decel+0x1dc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	425b      	negs	r3, r3
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001808:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <enc_drive_decel+0x1d8>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	dd09      	ble.n	800182c <enc_drive_decel+0x12c>
            integral = -integral_limit;
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <enc_drive_decel+0x1dc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	425b      	negs	r3, r3
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <enc_drive_decel+0x1d8>)
 8001828:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        int correction = (difference_ * Kp1) + (integral * Ki1);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <enc_drive_decel+0x1e0>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <enc_drive_decel+0x1d8>)
 8001842:	edd3 6a00 	vldr	s13, [r3]
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <enc_drive_decel+0x1e4>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001858:	ee17 3a90 	vmov	r3, s15
 800185c:	613b      	str	r3, [r7, #16]

        // Adjust motor speeds with correction
        int speedL = currentSpeed + correction;
 800185e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4413      	add	r3, r2
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 8001866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 800186e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001870:	2b00      	cmp	r3, #0
 8001872:	bfb8      	it	lt
 8001874:	425b      	neglt	r3, r3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	dd07      	ble.n	800188c <enc_drive_decel+0x18c>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 800187c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800187e:	2b00      	cmp	r3, #0
 8001880:	da02      	bge.n	8001888 <enc_drive_decel+0x188>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	425b      	negs	r3, r3
 8001886:	e000      	b.n	800188a <enc_drive_decel+0x18a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 800188c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188e:	2b00      	cmp	r3, #0
 8001890:	bfb8      	it	lt
 8001892:	425b      	neglt	r3, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	dd07      	ble.n	80018aa <enc_drive_decel+0x1aa>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 800189a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189c:	2b00      	cmp	r3, #0
 800189e:	da02      	bge.n	80018a6 <enc_drive_decel+0x1a6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	425b      	negs	r3, r3
 80018a4:	e000      	b.n	80018a8 <enc_drive_decel+0x1a8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 80018aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018ac:	f003 ff80 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80018b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018b2:	f003 ff2f 	bl	8005714 <setMotorSpeedR>
    {
 80018b6:	e748      	b.n	800174a <enc_drive_decel+0x4a>
            break;
 80018b8:	bf00      	nop
    }

    // Stop the motors after reaching the target
    setMotorSpeedR(0);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f003 ff2a 	bl	8005714 <setMotorSpeedR>
    setMotorSpeedL(0);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f003 ff75 	bl	80057b0 <setMotorSpeedL>
    resetEncoders();
 80018c6:	f003 fa5f 	bl	8004d88 <resetEncoders>
}
 80018ca:	bf00      	nop
 80018cc:	3738      	adds	r7, #56	@ 0x38
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	2000011c 	.word	0x2000011c
 80018dc:	20000018 	.word	0x20000018
 80018e0:	20000008 	.word	0x20000008
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	3ffccccc 	.word	0x3ffccccc

080018f0 <enc_driveR_decel>:
void enc_driveR_decel(int target_distance, const int maxSpeed, const int minSpeed)
{
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b08e      	sub	sp, #56	@ 0x38
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
    resetEncoders();
 80018fc:	f003 fa44 	bl	8004d88 <resetEncoders>

    const int decelStart = target_distance - (target_distance / 1.8); // Start decelerating early
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7fe fe0f 	bl	8000524 <__aeabi_i2d>
 8001906:	4604      	mov	r4, r0
 8001908:	460d      	mov	r5, r1
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7fe fe0a 	bl	8000524 <__aeabi_i2d>
 8001910:	a375      	add	r3, pc, #468	@ (adr r3, 8001ae8 <enc_driveR_decel+0x1f8>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe ff99 	bl	800084c <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fcb1 	bl	8000288 <__aeabi_dsub>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f8fd 	bl	8000b2c <__aeabi_d2iz>
 8001932:	4603      	mov	r3, r0
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
    int currentSpeed = maxSpeed;                                      // Start at max speed
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        // Read encoder counts (will be negative in reverse)
        int left_count = getLeftEncoderCounts();
 800193a:	f003 fa11 	bl	8004d60 <getLeftEncoderCounts>
 800193e:	4603      	mov	r3, r0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
        int right_count = getRightEncoderCounts();
 8001942:	f003 f9f9 	bl	8004d38 <getRightEncoderCounts>
 8001946:	4603      	mov	r3, r0
 8001948:	623b      	str	r3, [r7, #32]

        // Compute the distance (average of absolute values)
        int enc_dist = (abs(left_count) + abs(right_count)) / 2;
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001950:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	0fda      	lsrs	r2, r3, #31
 8001960:	4413      	add	r3, r2
 8001962:	105b      	asrs	r3, r3, #1
 8001964:	61fb      	str	r3, [r7, #28]

        // Break the loop if the target distance is reached
        if (enc_dist >= target_distance)
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	429a      	cmp	r2, r3
 800196c:	f280 80a4 	bge.w	8001ab8 <enc_driveR_decel+0x1c8>
        {
            break;
        }

        // Deceleration phase
        if (enc_dist > decelStart)
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001974:	429a      	cmp	r2, r3
 8001976:	dd17      	ble.n	80019a8 <enc_driveR_decel+0xb8>
        {
            int remaining = target_distance - enc_dist;
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	61bb      	str	r3, [r7, #24]
            if (remaining > 0)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	dd0e      	ble.n	80019a4 <enc_driveR_decel+0xb4>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target_distance - decelStart);
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	fb03 f202 	mul.w	r2, r3, r2
 8001992:	68f9      	ldr	r1, [r7, #12]
 8001994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001996:	1acb      	subs	r3, r1, r3
 8001998:	fb92 f3f3 	sdiv	r3, r2, r3
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019a2:	e001      	b.n	80019a8 <enc_driveR_decel+0xb8>
            }
            else
            {
                currentSpeed = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        // Calculate the error (difference in encoder counts)
        int difference_ = left_count - right_count;
 80019a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]

        // Integral term with anti-windup
        integral += difference_;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <enc_driveR_decel+0x1e8>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <enc_driveR_decel+0x1e8>)
 80019c6:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 80019ca:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <enc_driveR_decel+0x1ec>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d6:	4b40      	ldr	r3, [pc, #256]	@ (8001ad8 <enc_driveR_decel+0x1e8>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	d508      	bpl.n	80019f8 <enc_driveR_decel+0x108>
            integral = integral_limit;
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <enc_driveR_decel+0x1ec>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <enc_driveR_decel+0x1e8>)
 80019f4:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 80019f8:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <enc_driveR_decel+0x1ec>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	425b      	negs	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a06:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <enc_driveR_decel+0x1e8>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	dd09      	ble.n	8001a2a <enc_driveR_decel+0x13a>
            integral = -integral_limit;
 8001a16:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <enc_driveR_decel+0x1ec>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad8 <enc_driveR_decel+0x1e8>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        int correction = (difference_ * Kp1) + (integral * Ki1);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <enc_driveR_decel+0x1f0>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <enc_driveR_decel+0x1e8>)
 8001a40:	edd3 6a00 	vldr	s13, [r3]
 8001a44:	4b27      	ldr	r3, [pc, #156]	@ (8001ae4 <enc_driveR_decel+0x1f4>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a56:	ee17 3a90 	vmov	r3, s15
 8001a5a:	613b      	str	r3, [r7, #16]

        // Adjust motor speeds with correction (negative for reverse)
        int speedL = -(currentSpeed + correction);
 8001a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4413      	add	r3, r2
 8001a62:	425b      	negs	r3, r3
 8001a64:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = -(currentSpeed - correction);
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bfb8      	it	lt
 8001a74:	425b      	neglt	r3, r3
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dd07      	ble.n	8001a8c <enc_driveR_decel+0x19c>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da02      	bge.n	8001a88 <enc_driveR_decel+0x198>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	425b      	negs	r3, r3
 8001a86:	e000      	b.n	8001a8a <enc_driveR_decel+0x19a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8001a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bfb8      	it	lt
 8001a92:	425b      	neglt	r3, r3
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dd07      	ble.n	8001aaa <enc_driveR_decel+0x1ba>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8001a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da02      	bge.n	8001aa6 <enc_driveR_decel+0x1b6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	e000      	b.n	8001aa8 <enc_driveR_decel+0x1b8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 8001aaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001aac:	f003 fe80 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8001ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ab2:	f003 fe2f 	bl	8005714 <setMotorSpeedR>
    {
 8001ab6:	e740      	b.n	800193a <enc_driveR_decel+0x4a>
            break;
 8001ab8:	bf00      	nop
    }

    // Stop the motors after reaching the target
    setMotorSpeedL(0);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f003 fe78 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f003 fe27 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8001ac6:	f003 f95f 	bl	8004d88 <resetEncoders>
}
 8001aca:	bf00      	nop
 8001acc:	3738      	adds	r7, #56	@ 0x38
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	2000011c 	.word	0x2000011c
 8001adc:	20000018 	.word	0x20000018
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	cccccccd 	.word	0xcccccccd
 8001aec:	3ffccccc 	.word	0x3ffccccc

08001af0 <enc_drive_T>:
void enc_drive_T(int target_distance, const int maxSpeed, const int minSpeed)
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b090      	sub	sp, #64	@ 0x40
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
    resetEncoders();
 8001afc:	f003 f944 	bl	8004d88 <resetEncoders>

    const int accelSteps = target_distance / 4;                       // Acceleration distance
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da00      	bge.n	8001b08 <enc_drive_T+0x18>
 8001b06:	3303      	adds	r3, #3
 8001b08:	109b      	asrs	r3, r3, #2
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    const int decelStart = target_distance - (target_distance / 1.9); // When to start decelerating
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7fe fd09 	bl	8000524 <__aeabi_i2d>
 8001b12:	4604      	mov	r4, r0
 8001b14:	460d      	mov	r5, r1
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7fe fd04 	bl	8000524 <__aeabi_i2d>
 8001b1c:	a37a      	add	r3, pc, #488	@ (adr r3, 8001d08 <enc_drive_T+0x218>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fe93 	bl	800084c <__aeabi_ddiv>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbab 	bl	8000288 <__aeabi_dsub>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe fff7 	bl	8000b2c <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int currentSpeed = minSpeed; // Starting speed
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	63fb      	str	r3, [r7, #60]	@ 0x3c

    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 8001b46:	f003 f90b 	bl	8004d60 <getLeftEncoderCounts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
        int right_count = getRightEncoderCounts();
 8001b4e:	f003 f8f3 	bl	8004d38 <getRightEncoderCounts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24

        // Compute the distance (average of both wheels)
        int enc_dist = (left_count + right_count) / 2;
 8001b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	4413      	add	r3, r2
 8001b5c:	0fda      	lsrs	r2, r3, #31
 8001b5e:	4413      	add	r3, r2
 8001b60:	105b      	asrs	r3, r3, #1
 8001b62:	623b      	str	r3, [r7, #32]

        // Break the loop if the target distance is reached
        if (enc_dist >= target_distance)
 8001b64:	6a3a      	ldr	r2, [r7, #32]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f280 80b7 	bge.w	8001cdc <enc_drive_T+0x1ec>
        {
            break;
        }

        // Acceleration phase
        if (enc_dist < accelSteps)
 8001b6e:	6a3a      	ldr	r2, [r7, #32]
 8001b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b72:	429a      	cmp	r2, r3
 8001b74:	da0c      	bge.n	8001b90 <enc_drive_T+0xa0>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * enc_dist / accelSteps;
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	6a3a      	ldr	r2, [r7, #32]
 8001b7e:	fb03 f202 	mul.w	r2, r3, r2
 8001b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b84:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b8e:	e01e      	b.n	8001bce <enc_drive_T+0xde>
        }
        // Deceleration phase
        else if (enc_dist > decelStart)
 8001b90:	6a3a      	ldr	r2, [r7, #32]
 8001b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dd18      	ble.n	8001bca <enc_drive_T+0xda>
        {
            int remaining = target_distance - enc_dist;
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	61fb      	str	r3, [r7, #28]
            if (remaining > 0)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	dd0e      	ble.n	8001bc4 <enc_drive_T+0xd4>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target_distance - decelStart);
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	fb03 f202 	mul.w	r2, r3, r2
 8001bb2:	68f9      	ldr	r1, [r7, #12]
 8001bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bc2:	e004      	b.n	8001bce <enc_drive_T+0xde>
            }
            else
            {
                currentSpeed = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bc8:	e001      	b.n	8001bce <enc_drive_T+0xde>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        // Calculate the error (difference in encoder counts)
        int difference_ = left_count - right_count;
 8001bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	61bb      	str	r3, [r7, #24]

        // Integral term with anti-windup
        integral += difference_;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	4b45      	ldr	r3, [pc, #276]	@ (8001cf8 <enc_drive_T+0x208>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	4b43      	ldr	r3, [pc, #268]	@ (8001cf8 <enc_drive_T+0x208>)
 8001bec:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 8001bf0:	4b42      	ldr	r3, [pc, #264]	@ (8001cfc <enc_drive_T+0x20c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf8 <enc_drive_T+0x208>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d508      	bpl.n	8001c1e <enc_drive_T+0x12e>
            integral = integral_limit;
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <enc_drive_T+0x20c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c18:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <enc_drive_T+0x208>)
 8001c1a:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 8001c1e:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <enc_drive_T+0x20c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	425b      	negs	r3, r3
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <enc_drive_T+0x208>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	dd09      	ble.n	8001c50 <enc_drive_T+0x160>
            integral = -integral_limit;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <enc_drive_T+0x20c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	425b      	negs	r3, r3
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf8 <enc_drive_T+0x208>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        int correction = (difference_ * Kp1) + (integral * Ki1);
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5a:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <enc_drive_T+0x210>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c64:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <enc_drive_T+0x208>)
 8001c66:	edd3 6a00 	vldr	s13, [r3]
 8001c6a:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <enc_drive_T+0x214>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7c:	ee17 3a90 	vmov	r3, s15
 8001c80:	617b      	str	r3, [r7, #20]

        // Adjust motor speeds with correction
        int speedL = currentSpeed + correction;
 8001c82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	4413      	add	r3, r2
 8001c88:	63bb      	str	r3, [r7, #56]	@ 0x38
        int speedR = currentSpeed - correction;
 8001c8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	637b      	str	r3, [r7, #52]	@ 0x34

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8001c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bfb8      	it	lt
 8001c98:	425b      	neglt	r3, r3
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dd07      	ble.n	8001cb0 <enc_drive_T+0x1c0>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8001ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da02      	bge.n	8001cac <enc_drive_T+0x1bc>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	425b      	negs	r3, r3
 8001caa:	e000      	b.n	8001cae <enc_drive_T+0x1be>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (abs(speedR) < minSpeed)
 8001cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bfb8      	it	lt
 8001cb6:	425b      	neglt	r3, r3
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dd07      	ble.n	8001cce <enc_drive_T+0x1de>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da02      	bge.n	8001cca <enc_drive_T+0x1da>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	e000      	b.n	8001ccc <enc_drive_T+0x1dc>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34

        setMotorSpeedL(speedL);
 8001cce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001cd0:	f003 fd6e 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8001cd4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001cd6:	f003 fd1d 	bl	8005714 <setMotorSpeedR>
    {
 8001cda:	e734      	b.n	8001b46 <enc_drive_T+0x56>
            break;
 8001cdc:	bf00      	nop
    }

    // Stop the motors after reaching the target
    setMotorSpeedR(0);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f003 fd18 	bl	8005714 <setMotorSpeedR>
    setMotorSpeedL(0);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f003 fd63 	bl	80057b0 <setMotorSpeedL>
    resetEncoders();
 8001cea:	f003 f84d 	bl	8004d88 <resetEncoders>
}
 8001cee:	bf00      	nop
 8001cf0:	3740      	adds	r7, #64	@ 0x40
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000011c 	.word	0x2000011c
 8001cfc:	20000018 	.word	0x20000018
 8001d00:	20000008 	.word	0x20000008
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	66666666 	.word	0x66666666
 8001d0c:	3ffe6666 	.word	0x3ffe6666

08001d10 <enc_drive>:
void enc_drive()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
    // Read encoder counts
    int left_count = getLeftEncoderCounts();
 8001d16:	f003 f823 	bl	8004d60 <getLeftEncoderCounts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	607b      	str	r3, [r7, #4]
    int right_count = getRightEncoderCounts();
 8001d1e:	f003 f80b 	bl	8004d38 <getRightEncoderCounts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	603b      	str	r3, [r7, #0]

    // Compute the distance (average of both wheels)
    enc_dist = (left_count + right_count) / 2;
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	0fda      	lsrs	r2, r3, #31
 8001d2e:	4413      	add	r3, r2
 8001d30:	105b      	asrs	r3, r3, #1
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <enc_drive+0x12c>)
 8001d36:	601a      	str	r2, [r3, #0]

    // Calculate the error (difference in encoder counts)
    difference_ = left_count - right_count;
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	4a40      	ldr	r2, [pc, #256]	@ (8001e40 <enc_drive+0x130>)
 8001d40:	6013      	str	r3, [r2, #0]

    // Integral term with anti-windup
    integral += difference_;
 8001d42:	4b3f      	ldr	r3, [pc, #252]	@ (8001e40 <enc_drive+0x130>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <enc_drive+0x134>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d58:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <enc_drive+0x134>)
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
    if (integral > integral_limit)
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e48 <enc_drive+0x138>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6a:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <enc_drive+0x134>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	d508      	bpl.n	8001d8c <enc_drive+0x7c>
        integral = integral_limit;
 8001d7a:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <enc_drive+0x138>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d86:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <enc_drive+0x134>)
 8001d88:	edc3 7a00 	vstr	s15, [r3]
    if (integral < -integral_limit)
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <enc_drive+0x138>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	425b      	negs	r3, r3
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <enc_drive+0x134>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	dd09      	ble.n	8001dbe <enc_drive+0xae>
        integral = -integral_limit;
 8001daa:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <enc_drive+0x138>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	425b      	negs	r3, r3
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <enc_drive+0x134>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]

    // Compute correction using PI controller
    correction = (difference_ * Kp1) + (integral * Ki1);
 8001dbe:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <enc_drive+0x130>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <enc_drive+0x13c>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <enc_drive+0x134>)
 8001dd6:	edd3 6a00 	vldr	s13, [r3]
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <enc_drive+0x140>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <enc_drive+0x144>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]

    // Adjust motor speeds
    setMotorSpeedR(base_pwm - correction);
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <enc_drive+0x148>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfa:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <enc_drive+0x144>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f003 fc82 	bl	8005714 <setMotorSpeedR>
    setMotorSpeedL(base_pwm + correction);
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <enc_drive+0x148>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <enc_drive+0x144>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2a:	ee17 0a90 	vmov	r0, s15
 8001e2e:	f003 fcbf 	bl	80057b0 <setMotorSpeedL>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000120 	.word	0x20000120
 8001e40:	20000114 	.word	0x20000114
 8001e44:	2000011c 	.word	0x2000011c
 8001e48:	20000018 	.word	0x20000018
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	2000000c 	.word	0x2000000c
 8001e54:	20000110 	.word	0x20000110
 8001e58:	20000000 	.word	0x20000000

08001e5c <enc_drive_fast>:
void enc_drive_fast()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
    // Read encoder counts
    int left_count = getLeftEncoderCounts();
 8001e62:	f002 ff7d 	bl	8004d60 <getLeftEncoderCounts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	607b      	str	r3, [r7, #4]
    int right_count = getRightEncoderCounts();
 8001e6a:	f002 ff65 	bl	8004d38 <getRightEncoderCounts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	603b      	str	r3, [r7, #0]

    // Compute the distance (average of both wheels)
    enc_dist = (left_count + right_count) / 2;
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	0fda      	lsrs	r2, r3, #31
 8001e7a:	4413      	add	r3, r2
 8001e7c:	105b      	asrs	r3, r3, #1
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b41      	ldr	r3, [pc, #260]	@ (8001f88 <enc_drive_fast+0x12c>)
 8001e82:	601a      	str	r2, [r3, #0]

    // Calculate the error (difference in encoder counts)
    difference_ = left_count - right_count;
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	4a40      	ldr	r2, [pc, #256]	@ (8001f8c <enc_drive_fast+0x130>)
 8001e8c:	6013      	str	r3, [r2, #0]

    // Integral term with anti-windup
    integral += difference_;
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f8c <enc_drive_fast+0x130>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f90 <enc_drive_fast+0x134>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <enc_drive_fast+0x134>)
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
    if (integral > integral_limit)
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8001f94 <enc_drive_fast+0x138>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb6:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <enc_drive_fast+0x134>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d508      	bpl.n	8001ed8 <enc_drive_fast+0x7c>
        integral = integral_limit;
 8001ec6:	4b33      	ldr	r3, [pc, #204]	@ (8001f94 <enc_drive_fast+0x138>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <enc_drive_fast+0x134>)
 8001ed4:	edc3 7a00 	vstr	s15, [r3]
    if (integral < -integral_limit)
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <enc_drive_fast+0x138>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	425b      	negs	r3, r3
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <enc_drive_fast+0x134>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd09      	ble.n	8001f0a <enc_drive_fast+0xae>
        integral = -integral_limit;
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <enc_drive_fast+0x138>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	425b      	negs	r3, r3
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f04:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <enc_drive_fast+0x134>)
 8001f06:	edc3 7a00 	vstr	s15, [r3]

    // Compute correction using PI controller
    correction = (difference_ * Kp_fast) + (integral * Ki_fast);
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <enc_drive_fast+0x130>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <enc_drive_fast+0x13c>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f20:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <enc_drive_fast+0x134>)
 8001f22:	edd3 6a00 	vldr	s13, [r3]
 8001f26:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <enc_drive_fast+0x140>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <enc_drive_fast+0x144>)
 8001f36:	edc3 7a00 	vstr	s15, [r3]

    // Adjust motor speeds
    setMotorSpeedR(base_pwm_fast - correction);
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <enc_drive_fast+0x148>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <enc_drive_fast+0x144>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f54:	ee17 0a90 	vmov	r0, s15
 8001f58:	f003 fbdc 	bl	8005714 <setMotorSpeedR>
    setMotorSpeedL(base_pwm_fast + correction);
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <enc_drive_fast+0x148>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f68:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <enc_drive_fast+0x144>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f76:	ee17 0a90 	vmov	r0, s15
 8001f7a:	f003 fc19 	bl	80057b0 <setMotorSpeedL>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000120 	.word	0x20000120
 8001f8c:	20000114 	.word	0x20000114
 8001f90:	2000011c 	.word	0x2000011c
 8001f94:	20000018 	.word	0x20000018
 8001f98:	20000010 	.word	0x20000010
 8001f9c:	20000014 	.word	0x20000014
 8001fa0:	20000110 	.word	0x20000110
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <enc_drive2>:
void enc_drive2(int speed)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    // Read encoder counts
    int left_count = getLeftEncoderCounts();
 8001fb0:	f002 fed6 	bl	8004d60 <getLeftEncoderCounts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]
    int right_count = getRightEncoderCounts();
 8001fb8:	f002 febe 	bl	8004d38 <getRightEncoderCounts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60bb      	str	r3, [r7, #8]

    // Compute the distance (average of both wheels)
    enc_dist = (left_count + right_count) / 2;
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	0fda      	lsrs	r2, r3, #31
 8001fc8:	4413      	add	r3, r2
 8001fca:	105b      	asrs	r3, r3, #1
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b4c      	ldr	r3, [pc, #304]	@ (8002100 <enc_drive2+0x158>)
 8001fd0:	601a      	str	r2, [r3, #0]

    // Calculate the error (difference in encoder counts)
    difference_ = left_count - right_count;
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002104 <enc_drive2+0x15c>)
 8001fda:	6013      	str	r3, [r2, #0]

    // Integral term with anti-windup
    integral += difference_;
 8001fdc:	4b49      	ldr	r3, [pc, #292]	@ (8002104 <enc_drive2+0x15c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe8:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <enc_drive2+0x160>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	4b45      	ldr	r3, [pc, #276]	@ (8002108 <enc_drive2+0x160>)
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
    if (integral > integral_limit)
 8001ff8:	4b44      	ldr	r3, [pc, #272]	@ (800210c <enc_drive2+0x164>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002004:	4b40      	ldr	r3, [pc, #256]	@ (8002108 <enc_drive2+0x160>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	d508      	bpl.n	8002026 <enc_drive2+0x7e>
        integral = integral_limit;
 8002014:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <enc_drive2+0x164>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002020:	4b39      	ldr	r3, [pc, #228]	@ (8002108 <enc_drive2+0x160>)
 8002022:	edc3 7a00 	vstr	s15, [r3]
    if (integral < -integral_limit)
 8002026:	4b39      	ldr	r3, [pc, #228]	@ (800210c <enc_drive2+0x164>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	425b      	negs	r3, r3
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002034:	4b34      	ldr	r3, [pc, #208]	@ (8002108 <enc_drive2+0x160>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	dd09      	ble.n	8002058 <enc_drive2+0xb0>
        integral = -integral_limit;
 8002044:	4b31      	ldr	r3, [pc, #196]	@ (800210c <enc_drive2+0x164>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	425b      	negs	r3, r3
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002052:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <enc_drive2+0x160>)
 8002054:	edc3 7a00 	vstr	s15, [r3]

    // Compute correction using PI controller
    correction = (difference_ * 1.3) + (integral * 0.0013);
 8002058:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <enc_drive2+0x15c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa61 	bl	8000524 <__aeabi_i2d>
 8002062:	a323      	add	r3, pc, #140	@ (adr r3, 80020f0 <enc_drive2+0x148>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe fac6 	bl	80005f8 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <enc_drive2+0x160>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa65 	bl	8000548 <__aeabi_f2d>
 800207e:	a31e      	add	r3, pc, #120	@ (adr r3, 80020f8 <enc_drive2+0x150>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fab8 	bl	80005f8 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe f8fc 	bl	800028c <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd8e 	bl	8000bbc <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002110 <enc_drive2+0x168>)
 80020a4:	6013      	str	r3, [r2, #0]

    // Adjust motor speeds
    setMotorSpeedR(speed - correction);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <enc_drive2+0x168>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020be:	ee17 0a90 	vmov	r0, s15
 80020c2:	f003 fb27 	bl	8005714 <setMotorSpeedR>
    setMotorSpeedL(speed + correction);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <enc_drive2+0x168>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020de:	ee17 0a90 	vmov	r0, s15
 80020e2:	f003 fb65 	bl	80057b0 <setMotorSpeedL>
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdb0      	pop	{r4, r5, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	cccccccd 	.word	0xcccccccd
 80020f4:	3ff4cccc 	.word	0x3ff4cccc
 80020f8:	5f06f694 	.word	0x5f06f694
 80020fc:	3f554c98 	.word	0x3f554c98
 8002100:	20000120 	.word	0x20000120
 8002104:	20000114 	.word	0x20000114
 8002108:	2000011c 	.word	0x2000011c
 800210c:	20000018 	.word	0x20000018
 8002110:	20000110 	.word	0x20000110

08002114 <enc_driveR>:
void enc_driveR(int speed)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    int left_count = getLeftEncoderCounts();
 800211c:	f002 fe20 	bl	8004d60 <getLeftEncoderCounts>
 8002120:	4603      	mov	r3, r0
 8002122:	60fb      	str	r3, [r7, #12]
    int right_count = getRightEncoderCounts();
 8002124:	f002 fe08 	bl	8004d38 <getRightEncoderCounts>
 8002128:	4603      	mov	r3, r0
 800212a:	60bb      	str	r3, [r7, #8]
    // Compute the distance (average of both wheels)
    enc_dist = (left_count + right_count) / 2;
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	0fda      	lsrs	r2, r3, #31
 8002134:	4413      	add	r3, r2
 8002136:	105b      	asrs	r3, r3, #1
 8002138:	461a      	mov	r2, r3
 800213a:	4b42      	ldr	r3, [pc, #264]	@ (8002244 <enc_driveR+0x130>)
 800213c:	601a      	str	r2, [r3, #0]
    // Calculate the error (difference in encoder counts)
    difference_ = left_count - right_count;
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	4a40      	ldr	r2, [pc, #256]	@ (8002248 <enc_driveR+0x134>)
 8002146:	6013      	str	r3, [r2, #0]
    // Integral term with anti-windup
    integral += difference_;
 8002148:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <enc_driveR+0x134>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002154:	4b3d      	ldr	r3, [pc, #244]	@ (800224c <enc_driveR+0x138>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <enc_driveR+0x138>)
 8002160:	edc3 7a00 	vstr	s15, [r3]
    if (integral > integral_limit)
 8002164:	4b3a      	ldr	r3, [pc, #232]	@ (8002250 <enc_driveR+0x13c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002170:	4b36      	ldr	r3, [pc, #216]	@ (800224c <enc_driveR+0x138>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d508      	bpl.n	8002192 <enc_driveR+0x7e>
        integral = integral_limit;
 8002180:	4b33      	ldr	r3, [pc, #204]	@ (8002250 <enc_driveR+0x13c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	4b2f      	ldr	r3, [pc, #188]	@ (800224c <enc_driveR+0x138>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
    if (integral < -integral_limit)
 8002192:	4b2f      	ldr	r3, [pc, #188]	@ (8002250 <enc_driveR+0x13c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	425b      	negs	r3, r3
 8002198:	ee07 3a90 	vmov	s15, r3
 800219c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a0:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <enc_driveR+0x138>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	dd09      	ble.n	80021c4 <enc_driveR+0xb0>
        integral = -integral_limit;
 80021b0:	4b27      	ldr	r3, [pc, #156]	@ (8002250 <enc_driveR+0x13c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	425b      	negs	r3, r3
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021be:	4b23      	ldr	r3, [pc, #140]	@ (800224c <enc_driveR+0x138>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]
    // Compute correction using PI controller
    correction = (difference_ * Kp1) + (integral * Ki1);
 80021c4:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <enc_driveR+0x134>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d0:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <enc_driveR+0x140>)
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021da:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <enc_driveR+0x138>)
 80021dc:	edd3 6a00 	vldr	s13, [r3]
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <enc_driveR+0x144>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <enc_driveR+0x148>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]
    setMotorSpeedL(-speed - 15 + correction);
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	f06f 030e 	mvn.w	r3, #14
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002204:	4b15      	ldr	r3, [pc, #84]	@ (800225c <enc_driveR+0x148>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002212:	ee17 0a90 	vmov	r0, s15
 8002216:	f003 facb 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(-speed - correction);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	425b      	negs	r3, r3
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <enc_driveR+0x148>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002234:	ee17 0a90 	vmov	r0, s15
 8002238:	f003 fa6c 	bl	8005714 <setMotorSpeedR>
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000120 	.word	0x20000120
 8002248:	20000114 	.word	0x20000114
 800224c:	2000011c 	.word	0x2000011c
 8002250:	20000018 	.word	0x20000018
 8002254:	20000008 	.word	0x20000008
 8002258:	2000000c 	.word	0x2000000c
 800225c:	20000110 	.word	0x20000110

08002260 <enc_driveR_T>:
void enc_driveR_T(int target_distance, const int maxSpeed, const int minSpeed)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b092      	sub	sp, #72	@ 0x48
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
    resetEncoders();
 800226c:	f002 fd8c 	bl	8004d88 <resetEncoders>

    const int accelSteps = target_distance / 4;                       // Acceleration distance
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da00      	bge.n	8002278 <enc_driveR_T+0x18>
 8002276:	3303      	adds	r3, #3
 8002278:	109b      	asrs	r3, r3, #2
 800227a:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int decelStart = target_distance - (target_distance / 1.9); // When to start decelerating
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7fe f951 	bl	8000524 <__aeabi_i2d>
 8002282:	4604      	mov	r4, r0
 8002284:	460d      	mov	r5, r1
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7fe f94c 	bl	8000524 <__aeabi_i2d>
 800228c:	a382      	add	r3, pc, #520	@ (adr r3, 8002498 <enc_driveR_T+0x238>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe fadb 	bl	800084c <__aeabi_ddiv>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fd fff3 	bl	8000288 <__aeabi_dsub>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fc3f 	bl	8000b2c <__aeabi_d2iz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34

    int currentSpeed = minSpeed; // Starting speed
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	647b      	str	r3, [r7, #68]	@ 0x44

    while (1)
    {
        // Read encoder counts
        int left_count1 = getLeftEncoderCounts();
 80022b6:	f002 fd53 	bl	8004d60 <getLeftEncoderCounts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	633b      	str	r3, [r7, #48]	@ 0x30
        int right_count1 = getRightEncoderCounts();
 80022be:	f002 fd3b 	bl	8004d38 <getRightEncoderCounts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int left_count = -left_count1;
 80022c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c8:	425b      	negs	r3, r3
 80022ca:	62bb      	str	r3, [r7, #40]	@ 0x28
        int right_count = -right_count1;
 80022cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ce:	425b      	negs	r3, r3
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
        // Compute the distance (average of both wheels)
        int enc_dist = (abs(left_count) + abs(right_count)) / 2;
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80022d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfb8      	it	lt
 80022e2:	425b      	neglt	r3, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	0fda      	lsrs	r2, r3, #31
 80022e8:	4413      	add	r3, r2
 80022ea:	105b      	asrs	r3, r3, #1
 80022ec:	623b      	str	r3, [r7, #32]

        // Break the loop if the target distance is reached
        if (enc_dist >= target_distance)
 80022ee:	6a3a      	ldr	r2, [r7, #32]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	f280 80bb 	bge.w	800246e <enc_driveR_T+0x20e>
        {
            break;
        }

        // Acceleration phase
        if (enc_dist < accelSteps)
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fc:	429a      	cmp	r2, r3
 80022fe:	da0c      	bge.n	800231a <enc_driveR_T+0xba>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * enc_dist / accelSteps;
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	fb03 f202 	mul.w	r2, r3, r2
 800230c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	647b      	str	r3, [r7, #68]	@ 0x44
 8002318:	e01e      	b.n	8002358 <enc_driveR_T+0xf8>
        }
        // Deceleration phase
        else if (enc_dist > decelStart)
 800231a:	6a3a      	ldr	r2, [r7, #32]
 800231c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231e:	429a      	cmp	r2, r3
 8002320:	dd18      	ble.n	8002354 <enc_driveR_T+0xf4>
        {
            int remaining = target_distance - enc_dist;
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	61fb      	str	r3, [r7, #28]
            if (remaining > 0)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	dd0e      	ble.n	800234e <enc_driveR_T+0xee>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target_distance - decelStart);
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	fb03 f202 	mul.w	r2, r3, r2
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	1acb      	subs	r3, r1, r3
 8002342:	fb92 f3f3 	sdiv	r3, r2, r3
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	647b      	str	r3, [r7, #68]	@ 0x44
 800234c:	e004      	b.n	8002358 <enc_driveR_T+0xf8>
            }
            else
            {
                currentSpeed = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
 8002352:	e001      	b.n	8002358 <enc_driveR_T+0xf8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // Calculate the error (difference in encoder counts)
        int difference_ = left_count - right_count;
 8002358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	61bb      	str	r3, [r7, #24]

        // Integral term with anti-windup
        integral += difference_;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <enc_driveR_T+0x228>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <enc_driveR_T+0x228>)
 8002376:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 800237a:	4b44      	ldr	r3, [pc, #272]	@ (800248c <enc_driveR_T+0x22c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002386:	4b40      	ldr	r3, [pc, #256]	@ (8002488 <enc_driveR_T+0x228>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	d508      	bpl.n	80023a8 <enc_driveR_T+0x148>
            integral = integral_limit;
 8002396:	4b3d      	ldr	r3, [pc, #244]	@ (800248c <enc_driveR_T+0x22c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a2:	4b39      	ldr	r3, [pc, #228]	@ (8002488 <enc_driveR_T+0x228>)
 80023a4:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 80023a8:	4b38      	ldr	r3, [pc, #224]	@ (800248c <enc_driveR_T+0x22c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	425b      	negs	r3, r3
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b6:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <enc_driveR_T+0x228>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	dd09      	ble.n	80023da <enc_driveR_T+0x17a>
            integral = -integral_limit;
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <enc_driveR_T+0x22c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	425b      	negs	r3, r3
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <enc_driveR_T+0x228>)
 80023d6:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        int correction = (difference_ * Kp1) + (integral * Ki1);
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002490 <enc_driveR_T+0x230>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ee:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <enc_driveR_T+0x228>)
 80023f0:	edd3 6a00 	vldr	s13, [r3]
 80023f4:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <enc_driveR_T+0x234>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002406:	ee17 3a90 	vmov	r3, s15
 800240a:	617b      	str	r3, [r7, #20]

        // Adjust motor speeds with correction (negative for reverse)
        int speedL = (currentSpeed + correction);
 800240c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4413      	add	r3, r2
 8002412:	643b      	str	r3, [r7, #64]	@ 0x40
        int speedR = (currentSpeed - correction);
 8002414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 800241c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	bfb8      	it	lt
 8002422:	425b      	neglt	r3, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	dd07      	ble.n	800243a <enc_driveR_T+0x1da>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 800242a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	da02      	bge.n	8002436 <enc_driveR_T+0x1d6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	425b      	negs	r3, r3
 8002434:	e000      	b.n	8002438 <enc_driveR_T+0x1d8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	643b      	str	r3, [r7, #64]	@ 0x40
        if (abs(speedR) < minSpeed)
 800243a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	bfb8      	it	lt
 8002440:	425b      	neglt	r3, r3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	dd07      	ble.n	8002458 <enc_driveR_T+0x1f8>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8002448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800244a:	2b00      	cmp	r3, #0
 800244c:	da02      	bge.n	8002454 <enc_driveR_T+0x1f4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	425b      	negs	r3, r3
 8002452:	e000      	b.n	8002456 <enc_driveR_T+0x1f6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	63fb      	str	r3, [r7, #60]	@ 0x3c

        setMotorSpeedL(-speedL);
 8002458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800245a:	425b      	negs	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f003 f9a7 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(-speedR);
 8002462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002464:	425b      	negs	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f003 f954 	bl	8005714 <setMotorSpeedR>
    {
 800246c:	e723      	b.n	80022b6 <enc_driveR_T+0x56>
            break;
 800246e:	bf00      	nop
    }

    // Stop the motors after reaching the target
    setMotorSpeedL(0);
 8002470:	2000      	movs	r0, #0
 8002472:	f003 f99d 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8002476:	2000      	movs	r0, #0
 8002478:	f003 f94c 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 800247c:	f002 fc84 	bl	8004d88 <resetEncoders>
}
 8002480:	bf00      	nop
 8002482:	3748      	adds	r7, #72	@ 0x48
 8002484:	46bd      	mov	sp, r7
 8002486:	bdb0      	pop	{r4, r5, r7, pc}
 8002488:	2000011c 	.word	0x2000011c
 800248c:	20000018 	.word	0x20000018
 8002490:	20000008 	.word	0x20000008
 8002494:	2000000c 	.word	0x2000000c
 8002498:	66666666 	.word	0x66666666
 800249c:	3ffe6666 	.word	0x3ffe6666

080024a0 <enc_drive_fast_to_target>:
void enc_drive_fast_to_target(int target_distance, const int maxSpeed, const int minSpeed)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	@ 0x38
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
    resetEncoders();
 80024ac:	f002 fc6c 	bl	8004d88 <resetEncoders>

    const int decelStart = target_distance - (target_distance / 2); // Start decelerating at 2/3 of the target distance
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0fda      	lsrs	r2, r3, #31
 80024b4:	4413      	add	r3, r2
 80024b6:	105b      	asrs	r3, r3, #1
 80024b8:	425b      	negs	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    int currentSpeed = maxSpeed;                                    // Start at maximum speed
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 80024c6:	f002 fc4b 	bl	8004d60 <getLeftEncoderCounts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
        int right_count = getRightEncoderCounts();
 80024ce:	f002 fc33 	bl	8004d38 <getRightEncoderCounts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	623b      	str	r3, [r7, #32]

        // Compute the distance (average of both wheels)
        int enc_dist = (left_count + right_count) / 2;
 80024d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	4413      	add	r3, r2
 80024dc:	0fda      	lsrs	r2, r3, #31
 80024de:	4413      	add	r3, r2
 80024e0:	105b      	asrs	r3, r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]

        // Break the loop if the target distance is reached
        if (enc_dist >= target_distance)
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f280 80a3 	bge.w	8002634 <enc_drive_fast_to_target+0x194>
        {
            break;
        }

        // Deceleration phase
        if (enc_dist > decelStart)
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dd17      	ble.n	8002526 <enc_drive_fast_to_target+0x86>
        {
            int remaining = target_distance - enc_dist;
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	61bb      	str	r3, [r7, #24]
            if (remaining > 0)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	dd0e      	ble.n	8002522 <enc_drive_fast_to_target+0x82>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target_distance - decelStart);
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	fb03 f202 	mul.w	r2, r3, r2
 8002510:	68f9      	ldr	r1, [r7, #12]
 8002512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002514:	1acb      	subs	r3, r1, r3
 8002516:	fb92 f3f3 	sdiv	r3, r2, r3
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002520:	e001      	b.n	8002526 <enc_drive_fast_to_target+0x86>
            }
            else
            {
                currentSpeed = minSpeed;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        // Calculate the error (difference in encoder counts)
        int difference_ = left_count - right_count;
 8002526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]

        // Integral term with anti-windup
        integral += difference_;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002538:	4b45      	ldr	r3, [pc, #276]	@ (8002650 <enc_drive_fast_to_target+0x1b0>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002542:	4b43      	ldr	r3, [pc, #268]	@ (8002650 <enc_drive_fast_to_target+0x1b0>)
 8002544:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 8002548:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <enc_drive_fast_to_target+0x1b4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002554:	4b3e      	ldr	r3, [pc, #248]	@ (8002650 <enc_drive_fast_to_target+0x1b0>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d508      	bpl.n	8002576 <enc_drive_fast_to_target+0xd6>
            integral = integral_limit;
 8002564:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <enc_drive_fast_to_target+0x1b4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002570:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <enc_drive_fast_to_target+0x1b0>)
 8002572:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 8002576:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <enc_drive_fast_to_target+0x1b4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	425b      	negs	r3, r3
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002584:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <enc_drive_fast_to_target+0x1b0>)
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	dd09      	ble.n	80025a8 <enc_drive_fast_to_target+0x108>
            integral = -integral_limit;
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <enc_drive_fast_to_target+0x1b4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	425b      	negs	r3, r3
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <enc_drive_fast_to_target+0x1b0>)
 80025a4:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        int correction = (difference_ * Kp_fast) + (integral * Ki_fast);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b2:	4b29      	ldr	r3, [pc, #164]	@ (8002658 <enc_drive_fast_to_target+0x1b8>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025bc:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <enc_drive_fast_to_target+0x1b0>)
 80025be:	edd3 6a00 	vldr	s13, [r3]
 80025c2:	4b26      	ldr	r3, [pc, #152]	@ (800265c <enc_drive_fast_to_target+0x1bc>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d4:	ee17 3a90 	vmov	r3, s15
 80025d8:	613b      	str	r3, [r7, #16]

        // Adjust motor speeds with correction
        int speedL = currentSpeed + correction;
 80025da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 80025e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bfb8      	it	lt
 80025f0:	425b      	neglt	r3, r3
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dd07      	ble.n	8002608 <enc_drive_fast_to_target+0x168>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da02      	bge.n	8002604 <enc_drive_fast_to_target+0x164>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	425b      	negs	r3, r3
 8002602:	e000      	b.n	8002606 <enc_drive_fast_to_target+0x166>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8002608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260a:	2b00      	cmp	r3, #0
 800260c:	bfb8      	it	lt
 800260e:	425b      	neglt	r3, r3
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dd07      	ble.n	8002626 <enc_drive_fast_to_target+0x186>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	da02      	bge.n	8002622 <enc_drive_fast_to_target+0x182>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	425b      	negs	r3, r3
 8002620:	e000      	b.n	8002624 <enc_drive_fast_to_target+0x184>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 8002626:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002628:	f003 f8c2 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 800262c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800262e:	f003 f871 	bl	8005714 <setMotorSpeedR>
    {
 8002632:	e748      	b.n	80024c6 <enc_drive_fast_to_target+0x26>
            break;
 8002634:	bf00      	nop
    }

    // Stop the motors after reaching the target
    setMotorSpeedL(0);
 8002636:	2000      	movs	r0, #0
 8002638:	f003 f8ba 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 800263c:	2000      	movs	r0, #0
 800263e:	f003 f869 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8002642:	f002 fba1 	bl	8004d88 <resetEncoders>
}
 8002646:	bf00      	nop
 8002648:	3738      	adds	r7, #56	@ 0x38
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000011c 	.word	0x2000011c
 8002654:	20000018 	.word	0x20000018
 8002658:	20000010 	.word	0x20000010
 800265c:	20000014 	.word	0x20000014

08002660 <line_follow_to_target>:
}
/////////////////////////////////////////////////

/////////////////////////////////////////////////
void line_follow_to_target(int target_distance, int maxSpeed, int minSpeed)
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b092      	sub	sp, #72	@ 0x48
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
    resetEncoders();
 800266c:	f002 fb8c 	bl	8004d88 <resetEncoders>

    const int accelSteps = target_distance / 3;                     // Distance for acceleration
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a9d      	ldr	r2, [pc, #628]	@ (80028e8 <line_follow_to_target+0x288>)
 8002674:	fb82 1203 	smull	r1, r2, r2, r3
 8002678:	17db      	asrs	r3, r3, #31
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int decelStart = target_distance - (target_distance / 2); // Start deceleration
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	0fda      	lsrs	r2, r3, #31
 8002682:	4413      	add	r3, r2
 8002684:	105b      	asrs	r3, r3, #1
 8002686:	425b      	negs	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	637b      	str	r3, [r7, #52]	@ 0x34

    int currentSpeed = minSpeed; // Initial speed
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	647b      	str	r3, [r7, #68]	@ 0x44
    static int last_error = 0;   // Previous error for derivative calculation

    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 8002694:	f002 fb64 	bl	8004d60 <getLeftEncoderCounts>
 8002698:	4603      	mov	r3, r0
 800269a:	633b      	str	r3, [r7, #48]	@ 0x30
        int right_count = getRightEncoderCounts();
 800269c:	f002 fb4c 	bl	8004d38 <getRightEncoderCounts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Compute the distance (average of both wheels)
        int enc_dist = (left_count + right_count) / 2;
 80026a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a8:	4413      	add	r3, r2
 80026aa:	0fda      	lsrs	r2, r3, #31
 80026ac:	4413      	add	r3, r2
 80026ae:	105b      	asrs	r3, r3, #1
 80026b0:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Break the loop if the target distance is reached
        if (enc_dist >= target_distance)
 80026b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	f280 80ee 	bge.w	8002898 <line_follow_to_target+0x238>
        {
            break;
        }

        // Acceleration phase
        if (enc_dist < accelSteps)
 80026bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c0:	429a      	cmp	r2, r3
 80026c2:	da0c      	bge.n	80026de <line_follow_to_target+0x7e>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * enc_dist / accelSteps;
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026cc:	fb03 f202 	mul.w	r2, r3, r2
 80026d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	647b      	str	r3, [r7, #68]	@ 0x44
 80026dc:	e01e      	b.n	800271c <line_follow_to_target+0xbc>
        }
        // Deceleration phase
        else if (enc_dist > decelStart)
 80026de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dd18      	ble.n	8002718 <line_follow_to_target+0xb8>
        {
            int remaining = target_distance - enc_dist;
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
            if (remaining > 0)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dd0e      	ble.n	8002712 <line_follow_to_target+0xb2>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target_distance - decelStart);
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fc:	fb03 f202 	mul.w	r2, r3, r2
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002704:	1acb      	subs	r3, r1, r3
 8002706:	fb92 f3f3 	sdiv	r3, r2, r3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002710:	e004      	b.n	800271c <line_follow_to_target+0xbc>
            }
            else
            {
                currentSpeed = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	647b      	str	r3, [r7, #68]	@ 0x44
 8002716:	e001      	b.n	800271c <line_follow_to_target+0xbc>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // Line-following logic
        int error = (IR[0] * -38.1) +
 800271c:	4b73      	ldr	r3, [pc, #460]	@ (80028ec <line_follow_to_target+0x28c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd feff 	bl	8000524 <__aeabi_i2d>
 8002726:	a364      	add	r3, pc, #400	@ (adr r3, 80028b8 <line_follow_to_target+0x258>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff64 	bl	80005f8 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4614      	mov	r4, r2
 8002736:	461d      	mov	r5, r3
                    (IR[1] * -25.4) +
 8002738:	4b6c      	ldr	r3, [pc, #432]	@ (80028ec <line_follow_to_target+0x28c>)
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fef1 	bl	8000524 <__aeabi_i2d>
 8002742:	a35f      	add	r3, pc, #380	@ (adr r3, 80028c0 <line_follow_to_target+0x260>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd ff56 	bl	80005f8 <__aeabi_dmul>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
        int error = (IR[0] * -38.1) +
 8002750:	4620      	mov	r0, r4
 8002752:	4629      	mov	r1, r5
 8002754:	f7fd fd9a 	bl	800028c <__adddf3>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	461d      	mov	r5, r3
                    (IR[2] * -10.16) +
 8002760:	4b62      	ldr	r3, [pc, #392]	@ (80028ec <line_follow_to_target+0x28c>)
 8002762:	789b      	ldrb	r3, [r3, #2]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fedd 	bl	8000524 <__aeabi_i2d>
 800276a:	a357      	add	r3, pc, #348	@ (adr r3, 80028c8 <line_follow_to_target+0x268>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd ff42 	bl	80005f8 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
                    (IR[1] * -25.4) +
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd86 	bl	800028c <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
                    (IR[2] * -10.16) +
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f7fd fd7c 	bl	800028c <__adddf3>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
                    (IR[3] * 0) +
                    (IR[4] * 10.16) +
 800279c:	4b53      	ldr	r3, [pc, #332]	@ (80028ec <line_follow_to_target+0x28c>)
 800279e:	791b      	ldrb	r3, [r3, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd febf 	bl	8000524 <__aeabi_i2d>
 80027a6:	a34a      	add	r3, pc, #296	@ (adr r3, 80028d0 <line_follow_to_target+0x270>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f7fd ff24 	bl	80005f8 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
                    (IR[3] * 0) +
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fd fd68 	bl	800028c <__adddf3>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
                    (IR[5] * 25.4) +
 80027c4:	4b49      	ldr	r3, [pc, #292]	@ (80028ec <line_follow_to_target+0x28c>)
 80027c6:	795b      	ldrb	r3, [r3, #5]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd feab 	bl	8000524 <__aeabi_i2d>
 80027ce:	a342      	add	r3, pc, #264	@ (adr r3, 80028d8 <line_follow_to_target+0x278>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd ff10 	bl	80005f8 <__aeabi_dmul>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
                    (IR[4] * 10.16) +
 80027dc:	4620      	mov	r0, r4
 80027de:	4629      	mov	r1, r5
 80027e0:	f7fd fd54 	bl	800028c <__adddf3>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4614      	mov	r4, r2
 80027ea:	461d      	mov	r5, r3
                    (IR[6] * 38.1);
 80027ec:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <line_follow_to_target+0x28c>)
 80027ee:	799b      	ldrb	r3, [r3, #6]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe97 	bl	8000524 <__aeabi_i2d>
 80027f6:	a33a      	add	r3, pc, #232	@ (adr r3, 80028e0 <line_follow_to_target+0x280>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f7fd fefc 	bl	80005f8 <__aeabi_dmul>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
                    (IR[5] * 25.4) +
 8002804:	4620      	mov	r0, r4
 8002806:	4629      	mov	r1, r5
 8002808:	f7fd fd40 	bl	800028c <__adddf3>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
        int error = (IR[0] * -38.1) +
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7fe f98a 	bl	8000b2c <__aeabi_d2iz>
 8002818:	4603      	mov	r3, r0
 800281a:	623b      	str	r3, [r7, #32]

        int derivative = error - last_error;
 800281c:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <line_follow_to_target+0x290>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a3a      	ldr	r2, [r7, #32]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	61fb      	str	r3, [r7, #28]

        // PD control constants
        const float Kp = 0.7; // Proportional gain
 8002826:	4b33      	ldr	r3, [pc, #204]	@ (80028f4 <line_follow_to_target+0x294>)
 8002828:	61bb      	str	r3, [r7, #24]
        const float Kd = 0.3; // Derivative gain
 800282a:	4b33      	ldr	r3, [pc, #204]	@ (80028f8 <line_follow_to_target+0x298>)
 800282c:	617b      	str	r3, [r7, #20]

        // Calculate control output
        int control_output = (int)(Kp * error + Kd * derivative);
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	edd7 7a06 	vldr	s15, [r7, #24]
 800283c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800284a:	edd7 7a05 	vldr	s15, [r7, #20]
 800284e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800285a:	ee17 3a90 	vmov	r3, s15
 800285e:	613b      	str	r3, [r7, #16]

        // Adjust motor speeds based on control output
        int left_speed = currentSpeed - control_output;
 8002860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	643b      	str	r3, [r7, #64]	@ 0x40
        int right_speed = currentSpeed + control_output;
 8002868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Ensure minimum PWM for motors
        if (left_speed < MIN_WORKING_PWM)
 8002870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002872:	2b27      	cmp	r3, #39	@ 0x27
 8002874:	dc01      	bgt.n	800287a <line_follow_to_target+0x21a>
            left_speed = MIN_WORKING_PWM;
 8002876:	2328      	movs	r3, #40	@ 0x28
 8002878:	643b      	str	r3, [r7, #64]	@ 0x40
        if (right_speed < MIN_WORKING_PWM)
 800287a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287c:	2b27      	cmp	r3, #39	@ 0x27
 800287e:	dc01      	bgt.n	8002884 <line_follow_to_target+0x224>
            right_speed = MIN_WORKING_PWM;
 8002880:	2328      	movs	r3, #40	@ 0x28
 8002882:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Set motor speeds
        setMotorSpeedL(left_speed);
 8002884:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002886:	f002 ff93 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(right_speed);
 800288a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800288c:	f002 ff42 	bl	8005714 <setMotorSpeedR>

        // Update last error
        last_error = error;
 8002890:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <line_follow_to_target+0x290>)
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	6013      	str	r3, [r2, #0]
    {
 8002896:	e6fd      	b.n	8002694 <line_follow_to_target+0x34>
            break;
 8002898:	bf00      	nop
    }

    // Stop the motors after reaching the target
    setMotorSpeedL(0);
 800289a:	2000      	movs	r0, #0
 800289c:	f002 ff88 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f002 ff37 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 80028a6:	f002 fa6f 	bl	8004d88 <resetEncoders>
}
 80028aa:	bf00      	nop
 80028ac:	3748      	adds	r7, #72	@ 0x48
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bdb0      	pop	{r4, r5, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	f3af 8000 	nop.w
 80028b8:	cccccccd 	.word	0xcccccccd
 80028bc:	c0430ccc 	.word	0xc0430ccc
 80028c0:	66666666 	.word	0x66666666
 80028c4:	c0396666 	.word	0xc0396666
 80028c8:	851eb852 	.word	0x851eb852
 80028cc:	c02451eb 	.word	0xc02451eb
 80028d0:	851eb852 	.word	0x851eb852
 80028d4:	402451eb 	.word	0x402451eb
 80028d8:	66666666 	.word	0x66666666
 80028dc:	40396666 	.word	0x40396666
 80028e0:	cccccccd 	.word	0xcccccccd
 80028e4:	40430ccc 	.word	0x40430ccc
 80028e8:	55555556 	.word	0x55555556
 80028ec:	20000468 	.word	0x20000468
 80028f0:	20000140 	.word	0x20000140
 80028f4:	3f333333 	.word	0x3f333333
 80028f8:	3e99999a 	.word	0x3e99999a
 80028fc:	00000000 	.word	0x00000000

08002900 <line_follow>:
void line_follow()
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
    static int last_error = 0; // Previous error value for derivative calculation
    int error = 0;             // Error value for line deviation
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
                               // Derivative of the error

    // Calculate weighted error
    error = (IR[0] * -38.1) +
 800290a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac0 <line_follow+0x1c0>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe08 	bl	8000524 <__aeabi_i2d>
 8002914:	a35e      	add	r3, pc, #376	@ (adr r3, 8002a90 <line_follow+0x190>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fe6d 	bl	80005f8 <__aeabi_dmul>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4614      	mov	r4, r2
 8002924:	461d      	mov	r5, r3
            (IR[1] * -25.4) +
 8002926:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <line_follow+0x1c0>)
 8002928:	785b      	ldrb	r3, [r3, #1]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fdfa 	bl	8000524 <__aeabi_i2d>
 8002930:	a359      	add	r3, pc, #356	@ (adr r3, 8002a98 <line_follow+0x198>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	f7fd fe5f 	bl	80005f8 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
    error = (IR[0] * -38.1) +
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	f7fd fca3 	bl	800028c <__adddf3>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4614      	mov	r4, r2
 800294c:	461d      	mov	r5, r3
            (IR[2] * -10.16) +
 800294e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ac0 <line_follow+0x1c0>)
 8002950:	789b      	ldrb	r3, [r3, #2]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fde6 	bl	8000524 <__aeabi_i2d>
 8002958:	a351      	add	r3, pc, #324	@ (adr r3, 8002aa0 <line_follow+0x1a0>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fe4b 	bl	80005f8 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
            (IR[1] * -25.4) +
 8002966:	4620      	mov	r0, r4
 8002968:	4629      	mov	r1, r5
 800296a:	f7fd fc8f 	bl	800028c <__adddf3>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
            (IR[2] * -10.16) +
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	f7fd fc85 	bl	800028c <__adddf3>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4614      	mov	r4, r2
 8002988:	461d      	mov	r5, r3
            (IR[3] * 0) +
            (IR[4] * 10.16) +
 800298a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac0 <line_follow+0x1c0>)
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fdc8 	bl	8000524 <__aeabi_i2d>
 8002994:	a344      	add	r3, pc, #272	@ (adr r3, 8002aa8 <line_follow+0x1a8>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd fe2d 	bl	80005f8 <__aeabi_dmul>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
            (IR[3] * 0) +
 80029a2:	4620      	mov	r0, r4
 80029a4:	4629      	mov	r1, r5
 80029a6:	f7fd fc71 	bl	800028c <__adddf3>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4614      	mov	r4, r2
 80029b0:	461d      	mov	r5, r3
            (IR[5] * 25.4) +
 80029b2:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <line_follow+0x1c0>)
 80029b4:	795b      	ldrb	r3, [r3, #5]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fdb4 	bl	8000524 <__aeabi_i2d>
 80029bc:	a33c      	add	r3, pc, #240	@ (adr r3, 8002ab0 <line_follow+0x1b0>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fd fe19 	bl	80005f8 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
            (IR[4] * 10.16) +
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7fd fc5d 	bl	800028c <__adddf3>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4614      	mov	r4, r2
 80029d8:	461d      	mov	r5, r3
            (IR[6] * 38.1);
 80029da:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <line_follow+0x1c0>)
 80029dc:	799b      	ldrb	r3, [r3, #6]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fda0 	bl	8000524 <__aeabi_i2d>
 80029e4:	a334      	add	r3, pc, #208	@ (adr r3, 8002ab8 <line_follow+0x1b8>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd fe05 	bl	80005f8 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
            (IR[5] * 25.4) +
 80029f2:	4620      	mov	r0, r4
 80029f4:	4629      	mov	r1, r5
 80029f6:	f7fd fc49 	bl	800028c <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
    error = (IR[0] * -38.1) +
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f893 	bl	8000b2c <__aeabi_d2iz>
 8002a06:	4603      	mov	r3, r0
 8002a08:	60fb      	str	r3, [r7, #12]

    // Calculate derivative
    derivative = error - last_error;
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac4 <line_follow+0x1c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac8 <line_follow+0x1c8>)
 8002a14:	6013      	str	r3, [r2, #0]

    // PD control constants
    const float Kp = 0.7; // Proportional gain
 8002a16:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <line_follow+0x1cc>)
 8002a18:	60bb      	str	r3, [r7, #8]
    const float Kd = 0.3;
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad0 <line_follow+0x1d0>)
 8002a1c:	607b      	str	r3, [r7, #4]
    // Calculate control output
    int control_output = (int)(Kp * error + Kd * derivative);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a30:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <line_follow+0x1c8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a4c:	ee17 3a90 	vmov	r3, s15
 8002a50:	603b      	str	r3, [r7, #0]

    // Adjust motor speeds based on control output
    int left_speed = BASE_SPEED - control_output;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8002a58:	617b      	str	r3, [r7, #20]
    int right_speed = BASE_SPEED + control_output;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	335a      	adds	r3, #90	@ 0x5a
 8002a5e:	613b      	str	r3, [r7, #16]

    // Ensure minimum PWM for motors
    if (left_speed < MIN_WORKING_PWM)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b27      	cmp	r3, #39	@ 0x27
 8002a64:	dc01      	bgt.n	8002a6a <line_follow+0x16a>
        left_speed = MIN_WORKING_PWM;
 8002a66:	2328      	movs	r3, #40	@ 0x28
 8002a68:	617b      	str	r3, [r7, #20]
    if (right_speed < MIN_WORKING_PWM)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b27      	cmp	r3, #39	@ 0x27
 8002a6e:	dc01      	bgt.n	8002a74 <line_follow+0x174>
        right_speed = MIN_WORKING_PWM;
 8002a70:	2328      	movs	r3, #40	@ 0x28
 8002a72:	613b      	str	r3, [r7, #16]

    // Set motor speeds
    setMotorSpeedL(left_speed);
 8002a74:	6978      	ldr	r0, [r7, #20]
 8002a76:	f002 fe9b 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(right_speed);
 8002a7a:	6938      	ldr	r0, [r7, #16]
 8002a7c:	f002 fe4a 	bl	8005714 <setMotorSpeedR>

    // Update last error
    last_error = error;
 8002a80:	4a10      	ldr	r2, [pc, #64]	@ (8002ac4 <line_follow+0x1c4>)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6013      	str	r3, [r2, #0]
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	c0430ccc 	.word	0xc0430ccc
 8002a98:	66666666 	.word	0x66666666
 8002a9c:	c0396666 	.word	0xc0396666
 8002aa0:	851eb852 	.word	0x851eb852
 8002aa4:	c02451eb 	.word	0xc02451eb
 8002aa8:	851eb852 	.word	0x851eb852
 8002aac:	402451eb 	.word	0x402451eb
 8002ab0:	66666666 	.word	0x66666666
 8002ab4:	40396666 	.word	0x40396666
 8002ab8:	cccccccd 	.word	0xcccccccd
 8002abc:	40430ccc 	.word	0x40430ccc
 8002ac0:	20000468 	.word	0x20000468
 8002ac4:	20000144 	.word	0x20000144
 8002ac8:	20000118 	.word	0x20000118
 8002acc:	3f333333 	.word	0x3f333333
 8002ad0:	3e99999a 	.word	0x3e99999a
 8002ad4:	00000000 	.word	0x00000000

08002ad8 <line_follow_Last_Column>:
void line_follow_Last_Column()
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
    static int last_error = 0; // Previous error value for derivative calculation
    int error = 0;             // Error value for line deviation
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
                               // Derivative of the error

    // Calculate weighted error
    error = (IR[2] * -10.16) +
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd8 <line_follow_Last_Column+0x100>)
 8002ae4:	789b      	ldrb	r3, [r3, #2]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd1c 	bl	8000524 <__aeabi_i2d>
 8002aec:	a336      	add	r3, pc, #216	@ (adr r3, 8002bc8 <line_follow_Last_Column+0xf0>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fd81 	bl	80005f8 <__aeabi_dmul>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	f7fd fbc1 	bl	800028c <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4614      	mov	r4, r2
 8002b10:	461d      	mov	r5, r3
            (IR[3] * 0) +
            (IR[4] * 10.16);
 8002b12:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <line_follow_Last_Column+0x100>)
 8002b14:	791b      	ldrb	r3, [r3, #4]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd04 	bl	8000524 <__aeabi_i2d>
 8002b1c:	a32c      	add	r3, pc, #176	@ (adr r3, 8002bd0 <line_follow_Last_Column+0xf8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd69 	bl	80005f8 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
            (IR[3] * 0) +
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f7fd fbad 	bl	800028c <__adddf3>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
    error = (IR[2] * -10.16) +
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fd fff7 	bl	8000b2c <__aeabi_d2iz>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	60fb      	str	r3, [r7, #12]

    // Calculate derivative
    derivative = error - last_error;
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <line_follow_Last_Column+0x104>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	4a25      	ldr	r2, [pc, #148]	@ (8002be0 <line_follow_Last_Column+0x108>)
 8002b4c:	6013      	str	r3, [r2, #0]

    // PD control constants
    const float Kp = 0.7; // Proportional gain
 8002b4e:	4b25      	ldr	r3, [pc, #148]	@ (8002be4 <line_follow_Last_Column+0x10c>)
 8002b50:	60bb      	str	r3, [r7, #8]
    const float Kd = 0.7;
 8002b52:	4b24      	ldr	r3, [pc, #144]	@ (8002be4 <line_follow_Last_Column+0x10c>)
 8002b54:	607b      	str	r3, [r7, #4]
    // Calculate control output
    int control_output = (int)(Kp * error + Kd * derivative);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <line_follow_Last_Column+0x108>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b84:	ee17 3a90 	vmov	r3, s15
 8002b88:	603b      	str	r3, [r7, #0]

    // Adjust motor speeds based on control output
    int left_speed = BASE_SPEED - control_output;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8002b90:	617b      	str	r3, [r7, #20]
    int right_speed = BASE_SPEED + control_output;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	335a      	adds	r3, #90	@ 0x5a
 8002b96:	613b      	str	r3, [r7, #16]

    // Ensure minimum PWM for motors
    if (left_speed < MIN_WORKING_PWM)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b27      	cmp	r3, #39	@ 0x27
 8002b9c:	dc01      	bgt.n	8002ba2 <line_follow_Last_Column+0xca>
        left_speed = MIN_WORKING_PWM;
 8002b9e:	2328      	movs	r3, #40	@ 0x28
 8002ba0:	617b      	str	r3, [r7, #20]
    if (right_speed < MIN_WORKING_PWM)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b27      	cmp	r3, #39	@ 0x27
 8002ba6:	dc01      	bgt.n	8002bac <line_follow_Last_Column+0xd4>
        right_speed = MIN_WORKING_PWM;
 8002ba8:	2328      	movs	r3, #40	@ 0x28
 8002baa:	613b      	str	r3, [r7, #16]

    // Set motor speeds
    setMotorSpeedL(left_speed);
 8002bac:	6978      	ldr	r0, [r7, #20]
 8002bae:	f002 fdff 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(right_speed);
 8002bb2:	6938      	ldr	r0, [r7, #16]
 8002bb4:	f002 fdae 	bl	8005714 <setMotorSpeedR>

    // Update last error
    last_error = error;
 8002bb8:	4a08      	ldr	r2, [pc, #32]	@ (8002bdc <line_follow_Last_Column+0x104>)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6013      	str	r3, [r2, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	851eb852 	.word	0x851eb852
 8002bcc:	c02451eb 	.word	0xc02451eb
 8002bd0:	851eb852 	.word	0x851eb852
 8002bd4:	402451eb 	.word	0x402451eb
 8002bd8:	20000468 	.word	0x20000468
 8002bdc:	20000148 	.word	0x20000148
 8002be0:	20000118 	.word	0x20000118
 8002be4:	3f333333 	.word	0x3f333333

08002be8 <line_follow_NoJunctions>:
void line_follow_NoJunctions()
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
    static int last_error = 0; // Previous error value for derivative calculation
    int error = 0;             // Error value for line deviation
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
                               // Derivative of the error

    // Calculate weighted error
    error = (IR[0] * -38.1) +
 8002bf2:	4b89      	ldr	r3, [pc, #548]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fc94 	bl	8000524 <__aeabi_i2d>
 8002bfc:	a37a      	add	r3, pc, #488	@ (adr r3, 8002de8 <line_follow_NoJunctions+0x200>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f7fd fcf9 	bl	80005f8 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	461d      	mov	r5, r3
            (IR[1] * -25.4) +
 8002c0e:	4b82      	ldr	r3, [pc, #520]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fc86 	bl	8000524 <__aeabi_i2d>
 8002c18:	a375      	add	r3, pc, #468	@ (adr r3, 8002df0 <line_follow_NoJunctions+0x208>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fceb 	bl	80005f8 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
    error = (IR[0] * -38.1) +
 8002c26:	4620      	mov	r0, r4
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f7fd fb2f 	bl	800028c <__adddf3>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
            (IR[2] * -10.16) +
 8002c36:	4b78      	ldr	r3, [pc, #480]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002c38:	789b      	ldrb	r3, [r3, #2]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fc72 	bl	8000524 <__aeabi_i2d>
 8002c40:	a36d      	add	r3, pc, #436	@ (adr r3, 8002df8 <line_follow_NoJunctions+0x210>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fcd7 	bl	80005f8 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
            (IR[1] * -25.4) +
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4629      	mov	r1, r5
 8002c52:	f7fd fb1b 	bl	800028c <__adddf3>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
            (IR[2] * -10.16) +
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f7fd fb11 	bl	800028c <__adddf3>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4614      	mov	r4, r2
 8002c70:	461d      	mov	r5, r3
            (IR[3] * 0) +
            (IR[4] * 10.16) +
 8002c72:	4b69      	ldr	r3, [pc, #420]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002c74:	791b      	ldrb	r3, [r3, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc54 	bl	8000524 <__aeabi_i2d>
 8002c7c:	a360      	add	r3, pc, #384	@ (adr r3, 8002e00 <line_follow_NoJunctions+0x218>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fcb9 	bl	80005f8 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
            (IR[3] * 0) +
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7fd fafd 	bl	800028c <__adddf3>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4614      	mov	r4, r2
 8002c98:	461d      	mov	r5, r3
            (IR[5] * 25.4) +
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002c9c:	795b      	ldrb	r3, [r3, #5]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc40 	bl	8000524 <__aeabi_i2d>
 8002ca4:	a358      	add	r3, pc, #352	@ (adr r3, 8002e08 <line_follow_NoJunctions+0x220>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fca5 	bl	80005f8 <__aeabi_dmul>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
            (IR[4] * 10.16) +
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd fae9 	bl	800028c <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	461d      	mov	r5, r3
            (IR[6] * 38.1);
 8002cc2:	4b55      	ldr	r3, [pc, #340]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002cc4:	799b      	ldrb	r3, [r3, #6]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc2c 	bl	8000524 <__aeabi_i2d>
 8002ccc:	a350      	add	r3, pc, #320	@ (adr r3, 8002e10 <line_follow_NoJunctions+0x228>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd fc91 	bl	80005f8 <__aeabi_dmul>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
            (IR[5] * 25.4) +
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fad5 	bl	800028c <__adddf3>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
    error = (IR[0] * -38.1) +
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff1f 	bl	8000b2c <__aeabi_d2iz>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	617b      	str	r3, [r7, #20]

    // Calculate derivative
    derivative = error - last_error;
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8002e1c <line_follow_NoJunctions+0x234>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	4a49      	ldr	r2, [pc, #292]	@ (8002e20 <line_follow_NoJunctions+0x238>)
 8002cfc:	6013      	str	r3, [r2, #0]

    // PD control constants
    const float Kp = 0.7; // Proportional gain
 8002cfe:	4b49      	ldr	r3, [pc, #292]	@ (8002e24 <line_follow_NoJunctions+0x23c>)
 8002d00:	60bb      	str	r3, [r7, #8]
    const float Kd = 0.3;
 8002d02:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <line_follow_NoJunctions+0x240>)
 8002d04:	607b      	str	r3, [r7, #4]
    // Calculate control output
    if (IR[3] == 1 && IR[6] == 1)
 8002d06:	4b44      	ldr	r3, [pc, #272]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d08:	78db      	ldrb	r3, [r3, #3]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d109      	bne.n	8002d22 <line_follow_NoJunctions+0x13a>
 8002d0e:	4b42      	ldr	r3, [pc, #264]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d10:	799b      	ldrb	r3, [r3, #6]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <line_follow_NoJunctions+0x13a>
    {
        error = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
        derivative = 0;
 8002d1a:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <line_follow_NoJunctions+0x238>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e02a      	b.n	8002d78 <line_follow_NoJunctions+0x190>
    }
    else if (IR[2] == 1 && IR[3] == 1 && IR[4] == 1 && IR[5] == 1 && IR[6] == 1)
 8002d22:	4b3d      	ldr	r3, [pc, #244]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d24:	789b      	ldrb	r3, [r3, #2]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d115      	bne.n	8002d56 <line_follow_NoJunctions+0x16e>
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d2c:	78db      	ldrb	r3, [r3, #3]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d111      	bne.n	8002d56 <line_follow_NoJunctions+0x16e>
 8002d32:	4b39      	ldr	r3, [pc, #228]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d34:	791b      	ldrb	r3, [r3, #4]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d10d      	bne.n	8002d56 <line_follow_NoJunctions+0x16e>
 8002d3a:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d3c:	795b      	ldrb	r3, [r3, #5]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d109      	bne.n	8002d56 <line_follow_NoJunctions+0x16e>
 8002d42:	4b35      	ldr	r3, [pc, #212]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d44:	799b      	ldrb	r3, [r3, #6]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d105      	bne.n	8002d56 <line_follow_NoJunctions+0x16e>
    {
        error = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
        derivative = 0;
 8002d4e:	4b34      	ldr	r3, [pc, #208]	@ (8002e20 <line_follow_NoJunctions+0x238>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e010      	b.n	8002d78 <line_follow_NoJunctions+0x190>
    }
    else if (IR[3] == 1 && IR[5] == 1 && IR[6] == 1)
 8002d56:	4b30      	ldr	r3, [pc, #192]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d58:	78db      	ldrb	r3, [r3, #3]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d10c      	bne.n	8002d78 <line_follow_NoJunctions+0x190>
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d60:	795b      	ldrb	r3, [r3, #5]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d108      	bne.n	8002d78 <line_follow_NoJunctions+0x190>
 8002d66:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <line_follow_NoJunctions+0x230>)
 8002d68:	799b      	ldrb	r3, [r3, #6]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d104      	bne.n	8002d78 <line_follow_NoJunctions+0x190>
    {
        error = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
        derivative = 0;
 8002d72:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <line_follow_NoJunctions+0x238>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    }

    int control_output = (int)(Kp * error + Kd * derivative);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d8a:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <line_follow_NoJunctions+0x238>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da6:	ee17 3a90 	vmov	r3, s15
 8002daa:	603b      	str	r3, [r7, #0]

    // Adjust motor speeds based on control output
    int left_speed = BASE_SPEED - control_output;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8002db2:	613b      	str	r3, [r7, #16]
    int right_speed = BASE_SPEED + control_output;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	335a      	adds	r3, #90	@ 0x5a
 8002db8:	60fb      	str	r3, [r7, #12]

    // Ensure minimum PWM for motors
    if (left_speed < MIN_WORKING_PWM)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b27      	cmp	r3, #39	@ 0x27
 8002dbe:	dc01      	bgt.n	8002dc4 <line_follow_NoJunctions+0x1dc>
        left_speed = MIN_WORKING_PWM;
 8002dc0:	2328      	movs	r3, #40	@ 0x28
 8002dc2:	613b      	str	r3, [r7, #16]
    if (right_speed < MIN_WORKING_PWM)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b27      	cmp	r3, #39	@ 0x27
 8002dc8:	dc01      	bgt.n	8002dce <line_follow_NoJunctions+0x1e6>
        right_speed = MIN_WORKING_PWM;
 8002dca:	2328      	movs	r3, #40	@ 0x28
 8002dcc:	60fb      	str	r3, [r7, #12]

    // Set motor speeds
    setMotorSpeedL(left_speed);
 8002dce:	6938      	ldr	r0, [r7, #16]
 8002dd0:	f002 fcee 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(right_speed);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f002 fc9d 	bl	8005714 <setMotorSpeedR>

    // Update last error
    last_error = error;
 8002dda:	4a10      	ldr	r2, [pc, #64]	@ (8002e1c <line_follow_NoJunctions+0x234>)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bdb0      	pop	{r4, r5, r7, pc}
 8002de8:	cccccccd 	.word	0xcccccccd
 8002dec:	c0430ccc 	.word	0xc0430ccc
 8002df0:	66666666 	.word	0x66666666
 8002df4:	c0396666 	.word	0xc0396666
 8002df8:	851eb852 	.word	0x851eb852
 8002dfc:	c02451eb 	.word	0xc02451eb
 8002e00:	851eb852 	.word	0x851eb852
 8002e04:	402451eb 	.word	0x402451eb
 8002e08:	66666666 	.word	0x66666666
 8002e0c:	40396666 	.word	0x40396666
 8002e10:	cccccccd 	.word	0xcccccccd
 8002e14:	40430ccc 	.word	0x40430ccc
 8002e18:	20000468 	.word	0x20000468
 8002e1c:	2000014c 	.word	0x2000014c
 8002e20:	20000118 	.word	0x20000118
 8002e24:	3f333333 	.word	0x3f333333
 8002e28:	3e99999a 	.word	0x3e99999a
 8002e2c:	00000000 	.word	0x00000000

08002e30 <line_follow_with_ultrasonic_check>:
////////////////////////////////////////////
void line_follow_with_ultrasonic_check(const uint32_t duration_ms)
{
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b08e      	sub	sp, #56	@ 0x38
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 8002e38:	f009 f882 	bl	800bf40 <HAL_GetTick>
 8002e3c:	62b8      	str	r0, [r7, #40]	@ 0x28
    const int ultrasonic_check_interval = 20; // Check every 20ms (50Hz)
 8002e3e:	2314      	movs	r3, #20
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t last_ultrasonic_check = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	637b      	str	r3, [r7, #52]	@ 0x34

    static int last_error = 0;

    while ((HAL_GetTick() - start_time) < duration_ms && !cylinder_detected)
 8002e46:	e0d9      	b.n	8002ffc <line_follow_with_ultrasonic_check+0x1cc>
    {
        // Line following logic
        int error = (IR[0] * -38.1) +
 8002e48:	4b81      	ldr	r3, [pc, #516]	@ (8003050 <line_follow_with_ultrasonic_check+0x220>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd fb69 	bl	8000524 <__aeabi_i2d>
 8002e52:	a373      	add	r3, pc, #460	@ (adr r3, 8003020 <line_follow_with_ultrasonic_check+0x1f0>)
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f7fd fbce 	bl	80005f8 <__aeabi_dmul>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
                    (IR[1] * -25.4) +
 8002e64:	4b7a      	ldr	r3, [pc, #488]	@ (8003050 <line_follow_with_ultrasonic_check+0x220>)
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb5b 	bl	8000524 <__aeabi_i2d>
 8002e6e:	a36e      	add	r3, pc, #440	@ (adr r3, 8003028 <line_follow_with_ultrasonic_check+0x1f8>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbc0 	bl	80005f8 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
        int error = (IR[0] * -38.1) +
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7fd fa04 	bl	800028c <__adddf3>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4614      	mov	r4, r2
 8002e8a:	461d      	mov	r5, r3
                    (IR[2] * -10.16) +
 8002e8c:	4b70      	ldr	r3, [pc, #448]	@ (8003050 <line_follow_with_ultrasonic_check+0x220>)
 8002e8e:	789b      	ldrb	r3, [r3, #2]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fb47 	bl	8000524 <__aeabi_i2d>
 8002e96:	a366      	add	r3, pc, #408	@ (adr r3, 8003030 <line_follow_with_ultrasonic_check+0x200>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f7fd fbac 	bl	80005f8 <__aeabi_dmul>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
                    (IR[1] * -25.4) +
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	f7fd f9f0 	bl	800028c <__adddf3>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
                    (IR[2] * -10.16) +
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	f7fd f9e6 	bl	800028c <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
                    (IR[3] * 0) +
                    (IR[4] * 10.16) +
 8002ec8:	4b61      	ldr	r3, [pc, #388]	@ (8003050 <line_follow_with_ultrasonic_check+0x220>)
 8002eca:	791b      	ldrb	r3, [r3, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fb29 	bl	8000524 <__aeabi_i2d>
 8002ed2:	a359      	add	r3, pc, #356	@ (adr r3, 8003038 <line_follow_with_ultrasonic_check+0x208>)
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f7fd fb8e 	bl	80005f8 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
                    (IR[3] * 0) +
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	f7fd f9d2 	bl	800028c <__adddf3>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
                    (IR[5] * 25.4) +
 8002ef0:	4b57      	ldr	r3, [pc, #348]	@ (8003050 <line_follow_with_ultrasonic_check+0x220>)
 8002ef2:	795b      	ldrb	r3, [r3, #5]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb15 	bl	8000524 <__aeabi_i2d>
 8002efa:	a351      	add	r3, pc, #324	@ (adr r3, 8003040 <line_follow_with_ultrasonic_check+0x210>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd fb7a 	bl	80005f8 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
                    (IR[4] * 10.16) +
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd f9be 	bl	800028c <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	461d      	mov	r5, r3
                    (IR[6] * 38.1);
 8002f18:	4b4d      	ldr	r3, [pc, #308]	@ (8003050 <line_follow_with_ultrasonic_check+0x220>)
 8002f1a:	799b      	ldrb	r3, [r3, #6]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb01 	bl	8000524 <__aeabi_i2d>
 8002f22:	a349      	add	r3, pc, #292	@ (adr r3, 8003048 <line_follow_with_ultrasonic_check+0x218>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd fb66 	bl	80005f8 <__aeabi_dmul>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
                    (IR[5] * 25.4) +
 8002f30:	4620      	mov	r0, r4
 8002f32:	4629      	mov	r1, r5
 8002f34:	f7fd f9aa 	bl	800028c <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
        int error = (IR[0] * -38.1) +
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fdf4 	bl	8000b2c <__aeabi_d2iz>
 8002f44:	4603      	mov	r3, r0
 8002f46:	623b      	str	r3, [r7, #32]

        int derivative = error - last_error;
 8002f48:	4b42      	ldr	r3, [pc, #264]	@ (8003054 <line_follow_with_ultrasonic_check+0x224>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	61fb      	str	r3, [r7, #28]

        // PD control constants
        const float Kp = 0.7;
 8002f52:	4b41      	ldr	r3, [pc, #260]	@ (8003058 <line_follow_with_ultrasonic_check+0x228>)
 8002f54:	61bb      	str	r3, [r7, #24]
        const float Kd = 0.3;
 8002f56:	4b41      	ldr	r3, [pc, #260]	@ (800305c <line_follow_with_ultrasonic_check+0x22c>)
 8002f58:	617b      	str	r3, [r7, #20]

        // Calculate control output
        int control_output = (int)(Kp * error + Kd * derivative);
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f64:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f86:	ee17 3a90 	vmov	r3, s15
 8002f8a:	613b      	str	r3, [r7, #16]

        // Adjust motor speeds
        int left_speed = BASE_SPEED - control_output;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30
        int right_speed = BASE_SPEED + control_output;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	335a      	adds	r3, #90	@ 0x5a
 8002f98:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum PWM
        if (left_speed < MIN_WORKING_PWM)
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	2b27      	cmp	r3, #39	@ 0x27
 8002f9e:	dc01      	bgt.n	8002fa4 <line_follow_with_ultrasonic_check+0x174>
            left_speed = MIN_WORKING_PWM;
 8002fa0:	2328      	movs	r3, #40	@ 0x28
 8002fa2:	633b      	str	r3, [r7, #48]	@ 0x30
        if (right_speed < MIN_WORKING_PWM)
 8002fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa6:	2b27      	cmp	r3, #39	@ 0x27
 8002fa8:	dc01      	bgt.n	8002fae <line_follow_with_ultrasonic_check+0x17e>
            right_speed = MIN_WORKING_PWM;
 8002faa:	2328      	movs	r3, #40	@ 0x28
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(left_speed);
 8002fae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fb0:	f002 fbfe 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(right_speed);
 8002fb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fb6:	f002 fbad 	bl	8005714 <setMotorSpeedR>
        last_error = error;
 8002fba:	4a26      	ldr	r2, [pc, #152]	@ (8003054 <line_follow_with_ultrasonic_check+0x224>)
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	6013      	str	r3, [r2, #0]

        // Check ultrasonic periodically
        uint32_t current_time = HAL_GetTick();
 8002fc0:	f008 ffbe 	bl	800bf40 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_ultrasonic_check) >= ultrasonic_check_interval)
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d314      	bcc.n	8002ffc <line_follow_with_ultrasonic_check+0x1cc>
        {
            last_ultrasonic_check = current_time;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	637b      	str	r3, [r7, #52]	@ 0x34
            cylinder_Distance = Ultrasonic_GetDistance(0);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f006 ff02 	bl	8009de0 <Ultrasonic_GetDistance>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <line_follow_with_ultrasonic_check+0x230>)
 8002fe2:	601a      	str	r2, [r3, #0]

            if (cylinder_Distance < 120)
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <line_follow_with_ultrasonic_check+0x230>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b77      	cmp	r3, #119	@ 0x77
 8002fea:	dc04      	bgt.n	8002ff6 <line_follow_with_ultrasonic_check+0x1c6>
            {
                cylinder_detected = 1;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <line_follow_with_ultrasonic_check+0x234>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
                break;
 8002ff2:	bf00      	nop

            // Small delay to prevent overwhelming the system
            delay_ms(1);
        }
    }
}
 8002ff4:	e00f      	b.n	8003016 <line_follow_with_ultrasonic_check+0x1e6>
            delay_ms(1);
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7fe fa8a 	bl	8001510 <delay_ms>
    while ((HAL_GetTick() - start_time) < duration_ms && !cylinder_detected)
 8002ffc:	f008 ffa0 	bl	800bf40 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d904      	bls.n	8003016 <line_follow_with_ultrasonic_check+0x1e6>
 800300c:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <line_follow_with_ultrasonic_check+0x234>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f43f af19 	beq.w	8002e48 <line_follow_with_ultrasonic_check+0x18>
}
 8003016:	bf00      	nop
 8003018:	3738      	adds	r7, #56	@ 0x38
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	bf00      	nop
 8003020:	cccccccd 	.word	0xcccccccd
 8003024:	c0430ccc 	.word	0xc0430ccc
 8003028:	66666666 	.word	0x66666666
 800302c:	c0396666 	.word	0xc0396666
 8003030:	851eb852 	.word	0x851eb852
 8003034:	c02451eb 	.word	0xc02451eb
 8003038:	851eb852 	.word	0x851eb852
 800303c:	402451eb 	.word	0x402451eb
 8003040:	66666666 	.word	0x66666666
 8003044:	40396666 	.word	0x40396666
 8003048:	cccccccd 	.word	0xcccccccd
 800304c:	40430ccc 	.word	0x40430ccc
 8003050:	20000468 	.word	0x20000468
 8003054:	20000150 	.word	0x20000150
 8003058:	3f333333 	.word	0x3f333333
 800305c:	3e99999a 	.word	0x3e99999a
 8003060:	20000128 	.word	0x20000128
 8003064:	20000124 	.word	0x20000124

08003068 <enc_drive_with_ultrasonic_check>:
void enc_drive_with_ultrasonic_check()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	@ 0x28
 800306c:	af00      	add	r7, sp, #0
    resetEncoders();
 800306e:	f001 fe8b 	bl	8004d88 <resetEncoders>

    static int last_error = 0; // Previous error value for encoder correction
    integral = 0;              // Reset integral term
 8003072:	4b72      	ldr	r3, [pc, #456]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

    const int ultrasonic_check_interval = 20; // Check every 20ms (50Hz)
 800307a:	2314      	movs	r3, #20
 800307c:	61bb      	str	r3, [r7, #24]
    uint32_t last_ultrasonic_check = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
    int minSpeed = 60;  // Minimum speed to overcome friction
 8003082:	233c      	movs	r3, #60	@ 0x3c
 8003084:	617b      	str	r3, [r7, #20]
    int baseSpeed = 75; // Base speed for motors
 8003086:	234b      	movs	r3, #75	@ 0x4b
 8003088:	613b      	str	r3, [r7, #16]
    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 800308a:	f001 fe69 	bl	8004d60 <getLeftEncoderCounts>
 800308e:	4603      	mov	r3, r0
 8003090:	60fb      	str	r3, [r7, #12]
        int right_count = getRightEncoderCounts();
 8003092:	f001 fe51 	bl	8004d38 <getRightEncoderCounts>
 8003096:	4603      	mov	r3, r0
 8003098:	60bb      	str	r3, [r7, #8]

        // Compute the distance (average of both wheels)
        enc_dist = (left_count + right_count) / 2;
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4413      	add	r3, r2
 80030a0:	0fda      	lsrs	r2, r3, #31
 80030a2:	4413      	add	r3, r2
 80030a4:	105b      	asrs	r3, r3, #1
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b65      	ldr	r3, [pc, #404]	@ (8003240 <enc_drive_with_ultrasonic_check+0x1d8>)
 80030aa:	601a      	str	r2, [r3, #0]

        // Calculate the error (difference in encoder counts)
        difference_ = left_count - right_count;
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	4a64      	ldr	r2, [pc, #400]	@ (8003244 <enc_drive_with_ultrasonic_check+0x1dc>)
 80030b4:	6013      	str	r3, [r2, #0]

        // Integral term with anti-windup
        integral += difference_;
 80030b6:	4b63      	ldr	r3, [pc, #396]	@ (8003244 <enc_drive_with_ultrasonic_check+0x1dc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c2:	4b5e      	ldr	r3, [pc, #376]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 80030c4:	edd3 7a00 	vldr	s15, [r3]
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	4b5b      	ldr	r3, [pc, #364]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 80030ce:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 80030d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003248 <enc_drive_with_ultrasonic_check+0x1e0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030de:	4b57      	ldr	r3, [pc, #348]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	d508      	bpl.n	8003100 <enc_drive_with_ultrasonic_check+0x98>
            integral = integral_limit;
 80030ee:	4b56      	ldr	r3, [pc, #344]	@ (8003248 <enc_drive_with_ultrasonic_check+0x1e0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fa:	4b50      	ldr	r3, [pc, #320]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 80030fc:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 8003100:	4b51      	ldr	r3, [pc, #324]	@ (8003248 <enc_drive_with_ultrasonic_check+0x1e0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	425b      	negs	r3, r3
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800310e:	4b4b      	ldr	r3, [pc, #300]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 8003110:	edd3 7a00 	vldr	s15, [r3]
 8003114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311c:	dd09      	ble.n	8003132 <enc_drive_with_ultrasonic_check+0xca>
            integral = -integral_limit;
 800311e:	4b4a      	ldr	r3, [pc, #296]	@ (8003248 <enc_drive_with_ultrasonic_check+0x1e0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	425b      	negs	r3, r3
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800312c:	4b43      	ldr	r3, [pc, #268]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 800312e:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        correction = (difference_ * Kp1) + (integral * Ki1);
 8003132:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <enc_drive_with_ultrasonic_check+0x1dc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800313e:	4b43      	ldr	r3, [pc, #268]	@ (800324c <enc_drive_with_ultrasonic_check+0x1e4>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003148:	4b3c      	ldr	r3, [pc, #240]	@ (800323c <enc_drive_with_ultrasonic_check+0x1d4>)
 800314a:	edd3 6a00 	vldr	s13, [r3]
 800314e:	4b40      	ldr	r3, [pc, #256]	@ (8003250 <enc_drive_with_ultrasonic_check+0x1e8>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <enc_drive_with_ultrasonic_check+0x1ec>)
 800315e:	edc3 7a00 	vstr	s15, [r3]

        // Adjust motor speeds
        int speedL = baseSpeed + correction;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800316c:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <enc_drive_with_ultrasonic_check+0x1ec>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317a:	ee17 3a90 	vmov	r3, s15
 800317e:	623b      	str	r3, [r7, #32]
        int speedR = baseSpeed - correction;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800318a:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <enc_drive_with_ultrasonic_check+0x1ec>)
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003198:	ee17 3a90 	vmov	r3, s15
 800319c:	61fb      	str	r3, [r7, #28]

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bfb8      	it	lt
 80031a4:	425b      	neglt	r3, r3
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	dd07      	ble.n	80031bc <enc_drive_with_ultrasonic_check+0x154>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da02      	bge.n	80031b8 <enc_drive_with_ultrasonic_check+0x150>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	425b      	negs	r3, r3
 80031b6:	e000      	b.n	80031ba <enc_drive_with_ultrasonic_check+0x152>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	623b      	str	r3, [r7, #32]
        if (abs(speedR) < minSpeed)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfb8      	it	lt
 80031c2:	425b      	neglt	r3, r3
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	dd07      	ble.n	80031da <enc_drive_with_ultrasonic_check+0x172>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da02      	bge.n	80031d6 <enc_drive_with_ultrasonic_check+0x16e>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	425b      	negs	r3, r3
 80031d4:	e000      	b.n	80031d8 <enc_drive_with_ultrasonic_check+0x170>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	61fb      	str	r3, [r7, #28]

        setMotorSpeedL(speedL);
 80031da:	6a38      	ldr	r0, [r7, #32]
 80031dc:	f002 fae8 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80031e0:	69f8      	ldr	r0, [r7, #28]
 80031e2:	f002 fa97 	bl	8005714 <setMotorSpeedR>

        // Ultrasonic distance check
        uint32_t current_time = HAL_GetTick();
 80031e6:	f008 feab 	bl	800bf40 <HAL_GetTick>
 80031ea:	6078      	str	r0, [r7, #4]
        if ((current_time - last_ultrasonic_check) >= ultrasonic_check_interval)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f4ff af48 	bcc.w	800308a <enc_drive_with_ultrasonic_check+0x22>
        {
            last_ultrasonic_check = current_time;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
            frontwall_Distance = Ultrasonic_GetDistance(1);
 80031fe:	2001      	movs	r0, #1
 8003200:	f006 fdee 	bl	8009de0 <Ultrasonic_GetDistance>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <enc_drive_with_ultrasonic_check+0x1f0>)
 800320a:	601a      	str	r2, [r3, #0]

            if (frontwall_Distance < 110)
 800320c:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <enc_drive_with_ultrasonic_check+0x1f0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b6d      	cmp	r3, #109	@ 0x6d
 8003212:	dc03      	bgt.n	800321c <enc_drive_with_ultrasonic_check+0x1b4>
            {
                frontwall_detected = 1;
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <enc_drive_with_ultrasonic_check+0x1f4>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
                break;
 800321a:	e003      	b.n	8003224 <enc_drive_with_ultrasonic_check+0x1bc>
            }

            // Small delay to prevent overwhelming the system
            delay_ms(1);
 800321c:	2001      	movs	r0, #1
 800321e:	f7fe f977 	bl	8001510 <delay_ms>
    {
 8003222:	e732      	b.n	800308a <enc_drive_with_ultrasonic_check+0x22>
        }
    }

    // Stop the motors after the condition is met
    setMotorSpeedL(0);
 8003224:	2000      	movs	r0, #0
 8003226:	f002 fac3 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 800322a:	2000      	movs	r0, #0
 800322c:	f002 fa72 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003230:	f001 fdaa 	bl	8004d88 <resetEncoders>
}
 8003234:	bf00      	nop
 8003236:	3728      	adds	r7, #40	@ 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	2000011c 	.word	0x2000011c
 8003240:	20000120 	.word	0x20000120
 8003244:	20000114 	.word	0x20000114
 8003248:	20000018 	.word	0x20000018
 800324c:	20000008 	.word	0x20000008
 8003250:	2000000c 	.word	0x2000000c
 8003254:	20000110 	.word	0x20000110
 8003258:	20000130 	.word	0x20000130
 800325c:	2000012c 	.word	0x2000012c

08003260 <enc_drive_with_ultrasonic_check_85>:
void enc_drive_with_ultrasonic_check_85(int target, int sensor)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	@ 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
    resetEncoders();
 800326a:	f001 fd8d 	bl	8004d88 <resetEncoders>

    static int last_error = 0; // Previous error value for encoder correction
    integral = 0;              // Reset integral term
 800326e:	4b74      	ldr	r3, [pc, #464]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

    const int ultrasonic_check_interval = 20; // Check every 20ms (50Hz)
 8003276:	2314      	movs	r3, #20
 8003278:	623b      	str	r3, [r7, #32]
    uint32_t last_ultrasonic_check = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int minSpeed = 60;  // Minimum speed to overcome friction
 800327e:	233c      	movs	r3, #60	@ 0x3c
 8003280:	61fb      	str	r3, [r7, #28]
    int baseSpeed = 85; // Base speed for motors
 8003282:	2355      	movs	r3, #85	@ 0x55
 8003284:	61bb      	str	r3, [r7, #24]
    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 8003286:	f001 fd6b 	bl	8004d60 <getLeftEncoderCounts>
 800328a:	4603      	mov	r3, r0
 800328c:	617b      	str	r3, [r7, #20]
        int right_count = getRightEncoderCounts();
 800328e:	f001 fd53 	bl	8004d38 <getRightEncoderCounts>
 8003292:	4603      	mov	r3, r0
 8003294:	613b      	str	r3, [r7, #16]

        // Compute the distance (average of both wheels)
        enc_dist = (left_count + right_count) / 2;
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	0fda      	lsrs	r2, r3, #31
 800329e:	4413      	add	r3, r2
 80032a0:	105b      	asrs	r3, r3, #1
 80032a2:	461a      	mov	r2, r3
 80032a4:	4b67      	ldr	r3, [pc, #412]	@ (8003444 <enc_drive_with_ultrasonic_check_85+0x1e4>)
 80032a6:	601a      	str	r2, [r3, #0]

        // Calculate the error (difference in encoder counts)
        difference_ = left_count - right_count;
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	4a66      	ldr	r2, [pc, #408]	@ (8003448 <enc_drive_with_ultrasonic_check_85+0x1e8>)
 80032b0:	6013      	str	r3, [r2, #0]

        // Integral term with anti-windup
        integral += difference_;
 80032b2:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <enc_drive_with_ultrasonic_check_85+0x1e8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032be:	4b60      	ldr	r3, [pc, #384]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c8:	4b5d      	ldr	r3, [pc, #372]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 80032ca:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 80032ce:	4b5f      	ldr	r3, [pc, #380]	@ (800344c <enc_drive_with_ultrasonic_check_85+0x1ec>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032da:	4b59      	ldr	r3, [pc, #356]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	d508      	bpl.n	80032fc <enc_drive_with_ultrasonic_check_85+0x9c>
            integral = integral_limit;
 80032ea:	4b58      	ldr	r3, [pc, #352]	@ (800344c <enc_drive_with_ultrasonic_check_85+0x1ec>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f6:	4b52      	ldr	r3, [pc, #328]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 80032f8:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 80032fc:	4b53      	ldr	r3, [pc, #332]	@ (800344c <enc_drive_with_ultrasonic_check_85+0x1ec>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	425b      	negs	r3, r3
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330a:	4b4d      	ldr	r3, [pc, #308]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	dd09      	ble.n	800332e <enc_drive_with_ultrasonic_check_85+0xce>
            integral = -integral_limit;
 800331a:	4b4c      	ldr	r3, [pc, #304]	@ (800344c <enc_drive_with_ultrasonic_check_85+0x1ec>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	425b      	negs	r3, r3
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003328:	4b45      	ldr	r3, [pc, #276]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 800332a:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        correction = (difference_ * Kp1) + (integral * Ki1);
 800332e:	4b46      	ldr	r3, [pc, #280]	@ (8003448 <enc_drive_with_ultrasonic_check_85+0x1e8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333a:	4b45      	ldr	r3, [pc, #276]	@ (8003450 <enc_drive_with_ultrasonic_check_85+0x1f0>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003344:	4b3e      	ldr	r3, [pc, #248]	@ (8003440 <enc_drive_with_ultrasonic_check_85+0x1e0>)
 8003346:	edd3 6a00 	vldr	s13, [r3]
 800334a:	4b42      	ldr	r3, [pc, #264]	@ (8003454 <enc_drive_with_ultrasonic_check_85+0x1f4>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003358:	4b3f      	ldr	r3, [pc, #252]	@ (8003458 <enc_drive_with_ultrasonic_check_85+0x1f8>)
 800335a:	edc3 7a00 	vstr	s15, [r3]

        // Adjust motor speeds
        int speedL = baseSpeed + correction;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003368:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <enc_drive_with_ultrasonic_check_85+0x1f8>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003376:	ee17 3a90 	vmov	r3, s15
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
        int speedR = baseSpeed - correction;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003386:	4b34      	ldr	r3, [pc, #208]	@ (8003458 <enc_drive_with_ultrasonic_check_85+0x1f8>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003394:	ee17 3a90 	vmov	r3, s15
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 800339a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	bfb8      	it	lt
 80033a0:	425b      	neglt	r3, r3
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dd07      	ble.n	80033b8 <enc_drive_with_ultrasonic_check_85+0x158>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da02      	bge.n	80033b4 <enc_drive_with_ultrasonic_check_85+0x154>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	425b      	negs	r3, r3
 80033b2:	e000      	b.n	80033b6 <enc_drive_with_ultrasonic_check_85+0x156>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (abs(speedR) < minSpeed)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bfb8      	it	lt
 80033be:	425b      	neglt	r3, r3
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dd07      	ble.n	80033d6 <enc_drive_with_ultrasonic_check_85+0x176>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da02      	bge.n	80033d2 <enc_drive_with_ultrasonic_check_85+0x172>
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	425b      	negs	r3, r3
 80033d0:	e000      	b.n	80033d4 <enc_drive_with_ultrasonic_check_85+0x174>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24

        setMotorSpeedL(speedL);
 80033d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033d8:	f002 f9ea 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80033dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033de:	f002 f999 	bl	8005714 <setMotorSpeedR>

        // Ultrasonic distance check
        uint32_t current_time = HAL_GetTick();
 80033e2:	f008 fdad 	bl	800bf40 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_ultrasonic_check) >= ultrasonic_check_interval)
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ec:	1ad2      	subs	r2, r2, r3
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f4ff af48 	bcc.w	8003286 <enc_drive_with_ultrasonic_check_85+0x26>
        {
            last_ultrasonic_check = current_time;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            frontwall_Distance = Ultrasonic_GetDistance(sensor);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4618      	mov	r0, r3
 8003400:	f006 fcee 	bl	8009de0 <Ultrasonic_GetDistance>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	4b14      	ldr	r3, [pc, #80]	@ (800345c <enc_drive_with_ultrasonic_check_85+0x1fc>)
 800340a:	601a      	str	r2, [r3, #0]

            if (frontwall_Distance < target)
 800340c:	4b13      	ldr	r3, [pc, #76]	@ (800345c <enc_drive_with_ultrasonic_check_85+0x1fc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	dd03      	ble.n	800341e <enc_drive_with_ultrasonic_check_85+0x1be>
            {
                wall = 1;
 8003416:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <enc_drive_with_ultrasonic_check_85+0x200>)
 8003418:	2201      	movs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]
                break;
 800341c:	e003      	b.n	8003426 <enc_drive_with_ultrasonic_check_85+0x1c6>
            }

            // Small delay to prevent overwhelming the system
            delay_ms(1);
 800341e:	2001      	movs	r0, #1
 8003420:	f7fe f876 	bl	8001510 <delay_ms>
    {
 8003424:	e72f      	b.n	8003286 <enc_drive_with_ultrasonic_check_85+0x26>
        }
    }

    // Stop the motors after the condition is met
    setMotorSpeedL(0);
 8003426:	2000      	movs	r0, #0
 8003428:	f002 f9c2 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 800342c:	2000      	movs	r0, #0
 800342e:	f002 f971 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003432:	f001 fca9 	bl	8004d88 <resetEncoders>
}
 8003436:	bf00      	nop
 8003438:	3730      	adds	r7, #48	@ 0x30
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	2000011c 	.word	0x2000011c
 8003444:	20000120 	.word	0x20000120
 8003448:	20000114 	.word	0x20000114
 800344c:	20000018 	.word	0x20000018
 8003450:	20000008 	.word	0x20000008
 8003454:	2000000c 	.word	0x2000000c
 8003458:	20000110 	.word	0x20000110
 800345c:	20000130 	.word	0x20000130
 8003460:	20000138 	.word	0x20000138

08003464 <enc_drive_with_ultrasonic_Target>:
void enc_drive_with_ultrasonic_Target(const int target_encoder_counts)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	@ 0x30
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    resetEncoders();
 800346c:	f001 fc8c 	bl	8004d88 <resetEncoders>

    static int last_error = 0; // Previous error value for encoder correction
    integral = 0;              // Reset integral term
 8003470:	4b7b      	ldr	r3, [pc, #492]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

    const int ultrasonic_check_interval = 20; // Check every 20ms (50Hz)
 8003478:	2314      	movs	r3, #20
 800347a:	623b      	str	r3, [r7, #32]
    uint32_t last_ultrasonic_check = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int minSpeed = 60;  // Minimum speed to overcome friction
 8003480:	233c      	movs	r3, #60	@ 0x3c
 8003482:	61fb      	str	r3, [r7, #28]
    int baseSpeed = 75; // Base speed for motors
 8003484:	234b      	movs	r3, #75	@ 0x4b
 8003486:	61bb      	str	r3, [r7, #24]
    sidewall_Distance = 0;
 8003488:	4b76      	ldr	r3, [pc, #472]	@ (8003664 <enc_drive_with_ultrasonic_Target+0x200>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    min_sidewall_Distance = INT_MAX; // Variable to store the minimum sidewall distance
 800348e:	4b76      	ldr	r3, [pc, #472]	@ (8003668 <enc_drive_with_ultrasonic_Target+0x204>)
 8003490:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003494:	601a      	str	r2, [r3, #0]

    while (1)
    {
        // Read encoder counts
        int left_count = getLeftEncoderCounts();
 8003496:	f001 fc63 	bl	8004d60 <getLeftEncoderCounts>
 800349a:	4603      	mov	r3, r0
 800349c:	617b      	str	r3, [r7, #20]
        int right_count = getRightEncoderCounts();
 800349e:	f001 fc4b 	bl	8004d38 <getRightEncoderCounts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	613b      	str	r3, [r7, #16]

        // Compute the distance (average of both wheels)
        enc_dist = (left_count + right_count) / 2;
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	0fda      	lsrs	r2, r3, #31
 80034ae:	4413      	add	r3, r2
 80034b0:	105b      	asrs	r3, r3, #1
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b6d      	ldr	r3, [pc, #436]	@ (800366c <enc_drive_with_ultrasonic_Target+0x208>)
 80034b6:	601a      	str	r2, [r3, #0]

        // Stop if the target encoder counts are reached
        if (enc_dist >= target_encoder_counts)
 80034b8:	4b6c      	ldr	r3, [pc, #432]	@ (800366c <enc_drive_with_ultrasonic_Target+0x208>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	f340 80c1 	ble.w	8003646 <enc_drive_with_ultrasonic_Target+0x1e2>
        {
            break;
        }

        // Calculate the error (difference in encoder counts)
        difference_ = left_count - right_count;
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	4a69      	ldr	r2, [pc, #420]	@ (8003670 <enc_drive_with_ultrasonic_Target+0x20c>)
 80034cc:	6013      	str	r3, [r2, #0]

        // Integral term with anti-windup
        integral += difference_;
 80034ce:	4b68      	ldr	r3, [pc, #416]	@ (8003670 <enc_drive_with_ultrasonic_Target+0x20c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034da:	4b61      	ldr	r3, [pc, #388]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 80034e6:	edc3 7a00 	vstr	s15, [r3]
        if (integral > integral_limit)
 80034ea:	4b62      	ldr	r3, [pc, #392]	@ (8003674 <enc_drive_with_ultrasonic_Target+0x210>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	d508      	bpl.n	8003518 <enc_drive_with_ultrasonic_Target+0xb4>
            integral = integral_limit;
 8003506:	4b5b      	ldr	r3, [pc, #364]	@ (8003674 <enc_drive_with_ultrasonic_Target+0x210>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003512:	4b53      	ldr	r3, [pc, #332]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 8003514:	edc3 7a00 	vstr	s15, [r3]
        if (integral < -integral_limit)
 8003518:	4b56      	ldr	r3, [pc, #344]	@ (8003674 <enc_drive_with_ultrasonic_Target+0x210>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	425b      	negs	r3, r3
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003526:	4b4e      	ldr	r3, [pc, #312]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003534:	dd09      	ble.n	800354a <enc_drive_with_ultrasonic_Target+0xe6>
            integral = -integral_limit;
 8003536:	4b4f      	ldr	r3, [pc, #316]	@ (8003674 <enc_drive_with_ultrasonic_Target+0x210>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	425b      	negs	r3, r3
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003544:	4b46      	ldr	r3, [pc, #280]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 8003546:	edc3 7a00 	vstr	s15, [r3]

        // Compute correction using PI controller
        correction = (difference_ * Kp1) + (integral * Ki1);
 800354a:	4b49      	ldr	r3, [pc, #292]	@ (8003670 <enc_drive_with_ultrasonic_Target+0x20c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003556:	4b48      	ldr	r3, [pc, #288]	@ (8003678 <enc_drive_with_ultrasonic_Target+0x214>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003560:	4b3f      	ldr	r3, [pc, #252]	@ (8003660 <enc_drive_with_ultrasonic_Target+0x1fc>)
 8003562:	edd3 6a00 	vldr	s13, [r3]
 8003566:	4b45      	ldr	r3, [pc, #276]	@ (800367c <enc_drive_with_ultrasonic_Target+0x218>)
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003574:	4b42      	ldr	r3, [pc, #264]	@ (8003680 <enc_drive_with_ultrasonic_Target+0x21c>)
 8003576:	edc3 7a00 	vstr	s15, [r3]

        // Adjust motor speeds
        int speedL = baseSpeed + correction ;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003584:	4b3e      	ldr	r3, [pc, #248]	@ (8003680 <enc_drive_with_ultrasonic_Target+0x21c>)
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003592:	ee17 3a90 	vmov	r3, s15
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
        int speedR = baseSpeed - correction ;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a2:	4b37      	ldr	r3, [pc, #220]	@ (8003680 <enc_drive_with_ultrasonic_Target+0x21c>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b0:	ee17 3a90 	vmov	r3, s15
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 80035b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bfb8      	it	lt
 80035bc:	425b      	neglt	r3, r3
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	dd07      	ble.n	80035d4 <enc_drive_with_ultrasonic_Target+0x170>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da02      	bge.n	80035d0 <enc_drive_with_ultrasonic_Target+0x16c>
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	425b      	negs	r3, r3
 80035ce:	e000      	b.n	80035d2 <enc_drive_with_ultrasonic_Target+0x16e>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (abs(speedR) < minSpeed)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bfb8      	it	lt
 80035da:	425b      	neglt	r3, r3
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	dd07      	ble.n	80035f2 <enc_drive_with_ultrasonic_Target+0x18e>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	da02      	bge.n	80035ee <enc_drive_with_ultrasonic_Target+0x18a>
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	425b      	negs	r3, r3
 80035ec:	e000      	b.n	80035f0 <enc_drive_with_ultrasonic_Target+0x18c>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24

        setMotorSpeedL(speedL);
 80035f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035f4:	f002 f8dc 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80035f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035fa:	f002 f88b 	bl	8005714 <setMotorSpeedR>

        // Ultrasonic distance check
        uint32_t current_time = HAL_GetTick();
 80035fe:	f008 fc9f 	bl	800bf40 <HAL_GetTick>
 8003602:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_ultrasonic_check) >= ultrasonic_check_interval)
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003608:	1ad2      	subs	r2, r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	429a      	cmp	r2, r3
 800360e:	f4ff af42 	bcc.w	8003496 <enc_drive_with_ultrasonic_Target+0x32>
        {
            last_ultrasonic_check = current_time;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sidewall_Distance = Ultrasonic_GetDistance(2);
 8003616:	2002      	movs	r0, #2
 8003618:	f006 fbe2 	bl	8009de0 <Ultrasonic_GetDistance>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <enc_drive_with_ultrasonic_Target+0x200>)
 8003622:	601a      	str	r2, [r3, #0]

            // Update the minimum sidewall distance
            if (sidewall_Distance < min_sidewall_Distance && sidewall_Distance > 0)
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <enc_drive_with_ultrasonic_Target+0x200>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <enc_drive_with_ultrasonic_Target+0x204>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	f6bf af32 	bge.w	8003496 <enc_drive_with_ultrasonic_Target+0x32>
 8003632:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <enc_drive_with_ultrasonic_Target+0x200>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f77f af2d 	ble.w	8003496 <enc_drive_with_ultrasonic_Target+0x32>
            {
                min_sidewall_Distance = sidewall_Distance;
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <enc_drive_with_ultrasonic_Target+0x200>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a09      	ldr	r2, [pc, #36]	@ (8003668 <enc_drive_with_ultrasonic_Target+0x204>)
 8003642:	6013      	str	r3, [r2, #0]
    {
 8003644:	e727      	b.n	8003496 <enc_drive_with_ultrasonic_Target+0x32>
            break;
 8003646:	bf00      	nop
            }
        }
    }

    // Stop the motors after the condition is met
    setMotorSpeedL(0);
 8003648:	2000      	movs	r0, #0
 800364a:	f002 f8b1 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 800364e:	2000      	movs	r0, #0
 8003650:	f002 f860 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003654:	f001 fb98 	bl	8004d88 <resetEncoders>
}
 8003658:	bf00      	nop
 800365a:	3730      	adds	r7, #48	@ 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	2000011c 	.word	0x2000011c
 8003664:	20000134 	.word	0x20000134
 8003668:	2000001c 	.word	0x2000001c
 800366c:	20000120 	.word	0x20000120
 8003670:	20000114 	.word	0x20000114
 8003674:	20000018 	.word	0x20000018
 8003678:	20000008 	.word	0x20000008
 800367c:	2000000c 	.word	0x2000000c
 8003680:	20000110 	.word	0x20000110

08003684 <wall_follow_with_ultrasonic>:
/*
Normal Wall following
 */
void wall_follow_with_ultrasonic(int target_distance, int base_speed, float Kp, float Ki, float Kd)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b092      	sub	sp, #72	@ 0x48
 8003688:	af00      	add	r7, sp, #0
 800368a:	6178      	str	r0, [r7, #20]
 800368c:	6139      	str	r1, [r7, #16]
 800368e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003692:	edc7 0a02 	vstr	s1, [r7, #8]
 8003696:	ed87 1a01 	vstr	s2, [r7, #4]
    int last_error = 0;                       // Previous error for derivative calculation
 800369a:	2300      	movs	r3, #0
 800369c:	647b      	str	r3, [r7, #68]	@ 0x44
    float integral = 0;                       // Integral term
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	643b      	str	r3, [r7, #64]	@ 0x40
    const int min_speed = 55;                 // Minimum motor speed to overcome friction
 80036a4:	2337      	movs	r3, #55	@ 0x37
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30
    const int max_speed = 80;                 // Maximum motor speed
 80036a8:	2350      	movs	r3, #80	@ 0x50
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int ultrasonic_check_interval = 20; // Check every 20ms (50Hz)
 80036ac:	2314      	movs	r3, #20
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t last_ultrasonic_check = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    while (1)
    {
        // Get the current distance from the wall
        uint32_t current_time = HAL_GetTick();
 80036b4:	f008 fc44 	bl	800bf40 <HAL_GetTick>
 80036b8:	6278      	str	r0, [r7, #36]	@ 0x24
        if ((current_time - last_ultrasonic_check) >= ultrasonic_check_interval)
 80036ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036be:	1ad2      	subs	r2, r2, r3
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d37d      	bcc.n	80037c2 <wall_follow_with_ultrasonic+0x13e>
        {
            last_ultrasonic_check = current_time;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            int current_distance = Ultrasonic_GetDistance(0);
 80036ca:	2000      	movs	r0, #0
 80036cc:	f006 fb88 	bl	8009de0 <Ultrasonic_GetDistance>
 80036d0:	4603      	mov	r3, r0
 80036d2:	623b      	str	r3, [r7, #32]

            // Calculate the error
            errorp = target_distance - current_distance;
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	4a45      	ldr	r2, [pc, #276]	@ (80037f0 <wall_follow_with_ultrasonic+0x16c>)
 80036dc:	6013      	str	r3, [r2, #0]

            integral += errorp;
 80036de:	4b44      	ldr	r3, [pc, #272]	@ (80037f0 <wall_follow_with_ultrasonic+0x16c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ea:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80036ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            if (integral > 1000)
 80036f6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80036fa:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80037f4 <wall_follow_with_ultrasonic+0x170>
 80036fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	dd01      	ble.n	800370c <wall_follow_with_ultrasonic+0x88>
                integral = 1000;
 8003708:	4b3b      	ldr	r3, [pc, #236]	@ (80037f8 <wall_follow_with_ultrasonic+0x174>)
 800370a:	643b      	str	r3, [r7, #64]	@ 0x40
            if (integral < -1000)
 800370c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003710:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80037fc <wall_follow_with_ultrasonic+0x178>
 8003714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	d501      	bpl.n	8003722 <wall_follow_with_ultrasonic+0x9e>
                integral = -1000;
 800371e:	4b38      	ldr	r3, [pc, #224]	@ (8003800 <wall_follow_with_ultrasonic+0x17c>)
 8003720:	643b      	str	r3, [r7, #64]	@ 0x40

            // Calculate the derivative term
            int derivative = errorp - last_error;
 8003722:	4b33      	ldr	r3, [pc, #204]	@ (80037f0 <wall_follow_with_ultrasonic+0x16c>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	61fb      	str	r3, [r7, #28]

            // Calculate the PID correction
            int correction = (int)(Kp * errorp + Ki * integral + Kd * derivative);
 800372c:	4b30      	ldr	r3, [pc, #192]	@ (80037f0 <wall_follow_with_ultrasonic+0x16c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003738:	edd7 7a03 	vldr	s15, [r7, #12]
 800373c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003740:	edd7 6a02 	vldr	s13, [r7, #8]
 8003744:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800375a:	edd7 7a01 	vldr	s15, [r7, #4]
 800375e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800376a:	ee17 3a90 	vmov	r3, s15
 800376e:	61bb      	str	r3, [r7, #24]

            // Adjust motor speeds
            int left_speed = base_speed + correction;
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4413      	add	r3, r2
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38
            int right_speed = base_speed - correction;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	637b      	str	r3, [r7, #52]	@ 0x34

            // Ensure motor speeds are within bounds
            if (left_speed > max_speed)
 8003780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	429a      	cmp	r2, r3
 8003786:	dd01      	ble.n	800378c <wall_follow_with_ultrasonic+0x108>
                left_speed = max_speed;
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (left_speed < min_speed)
 800378c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	429a      	cmp	r2, r3
 8003792:	da01      	bge.n	8003798 <wall_follow_with_ultrasonic+0x114>
                left_speed = min_speed;
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (right_speed > max_speed)
 8003798:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	dd01      	ble.n	80037a4 <wall_follow_with_ultrasonic+0x120>
                right_speed = max_speed;
 80037a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
            if (right_speed < min_speed)
 80037a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	429a      	cmp	r2, r3
 80037aa:	da01      	bge.n	80037b0 <wall_follow_with_ultrasonic+0x12c>
                right_speed = min_speed;
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	637b      	str	r3, [r7, #52]	@ 0x34

            // Set motor speeds
            setMotorSpeedL(right_speed);
 80037b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80037b2:	f001 fffd 	bl	80057b0 <setMotorSpeedL>
            setMotorSpeedR(left_speed);
 80037b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80037b8:	f001 ffac 	bl	8005714 <setMotorSpeedR>

            // Update last error
            last_error = errorp;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <wall_follow_with_ultrasonic+0x16c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        delay_ms(1);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7fd fea4 	bl	8001510 <delay_ms>
        if (IR[7] = 1 && IR[8] == 1)
 80037c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003804 <wall_follow_with_ultrasonic+0x180>)
 80037ca:	7a1b      	ldrb	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <wall_follow_with_ultrasonic+0x180>)
 80037da:	71da      	strb	r2, [r3, #7]
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <wall_follow_with_ultrasonic+0x180>)
 80037de:	79db      	ldrb	r3, [r3, #7]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d100      	bne.n	80037e6 <wall_follow_with_ultrasonic+0x162>
    {
 80037e4:	e766      	b.n	80036b4 <wall_follow_with_ultrasonic+0x30>
        {
            break; // Exit the function if both IR sensors are triggered
 80037e6:	bf00      	nop
        }
    }
}
 80037e8:	bf00      	nop
 80037ea:	3748      	adds	r7, #72	@ 0x48
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	2000013c 	.word	0x2000013c
 80037f4:	447a0000 	.word	0x447a0000
 80037f8:	447a0000 	.word	0x447a0000
 80037fc:	c47a0000 	.word	0xc47a0000
 8003800:	c47a0000 	.word	0xc47a0000
 8003804:	20000468 	.word	0x20000468

08003808 <wall_follow_with_ultrasonic_encoders>:
}
/*
 Exits from the function for enc counts
 */
void wall_follow_with_ultrasonic_encoders(int target_distance, int base_speed, float Kp, float Ki, float Kd, int target_encoder_counts)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b096      	sub	sp, #88	@ 0x58
 800380c:	af00      	add	r7, sp, #0
 800380e:	6178      	str	r0, [r7, #20]
 8003810:	6139      	str	r1, [r7, #16]
 8003812:	ed87 0a03 	vstr	s0, [r7, #12]
 8003816:	edc7 0a02 	vstr	s1, [r7, #8]
 800381a:	ed87 1a01 	vstr	s2, [r7, #4]
 800381e:	603a      	str	r2, [r7, #0]
    int last_error = 0;                       // Previous error for derivative calculation
 8003820:	2300      	movs	r3, #0
 8003822:	657b      	str	r3, [r7, #84]	@ 0x54
    float integral = 0;                       // Integral term
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	653b      	str	r3, [r7, #80]	@ 0x50
    const int min_speed = 55;                 // Minimum motor speed to overcome friction
 800382a:	2337      	movs	r3, #55	@ 0x37
 800382c:	643b      	str	r3, [r7, #64]	@ 0x40
    const int max_speed = 80;                 // Maximum motor speed
 800382e:	2350      	movs	r3, #80	@ 0x50
 8003830:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const int ultrasonic_check_interval = 20; // Check every 20ms (50Hz)
 8003832:	2314      	movs	r3, #20
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t last_ultrasonic_check = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	64fb      	str	r3, [r7, #76]	@ 0x4c

    resetEncoders(); // Reset encoders before starting
 800383a:	f001 faa5 	bl	8004d88 <resetEncoders>

    while (1)
    {
        // Get the current encoder counts
        int left_count = getLeftEncoderCounts();
 800383e:	f001 fa8f 	bl	8004d60 <getLeftEncoderCounts>
 8003842:	4603      	mov	r3, r0
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
        int right_count = getRightEncoderCounts();
 8003846:	f001 fa77 	bl	8004d38 <getRightEncoderCounts>
 800384a:	4603      	mov	r3, r0
 800384c:	633b      	str	r3, [r7, #48]	@ 0x30
        int avg_encoder_counts = (left_count + right_count) / 2;
 800384e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	4413      	add	r3, r2
 8003854:	0fda      	lsrs	r2, r3, #31
 8003856:	4413      	add	r3, r2
 8003858:	105b      	asrs	r3, r3, #1
 800385a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Exit the loop if the target encoder count is reached
        if (avg_encoder_counts >= target_encoder_counts)
 800385c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	f280 8086 	bge.w	8003972 <wall_follow_with_ultrasonic_encoders+0x16a>
        {
            break;
        }

        // Get the current distance from the wall
        uint32_t current_time = HAL_GetTick();
 8003866:	f008 fb6b 	bl	800bf40 <HAL_GetTick>
 800386a:	62b8      	str	r0, [r7, #40]	@ 0x28
        if ((current_time - last_ultrasonic_check) >= ultrasonic_check_interval)
 800386c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800386e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003870:	1ad2      	subs	r2, r2, r3
 8003872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003874:	429a      	cmp	r2, r3
 8003876:	d378      	bcc.n	800396a <wall_follow_with_ultrasonic_encoders+0x162>
        {
            last_ultrasonic_check = current_time;
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            int current_distance = Ultrasonic_GetDistance(0);
 800387c:	2000      	movs	r0, #0
 800387e:	f006 faaf 	bl	8009de0 <Ultrasonic_GetDistance>
 8003882:	4603      	mov	r3, r0
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24

            // Calculate the error
            int errorp = target_distance - current_distance;
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	623b      	str	r3, [r7, #32]

            integral += errorp;
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003898:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800389c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            if (integral > 1000)
 80038a4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038a8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800398c <wall_follow_with_ultrasonic_encoders+0x184>
 80038ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	dd01      	ble.n	80038ba <wall_follow_with_ultrasonic_encoders+0xb2>
                integral = 1000;
 80038b6:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <wall_follow_with_ultrasonic_encoders+0x188>)
 80038b8:	653b      	str	r3, [r7, #80]	@ 0x50
            if (integral < -1000)
 80038ba:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038be:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003994 <wall_follow_with_ultrasonic_encoders+0x18c>
 80038c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ca:	d501      	bpl.n	80038d0 <wall_follow_with_ultrasonic_encoders+0xc8>
                integral = -1000;
 80038cc:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <wall_follow_with_ultrasonic_encoders+0x190>)
 80038ce:	653b      	str	r3, [r7, #80]	@ 0x50

            // Calculate the derivative term
            int derivative = errorp - last_error;
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	61fb      	str	r3, [r7, #28]

            // Calculate the PID correction
            int correction = (int)(Kp * errorp + Ki * integral + Kd * derivative);
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80038e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80038ee:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003904:	edd7 7a01 	vldr	s15, [r7, #4]
 8003908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800390c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003914:	ee17 3a90 	vmov	r3, s15
 8003918:	61bb      	str	r3, [r7, #24]

            // Adjust motor speeds
            int left_speed = base_speed + correction;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4413      	add	r3, r2
 8003920:	64bb      	str	r3, [r7, #72]	@ 0x48
            int right_speed = base_speed - correction;
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	647b      	str	r3, [r7, #68]	@ 0x44

            // Ensure motor speeds are within bounds
            if (left_speed > max_speed)
 800392a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800392c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392e:	429a      	cmp	r2, r3
 8003930:	dd01      	ble.n	8003936 <wall_follow_with_ultrasonic_encoders+0x12e>
                left_speed = max_speed;
 8003932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003934:	64bb      	str	r3, [r7, #72]	@ 0x48
            if (left_speed < min_speed)
 8003936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393a:	429a      	cmp	r2, r3
 800393c:	da01      	bge.n	8003942 <wall_follow_with_ultrasonic_encoders+0x13a>
                left_speed = min_speed;
 800393e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003940:	64bb      	str	r3, [r7, #72]	@ 0x48
            if (right_speed > max_speed)
 8003942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	429a      	cmp	r2, r3
 8003948:	dd01      	ble.n	800394e <wall_follow_with_ultrasonic_encoders+0x146>
                right_speed = max_speed;
 800394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394c:	647b      	str	r3, [r7, #68]	@ 0x44
            if (right_speed < min_speed)
 800394e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003952:	429a      	cmp	r2, r3
 8003954:	da01      	bge.n	800395a <wall_follow_with_ultrasonic_encoders+0x152>
                right_speed = min_speed;
 8003956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003958:	647b      	str	r3, [r7, #68]	@ 0x44

            // Set motor speeds
            setMotorSpeedL(right_speed);
 800395a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800395c:	f001 ff28 	bl	80057b0 <setMotorSpeedL>
            setMotorSpeedR(left_speed);
 8003960:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003962:	f001 fed7 	bl	8005714 <setMotorSpeedR>

            // Update last error
            last_error = errorp;
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	657b      	str	r3, [r7, #84]	@ 0x54
        }

        delay_ms(1); // Small delay to prevent overwhelming the system
 800396a:	2001      	movs	r0, #1
 800396c:	f7fd fdd0 	bl	8001510 <delay_ms>
    {
 8003970:	e765      	b.n	800383e <wall_follow_with_ultrasonic_encoders+0x36>
            break;
 8003972:	bf00      	nop
    }

    // Stop the motors after reaching the target encoder count
    setMotorSpeedL(0);
 8003974:	2000      	movs	r0, #0
 8003976:	f001 ff1b 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 800397a:	2000      	movs	r0, #0
 800397c:	f001 feca 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003980:	f001 fa02 	bl	8004d88 <resetEncoders>
}
 8003984:	bf00      	nop
 8003986:	3758      	adds	r7, #88	@ 0x58
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	447a0000 	.word	0x447a0000
 8003990:	447a0000 	.word	0x447a0000
 8003994:	c47a0000 	.word	0xc47a0000
 8003998:	c47a0000 	.word	0xc47a0000

0800399c <turn_90_degreesR_After_PadColor>:
    setMotorSpeedL(0);
    setMotorSpeedR(0);
    resetEncoders();
}
void turn_90_degreesR_After_PadColor()
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
    // Reset encoders
    resetEncoders();
 80039a2:	f001 f9f1 	bl	8004d88 <resetEncoders>

    // Set motor speeds for turning (e.g., left motor forward, right motor backward)
    setMotorSpeedL(-90);
 80039a6:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 80039aa:	f001 ff01 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(90);
 80039ae:	205a      	movs	r0, #90	@ 0x5a
 80039b0:	f001 feb0 	bl	8005714 <setMotorSpeedR>

    while (1)
    {
        int current_left_counts = getLeftEncoderCounts();
 80039b4:	f001 f9d4 	bl	8004d60 <getLeftEncoderCounts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	607b      	str	r3, [r7, #4]
        int current_right_counts = getRightEncoderCounts();
 80039bc:	f001 f9bc 	bl	8004d38 <getRightEncoderCounts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	603b      	str	r3, [r7, #0]

        // Check if the turn is complete
        if (current_left_counts >= 747 && current_right_counts <= -747)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f240 22ea 	movw	r2, #746	@ 0x2ea
 80039ca:	4293      	cmp	r3, r2
 80039cc:	ddf2      	ble.n	80039b4 <turn_90_degreesR_After_PadColor+0x18>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	4a08      	ldr	r2, [pc, #32]	@ (80039f4 <turn_90_degreesR_After_PadColor+0x58>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	db00      	blt.n	80039d8 <turn_90_degreesR_After_PadColor+0x3c>
    {
 80039d6:	e7ed      	b.n	80039b4 <turn_90_degreesR_After_PadColor+0x18>
        {
            break;
 80039d8:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 80039da:	2000      	movs	r0, #0
 80039dc:	f001 fee8 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 80039e0:	2000      	movs	r0, #0
 80039e2:	f001 fe97 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 80039e6:	f001 f9cf 	bl	8004d88 <resetEncoders>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	fffffd16 	.word	0xfffffd16

080039f8 <turn_90_degreesR1_reverse>:
void turn_90_degreesR1_reverse(int targetCounts)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	@ 0x28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    // Reset encoders
    resetEncoders();
 8003a00:	f001 f9c2 	bl	8004d88 <resetEncoders>

    // Ramp parameters
    const int maxSpeed = 95;                   // Maximum motor speed
 8003a04:	235f      	movs	r3, #95	@ 0x5f
 8003a06:	623b      	str	r3, [r7, #32]
    const int minSpeed = 70;                   // Minimum speed to overcome friction
 8003a08:	2346      	movs	r3, #70	@ 0x46
 8003a0a:	61fb      	str	r3, [r7, #28]
    const int accelSteps = 400;                // Counts to accelerate
 8003a0c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003a10:	61bb      	str	r3, [r7, #24]
    const int decelStart = targetCounts - 900; // When to start decelerating
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8003a18:	617b      	str	r3, [r7, #20]

    int currentSpeed = minSpeed; // Starting speed
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1)
    {
        int current_right_counts = abs(getRightEncoderCounts());
 8003a1e:	f001 f98b 	bl	8004d38 <getRightEncoderCounts>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bfb8      	it	lt
 8003a28:	425b      	neglt	r3, r3
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	613b      	str	r3, [r7, #16]

        // Acceleration phase
        if (current_right_counts < accelSteps)
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	da0c      	bge.n	8003a50 <turn_90_degreesR1_reverse+0x58>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * current_right_counts / accelSteps;
 8003a36:	6a3a      	ldr	r2, [r7, #32]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	fb03 f202 	mul.w	r2, r3, r2
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4e:	e01e      	b.n	8003a8e <turn_90_degreesR1_reverse+0x96>
        }
        // Deceleration phase
        else if (current_right_counts > decelStart)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dd18      	ble.n	8003a8a <turn_90_degreesR1_reverse+0x92>
        {
            int remaining = targetCounts - current_right_counts;
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	60fb      	str	r3, [r7, #12]
            if (remaining > 0)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	dd0e      	ble.n	8003a84 <turn_90_degreesR1_reverse+0x8c>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (targetCounts - decelStart);
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	fb03 f202 	mul.w	r2, r3, r2
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1acb      	subs	r3, r1, r3
 8003a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a82:	e004      	b.n	8003a8e <turn_90_degreesR1_reverse+0x96>
            }
            else
            {
                currentSpeed = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a88:	e001      	b.n	8003a8e <turn_90_degreesR1_reverse+0x96>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // Set motor speeds
        setMotorSpeedL(-currentSpeed); // Left motor reverse
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	425b      	negs	r3, r3
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fe8c 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(0);             // Right motor stationary
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f001 fe3b 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (current_right_counts >= targetCounts)
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	da00      	bge.n	8003aa8 <turn_90_degreesR1_reverse+0xb0>
    {
 8003aa6:	e7ba      	b.n	8003a1e <turn_90_degreesR1_reverse+0x26>
        {
            break;
 8003aa8:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f001 fe80 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f001 fe2f 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003ab6:	f001 f967 	bl	8004d88 <resetEncoders>
}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	@ 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <turn_90_degreesR1_reverse_FOR_PAD>:
void turn_90_degreesR1_reverse_FOR_PAD()
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
    // Reset encoders
    resetEncoders();
 8003aca:	f001 f95d 	bl	8004d88 <resetEncoders>
    // Set motor speeds for turning (e.g., left motor forward, right motor backward)
    setMotorSpeedL(-95);
 8003ace:	f06f 005e 	mvn.w	r0, #94	@ 0x5e
 8003ad2:	f001 fe6d 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f001 fe1c 	bl	8005714 <setMotorSpeedR>

    while (1)
    {
        int current_right_counts = getRightEncoderCounts();
 8003adc:	f001 f92c 	bl	8004d38 <getRightEncoderCounts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	607b      	str	r3, [r7, #4]

        // Check if the turn is complete
        if (current_right_counts <= -1700)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a08      	ldr	r2, [pc, #32]	@ (8003b08 <turn_90_degreesR1_reverse_FOR_PAD+0x44>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	db00      	blt.n	8003aee <turn_90_degreesR1_reverse_FOR_PAD+0x2a>
    {
 8003aec:	e7f6      	b.n	8003adc <turn_90_degreesR1_reverse_FOR_PAD+0x18>
        {
            break;
 8003aee:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f001 fe5d 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003af6:	2000      	movs	r0, #0
 8003af8:	f001 fe0c 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003afc:	f001 f944 	bl	8004d88 <resetEncoders>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	fffff95d 	.word	0xfffff95d

08003b0c <turn_90_degreesL_fromLastColumn>:
void turn_90_degreesL_fromLastColumn()
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
    // Reset encoders
    resetEncoders();
 8003b12:	f001 f939 	bl	8004d88 <resetEncoders>

    // Set motor speeds for turning (e.g., left motor forward, right motor backward)
    setMotorSpeedL(90);
 8003b16:	205a      	movs	r0, #90	@ 0x5a
 8003b18:	f001 fe4a 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(-90);
 8003b1c:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 8003b20:	f001 fdf8 	bl	8005714 <setMotorSpeedR>

    while (1)
    {
        int current_left_counts = getLeftEncoderCounts();
 8003b24:	f001 f91c 	bl	8004d60 <getLeftEncoderCounts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	607b      	str	r3, [r7, #4]
        int current_right_counts = getRightEncoderCounts();
 8003b2c:	f001 f904 	bl	8004d38 <getRightEncoderCounts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	603b      	str	r3, [r7, #0]

        // Check if the turn is complete
        if (current_left_counts <= -790 && current_right_counts >= 790)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f46f 7245 	mvn.w	r2, #788	@ 0x314
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	daf2      	bge.n	8003b24 <turn_90_degreesL_fromLastColumn+0x18>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f240 3215 	movw	r2, #789	@ 0x315
 8003b44:	4293      	cmp	r3, r2
 8003b46:	dc00      	bgt.n	8003b4a <turn_90_degreesL_fromLastColumn+0x3e>
    {
 8003b48:	e7ec      	b.n	8003b24 <turn_90_degreesL_fromLastColumn+0x18>
        {
            break;
 8003b4a:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f001 fe2f 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f001 fdde 	bl	8005714 <setMotorSpeedR>
    delay_ms(50);
 8003b58:	2032      	movs	r0, #50	@ 0x32
 8003b5a:	f7fd fcd9 	bl	8001510 <delay_ms>
    resetEncoders();
 8003b5e:	f001 f913 	bl	8004d88 <resetEncoders>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <turn_90_degreesL1_reverse_FROM_PAD>:
void turn_90_degreesL1_reverse_FROM_PAD()
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
    // Reset encoders
    resetEncoders();
 8003b70:	f001 f90a 	bl	8004d88 <resetEncoders>
    // Set motor speeds for turning (e.g., left motor forward, right motor backward)
    setMotorSpeedL(85);
 8003b74:	2055      	movs	r0, #85	@ 0x55
 8003b76:	f001 fe1b 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f001 fdca 	bl	8005714 <setMotorSpeedR>

    while (1)
    {
        int current_right_counts = getRightEncoderCounts();
 8003b80:	f001 f8da 	bl	8004d38 <getRightEncoderCounts>
 8003b84:	4603      	mov	r3, r0
 8003b86:	607b      	str	r3, [r7, #4]

        // Check if the turn is complete
        if (current_right_counts >= 1680)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f5b3 6fd2 	cmp.w	r3, #1680	@ 0x690
 8003b8e:	da00      	bge.n	8003b92 <turn_90_degreesL1_reverse_FROM_PAD+0x28>
    {
 8003b90:	e7f6      	b.n	8003b80 <turn_90_degreesL1_reverse_FROM_PAD+0x16>
        {
            break;
 8003b92:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 8003b94:	2000      	movs	r0, #0
 8003b96:	f001 fe0b 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f001 fdba 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003ba0:	f001 f8f2 	bl	8004d88 <resetEncoders>
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <turn_20_degrees_L>:
void turn_20_degrees_L()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
    resetEncoders();
 8003bb2:	f001 f8e9 	bl	8004d88 <resetEncoders>
    setMotorSpeedL(80);
 8003bb6:	2050      	movs	r0, #80	@ 0x50
 8003bb8:	f001 fdfa 	bl	80057b0 <setMotorSpeedL>

    while (1)
    {

        int current_right_counts = getRightEncoderCounts();
 8003bbc:	f001 f8bc 	bl	8004d38 <getRightEncoderCounts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	607b      	str	r3, [r7, #4]

        // Check if the turn is complete
        if (current_right_counts >= 255)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8003bc8:	dc00      	bgt.n	8003bcc <turn_20_degrees_L+0x20>
    {
 8003bca:	e7f7      	b.n	8003bbc <turn_20_degrees_L+0x10>
        {
            break;
 8003bcc:	bf00      	nop
        }
    }
    setMotorSpeedL(0);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f001 fdee 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f001 fd9d 	bl	8005714 <setMotorSpeedR>
    delay_ms(50);
 8003bda:	2032      	movs	r0, #50	@ 0x32
 8003bdc:	f7fd fc98 	bl	8001510 <delay_ms>
    resetEncoders();
 8003be0:	f001 f8d2 	bl	8004d88 <resetEncoders>
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <turn_20_degrees_R>:
void turn_20_degrees_R()
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
    resetEncoders();
 8003bf2:	f001 f8c9 	bl	8004d88 <resetEncoders>
    setMotorSpeedL(-80);
 8003bf6:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 8003bfa:	f001 fdd9 	bl	80057b0 <setMotorSpeedL>

    while (1)
    {

        int current_right_counts = getRightEncoderCounts();
 8003bfe:	f001 f89b 	bl	8004d38 <getRightEncoderCounts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	607b      	str	r3, [r7, #4]

        // Check if the turn is complete
        if (current_right_counts <= -300)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8003c0c:	dd00      	ble.n	8003c10 <turn_20_degrees_R+0x24>
    {
 8003c0e:	e7f6      	b.n	8003bfe <turn_20_degrees_R+0x12>
        {
            break;
 8003c10:	bf00      	nop
        }
    }
    setMotorSpeedL(0);
 8003c12:	2000      	movs	r0, #0
 8003c14:	f001 fdcc 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f001 fd7b 	bl	8005714 <setMotorSpeedR>
    delay_ms(50);
 8003c1e:	2032      	movs	r0, #50	@ 0x32
 8003c20:	f7fd fc76 	bl	8001510 <delay_ms>
    resetEncoders();
 8003c24:	f001 f8b0 	bl	8004d88 <resetEncoders>
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <turn_90_degreesR1>:
/// ControlledTurns
//////////////////////
void turn_90_degreesR1()
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
    // Reset encoders
    resetEncoders();
 8003c36:	f001 f8a7 	bl	8004d88 <resetEncoders>
    // Ramp parameters
    const int maxSpeed = 95;                   // Maximum motor speed
 8003c3a:	235f      	movs	r3, #95	@ 0x5f
 8003c3c:	61bb      	str	r3, [r7, #24]
    const int minSpeed = 75;                   // Minimum speed to overcome friction
 8003c3e:	234b      	movs	r3, #75	@ 0x4b
 8003c40:	617b      	str	r3, [r7, #20]
    const int accelSteps = 400;                // Counts to accelerate
 8003c42:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003c46:	613b      	str	r3, [r7, #16]
    const int targetCounts = 1700;             // Target encoder counts for 90-degree turn
 8003c48:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8003c4c:	60fb      	str	r3, [r7, #12]
    const int decelStart = targetCounts - 600; // When to start decelerating
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8003c54:	60bb      	str	r3, [r7, #8]

    int currentSpeed = minSpeed; // Starting speed
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	61fb      	str	r3, [r7, #28]

    while (1)
    {
        int current_left_counts = getLeftEncoderCounts();
 8003c5a:	f001 f881 	bl	8004d60 <getLeftEncoderCounts>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	607b      	str	r3, [r7, #4]

        // Acceleration phase
        if (current_left_counts < accelSteps)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	da0c      	bge.n	8003c84 <turn_90_degreesR1+0x54>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * current_left_counts / accelSteps;
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	fb03 f202 	mul.w	r2, r3, r2
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4413      	add	r3, r2
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e01e      	b.n	8003cc2 <turn_90_degreesR1+0x92>
        }
        // Deceleration phase
        else if (current_left_counts > decelStart)
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	dd18      	ble.n	8003cbe <turn_90_degreesR1+0x8e>
        {
            int remaining = targetCounts - current_left_counts;
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	603b      	str	r3, [r7, #0]
            if (remaining > 0)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	dd0e      	ble.n	8003cb8 <turn_90_degreesR1+0x88>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (targetCounts - decelStart);
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	fb03 f202 	mul.w	r2, r3, r2
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1acb      	subs	r3, r1, r3
 8003cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e004      	b.n	8003cc2 <turn_90_degreesR1+0x92>
            }
            else
            {
                currentSpeed = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	e001      	b.n	8003cc2 <turn_90_degreesR1+0x92>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	61fb      	str	r3, [r7, #28]
        }

        // Set motor speeds
        setMotorSpeedL(0);            // Left motor stationary
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f001 fd74 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(currentSpeed); // Right motor turning
 8003cc8:	69f8      	ldr	r0, [r7, #28]
 8003cca:	f001 fd23 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (current_left_counts >= targetCounts)
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	da00      	bge.n	8003cd8 <turn_90_degreesR1+0xa8>
    {
 8003cd6:	e7c0      	b.n	8003c5a <turn_90_degreesR1+0x2a>
        {
            break;
 8003cd8:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f001 fd68 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f001 fd17 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003ce6:	f001 f84f 	bl	8004d88 <resetEncoders>
}
 8003cea:	bf00      	nop
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <turn_90_degreesL1>:
    setMotorSpeedR(0);
    resetEncoders();
}

void turn_90_degreesL1()
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b088      	sub	sp, #32
 8003cf6:	af00      	add	r7, sp, #0
    // Reset encoders
    resetEncoders();
 8003cf8:	f001 f846 	bl	8004d88 <resetEncoders>
    // Ramp parameters
    const int maxSpeed = 95;                   // Maximum motor speed
 8003cfc:	235f      	movs	r3, #95	@ 0x5f
 8003cfe:	61bb      	str	r3, [r7, #24]
    const int minSpeed = 75;                   // Minimum speed to overcome friction
 8003d00:	234b      	movs	r3, #75	@ 0x4b
 8003d02:	617b      	str	r3, [r7, #20]
    const int accelSteps = 400;                // Counts to accelerate
 8003d04:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003d08:	613b      	str	r3, [r7, #16]
    const int targetCounts = 1638;             // Target encoder counts for 90-degree turn
 8003d0a:	f240 6366 	movw	r3, #1638	@ 0x666
 8003d0e:	60fb      	str	r3, [r7, #12]
    const int decelStart = targetCounts - 600; // When to start decelerating
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8003d16:	60bb      	str	r3, [r7, #8]

    int currentSpeed = minSpeed; // Starting speed
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	61fb      	str	r3, [r7, #28]

    while (1)
    {
        int current_right_counts = getRightEncoderCounts();
 8003d1c:	f001 f80c 	bl	8004d38 <getRightEncoderCounts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	607b      	str	r3, [r7, #4]

        // Acceleration phase
        if (current_right_counts < accelSteps)
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	da0c      	bge.n	8003d46 <turn_90_degreesL1+0x54>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * current_right_counts / accelSteps;
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	fb03 f202 	mul.w	r2, r3, r2
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	e01e      	b.n	8003d84 <turn_90_degreesL1+0x92>
        }
        // Deceleration phase
        else if (current_right_counts > decelStart)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	dd18      	ble.n	8003d80 <turn_90_degreesL1+0x8e>
        {
            int remaining = targetCounts - current_right_counts;
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	603b      	str	r3, [r7, #0]
            if (remaining > 0)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	dd0e      	ble.n	8003d7a <turn_90_degreesL1+0x88>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (targetCounts - decelStart);
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	fb03 f202 	mul.w	r2, r3, r2
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1acb      	subs	r3, r1, r3
 8003d6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4413      	add	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e004      	b.n	8003d84 <turn_90_degreesL1+0x92>
            }
            else
            {
                currentSpeed = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e001      	b.n	8003d84 <turn_90_degreesL1+0x92>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	61fb      	str	r3, [r7, #28]
        }

        // Set motor speeds
        setMotorSpeedL(currentSpeed); // Left motor turning
 8003d84:	69f8      	ldr	r0, [r7, #28]
 8003d86:	f001 fd13 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(0);            // Right motor stationary
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f001 fcc2 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (current_right_counts >= targetCounts)
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	da00      	bge.n	8003d9a <turn_90_degreesL1+0xa8>
    {
 8003d98:	e7c0      	b.n	8003d1c <turn_90_degreesL1+0x2a>
        {
            break;
 8003d9a:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f001 fd07 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003da2:	2000      	movs	r0, #0
 8003da4:	f001 fcb6 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 8003da8:	f000 ffee 	bl	8004d88 <resetEncoders>
}
 8003dac:	bf00      	nop
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <turn_left_45_degrees_right_Wh>:
void turn_left_45_degrees_right_Wh()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
    resetEncoders();
 8003dba:	f000 ffe5 	bl	8004d88 <resetEncoders>

    // Ramp parameters
    const int maxSpeed = 90; // Maximum motor speed
 8003dbe:	235a      	movs	r3, #90	@ 0x5a
 8003dc0:	61bb      	str	r3, [r7, #24]
    const int minSpeed = 75; // Minimum speed to overcome friction
 8003dc2:	234b      	movs	r3, #75	@ 0x4b
 8003dc4:	617b      	str	r3, [r7, #20]
    const int accelSteps = 200;
 8003dc6:	23c8      	movs	r3, #200	@ 0xc8
 8003dc8:	613b      	str	r3, [r7, #16]
    const int targetCounts = 670;              // Counts to accelerate
 8003dca:	f240 239e 	movw	r3, #670	@ 0x29e
 8003dce:	60fb      	str	r3, [r7, #12]
    const int decelStart = targetCounts - 300; // When to start decelerating
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003dd6:	60bb      	str	r3, [r7, #8]
                                               // Target encoder counts for 45-degree turn

    int currentSpeed = minSpeed; // Starting speed
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	61fb      	str	r3, [r7, #28]

    while (1)
    {
        int current_right_counts = getRightEncoderCounts();
 8003ddc:	f000 ffac 	bl	8004d38 <getRightEncoderCounts>
 8003de0:	4603      	mov	r3, r0
 8003de2:	607b      	str	r3, [r7, #4]

        // Acceleration phase
        if (current_right_counts < accelSteps)
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	da0c      	bge.n	8003e06 <turn_left_45_degrees_right_Wh+0x52>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * current_right_counts / accelSteps;
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	fb03 f202 	mul.w	r2, r3, r2
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4413      	add	r3, r2
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e01e      	b.n	8003e44 <turn_left_45_degrees_right_Wh+0x90>
        }
        // Deceleration phase
        else if (current_right_counts > decelStart)
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	dd18      	ble.n	8003e40 <turn_left_45_degrees_right_Wh+0x8c>
        {
            int remaining = targetCounts - current_right_counts;
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	603b      	str	r3, [r7, #0]
            if (remaining > 0)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	dd0e      	ble.n	8003e3a <turn_left_45_degrees_right_Wh+0x86>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (targetCounts - decelStart);
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	fb03 f202 	mul.w	r2, r3, r2
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	1acb      	subs	r3, r1, r3
 8003e2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4413      	add	r3, r2
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	e004      	b.n	8003e44 <turn_left_45_degrees_right_Wh+0x90>
            }
            else
            {
                currentSpeed = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	e001      	b.n	8003e44 <turn_left_45_degrees_right_Wh+0x90>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	61fb      	str	r3, [r7, #28]
        }

        // Set motor speeds
        setMotorSpeedL(currentSpeed);
 8003e44:	69f8      	ldr	r0, [r7, #28]
 8003e46:	f001 fcb3 	bl	80057b0 <setMotorSpeedL>

        // Exit condition
        if (current_right_counts >= targetCounts)
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	da00      	bge.n	8003e54 <turn_left_45_degrees_right_Wh+0xa0>
    {
 8003e52:	e7c3      	b.n	8003ddc <turn_left_45_degrees_right_Wh+0x28>
        {
            break;
 8003e54:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f001 fcaa 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f001 fc59 	bl	8005714 <setMotorSpeedR>
    delay_ms(20);
 8003e62:	2014      	movs	r0, #20
 8003e64:	f7fd fb54 	bl	8001510 <delay_ms>
    resetEncoders();
 8003e68:	f000 ff8e 	bl	8004d88 <resetEncoders>
}
 8003e6c:	bf00      	nop
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <turn_Right_45_TASK2_LR>:
    delay_ms(20);
    resetEncoders();
}
///////////////////////////////
void turn_Right_45_TASK2_LR()
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08e      	sub	sp, #56	@ 0x38
 8003e78:	af00      	add	r7, sp, #0
    resetEncoders();
 8003e7a:	f000 ff85 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 90; // Maximum motor speed
 8003e7e:	235a      	movs	r3, #90	@ 0x5a
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 80; // Minimum speed to overcome friction
 8003e82:	2350      	movs	r3, #80	@ 0x50
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 150;
 8003e86:	2396      	movs	r3, #150	@ 0x96
 8003e88:	623b      	str	r3, [r7, #32]
    const int target = 600;              // Counts to accelerate
 8003e8a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8003e8e:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 280; // When to start decelerating
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e96:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 8003e9c:	f000 ff60 	bl	8004d60 <getLeftEncoderCounts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfb8      	it	lt
 8003ea6:	425b      	neglt	r3, r3
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 8003eac:	f000 ff44 	bl	8004d38 <getRightEncoderCounts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bfb8      	it	lt
 8003eb6:	425b      	neglt	r3, r3
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	0fda      	lsrs	r2, r3, #31
 8003ec4:	4413      	add	r3, r2
 8003ec6:	105b      	asrs	r3, r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	da0c      	bge.n	8003eec <turn_Right_45_TASK2_LR+0x78>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8003ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	fb03 f202 	mul.w	r2, r3, r2
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee6:	4413      	add	r3, r2
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eea:	e01e      	b.n	8003f2a <turn_Right_45_TASK2_LR+0xb6>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	dd18      	ble.n	8003f26 <turn_Right_45_TASK2_LR+0xb2>
        {
            int remaining = target - avg_counts;
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	dd0e      	ble.n	8003f20 <turn_Right_45_TASK2_LR+0xac>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8003f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	fb03 f202 	mul.w	r2, r3, r2
 8003f0e:	69f9      	ldr	r1, [r7, #28]
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1a:	4413      	add	r3, r2
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1e:	e004      	b.n	8003f2a <turn_Right_45_TASK2_LR+0xb6>
            }
            else
            {
                currentSpeed = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f24:	e001      	b.n	8003f2a <turn_Right_45_TASK2_LR+0xb6>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = -(currentSpeed + correction);
 8003f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	425b      	negs	r3, r3
 8003f3e:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 8003f40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bfb8      	it	lt
 8003f4e:	425b      	neglt	r3, r3
 8003f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f52:	429a      	cmp	r2, r3
 8003f54:	dd07      	ble.n	8003f66 <turn_Right_45_TASK2_LR+0xf2>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da02      	bge.n	8003f62 <turn_Right_45_TASK2_LR+0xee>
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	425b      	negs	r3, r3
 8003f60:	e000      	b.n	8003f64 <turn_Right_45_TASK2_LR+0xf0>
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8003f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bfb8      	it	lt
 8003f6c:	425b      	neglt	r3, r3
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f70:	429a      	cmp	r2, r3
 8003f72:	dd07      	ble.n	8003f84 <turn_Right_45_TASK2_LR+0x110>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da02      	bge.n	8003f80 <turn_Right_45_TASK2_LR+0x10c>
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	425b      	negs	r3, r3
 8003f7e:	e000      	b.n	8003f82 <turn_Right_45_TASK2_LR+0x10e>
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 8003f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f86:	f001 fc13 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8003f8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f8c:	f001 fbc2 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	db81      	blt.n	8003e9c <turn_Right_45_TASK2_LR+0x28>
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	da00      	bge.n	8003fa2 <turn_Right_45_TASK2_LR+0x12e>
    {
 8003fa0:	e77c      	b.n	8003e9c <turn_Right_45_TASK2_LR+0x28>
        {
            break;
 8003fa2:	bf00      	nop
        }
    }

    m_stopLR();
 8003fa4:	f001 fc6a 	bl	800587c <m_stopLR>
    delay_ms(20);
 8003fa8:	2014      	movs	r0, #20
 8003faa:	f7fd fab1 	bl	8001510 <delay_ms>
    resetEncoders();
 8003fae:	f000 feeb 	bl	8004d88 <resetEncoders>
}
 8003fb2:	bf00      	nop
 8003fb4:	3738      	adds	r7, #56	@ 0x38
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <turn_Left_45_TASK2_LR>:
void turn_Left_45_TASK2_LR()
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b08e      	sub	sp, #56	@ 0x38
 8003fbe:	af00      	add	r7, sp, #0
    resetEncoders();
 8003fc0:	f000 fee2 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 90; // Maximum motor speed
 8003fc4:	235a      	movs	r3, #90	@ 0x5a
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 85; // Minimum speed to overcome friction
 8003fc8:	2355      	movs	r3, #85	@ 0x55
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 150;
 8003fcc:	2396      	movs	r3, #150	@ 0x96
 8003fce:	623b      	str	r3, [r7, #32]
    const int target = 600;              // Counts to accelerate
 8003fd0:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8003fd4:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 280; // When to start decelerating
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fdc:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 8003fe2:	f000 febd 	bl	8004d60 <getLeftEncoderCounts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bfb8      	it	lt
 8003fec:	425b      	neglt	r3, r3
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 8003ff2:	f000 fea1 	bl	8004d38 <getRightEncoderCounts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfb8      	it	lt
 8003ffc:	425b      	neglt	r3, r3
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	0fda      	lsrs	r2, r3, #31
 800400a:	4413      	add	r3, r2
 800400c:	105b      	asrs	r3, r3, #1
 800400e:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	429a      	cmp	r2, r3
 8004016:	da0c      	bge.n	8004032 <turn_Left_45_TASK2_LR+0x78>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8004018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	fb03 f202 	mul.w	r2, r3, r2
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	fb92 f3f3 	sdiv	r3, r2, r3
 800402a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402c:	4413      	add	r3, r2
 800402e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004030:	e01e      	b.n	8004070 <turn_Left_45_TASK2_LR+0xb6>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	429a      	cmp	r2, r3
 8004038:	dd18      	ble.n	800406c <turn_Left_45_TASK2_LR+0xb2>
        {
            int remaining = target - avg_counts;
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	dd0e      	ble.n	8004066 <turn_Left_45_TASK2_LR+0xac>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8004048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	fb03 f202 	mul.w	r2, r3, r2
 8004054:	69f9      	ldr	r1, [r7, #28]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	1acb      	subs	r3, r1, r3
 800405a:	fb92 f3f3 	sdiv	r3, r2, r3
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	4413      	add	r3, r2
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
 8004064:	e004      	b.n	8004070 <turn_Left_45_TASK2_LR+0xb6>
            }
            else
            {
                currentSpeed = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	637b      	str	r3, [r7, #52]	@ 0x34
 800406a:	e001      	b.n	8004070 <turn_Left_45_TASK2_LR+0xb6>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 800406c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	603b      	str	r3, [r7, #0]

        int speedL = currentSpeed + correction;
 800407c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	4413      	add	r3, r2
 8004082:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = -(currentSpeed - correction);
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	2b00      	cmp	r3, #0
 8004090:	bfb8      	it	lt
 8004092:	425b      	neglt	r3, r3
 8004094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004096:	429a      	cmp	r2, r3
 8004098:	dd07      	ble.n	80040aa <turn_Left_45_TASK2_LR+0xf0>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	2b00      	cmp	r3, #0
 800409e:	da02      	bge.n	80040a6 <turn_Left_45_TASK2_LR+0xec>
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	425b      	negs	r3, r3
 80040a4:	e000      	b.n	80040a8 <turn_Left_45_TASK2_LR+0xee>
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bfb8      	it	lt
 80040b0:	425b      	neglt	r3, r3
 80040b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b4:	429a      	cmp	r2, r3
 80040b6:	dd07      	ble.n	80040c8 <turn_Left_45_TASK2_LR+0x10e>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 80040b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da02      	bge.n	80040c4 <turn_Left_45_TASK2_LR+0x10a>
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	425b      	negs	r3, r3
 80040c2:	e000      	b.n	80040c6 <turn_Left_45_TASK2_LR+0x10c>
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 80040c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ca:	f001 fb71 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80040ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040d0:	f001 fb20 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	429a      	cmp	r2, r3
 80040da:	db82      	blt.n	8003fe2 <turn_Left_45_TASK2_LR+0x28>
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	da00      	bge.n	80040e6 <turn_Left_45_TASK2_LR+0x12c>
    {
 80040e4:	e77d      	b.n	8003fe2 <turn_Left_45_TASK2_LR+0x28>
        {
            break;
 80040e6:	bf00      	nop
        }
    }

    m_stopLR();
 80040e8:	f001 fbc8 	bl	800587c <m_stopLR>
    delay_ms(20);
 80040ec:	2014      	movs	r0, #20
 80040ee:	f7fd fa0f 	bl	8001510 <delay_ms>
    resetEncoders();
 80040f2:	f000 fe49 	bl	8004d88 <resetEncoders>
}
 80040f6:	bf00      	nop
 80040f8:	3738      	adds	r7, #56	@ 0x38
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <turn_Right_45_TASK2_R1>:
void turn_Right_45_TASK2_R1()
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b088      	sub	sp, #32
 8004102:	af00      	add	r7, sp, #0
    // Reset encoders
    resetEncoders();
 8004104:	f000 fe40 	bl	8004d88 <resetEncoders>
    // Ramp parameters
    const int maxSpeed = 90;                   // Maximum motor speed
 8004108:	235a      	movs	r3, #90	@ 0x5a
 800410a:	61bb      	str	r3, [r7, #24]
    const int minSpeed = 85;                   // Minimum speed to overcome friction
 800410c:	2355      	movs	r3, #85	@ 0x55
 800410e:	617b      	str	r3, [r7, #20]
    const int accelSteps = 400;                // Counts to accelerate
 8004110:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004114:	613b      	str	r3, [r7, #16]
    const int targetCounts = 1350;             // Target encoder counts for 90-degree turn
 8004116:	f240 5346 	movw	r3, #1350	@ 0x546
 800411a:	60fb      	str	r3, [r7, #12]
    const int decelStart = targetCounts - 600; // When to start decelerating
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8004122:	60bb      	str	r3, [r7, #8]

    int currentSpeed = minSpeed; // Starting speed
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	61fb      	str	r3, [r7, #28]

    while (1)
    {
        int current_left_counts = getLeftEncoderCounts();
 8004128:	f000 fe1a 	bl	8004d60 <getLeftEncoderCounts>
 800412c:	4603      	mov	r3, r0
 800412e:	607b      	str	r3, [r7, #4]

        // Acceleration phase
        if (current_left_counts < accelSteps)
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	da0c      	bge.n	8004152 <turn_Right_45_TASK2_R1+0x54>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * current_left_counts / accelSteps;
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	fb03 f202 	mul.w	r2, r3, r2
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	fb92 f3f3 	sdiv	r3, r2, r3
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e01e      	b.n	8004190 <turn_Right_45_TASK2_R1+0x92>
        }
        // Deceleration phase
        else if (current_left_counts > decelStart)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	429a      	cmp	r2, r3
 8004158:	dd18      	ble.n	800418c <turn_Right_45_TASK2_R1+0x8e>
        {
            int remaining = targetCounts - current_left_counts;
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	603b      	str	r3, [r7, #0]
            if (remaining > 0)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	dd0e      	ble.n	8004186 <turn_Right_45_TASK2_R1+0x88>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (targetCounts - decelStart);
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	fb03 f202 	mul.w	r2, r3, r2
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1acb      	subs	r3, r1, r3
 800417a:	fb92 f3f3 	sdiv	r3, r2, r3
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4413      	add	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e004      	b.n	8004190 <turn_Right_45_TASK2_R1+0x92>
            }
            else
            {
                currentSpeed = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e001      	b.n	8004190 <turn_Right_45_TASK2_R1+0x92>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	61fb      	str	r3, [r7, #28]
        }

        // Set motor speeds
        setMotorSpeedL(0);            // Left motor stationary
 8004190:	2000      	movs	r0, #0
 8004192:	f001 fb0d 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(currentSpeed); // Right motor turning
 8004196:	69f8      	ldr	r0, [r7, #28]
 8004198:	f001 fabc 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (current_left_counts >= targetCounts)
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	da00      	bge.n	80041a6 <turn_Right_45_TASK2_R1+0xa8>
    {
 80041a4:	e7c0      	b.n	8004128 <turn_Right_45_TASK2_R1+0x2a>
        {
            break;
 80041a6:	bf00      	nop
        }
    }

    // Stop the motors
    setMotorSpeedL(0);
 80041a8:	2000      	movs	r0, #0
 80041aa:	f001 fb01 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(0);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f001 fab0 	bl	8005714 <setMotorSpeedR>
    resetEncoders();
 80041b4:	f000 fde8 	bl	8004d88 <resetEncoders>
}
 80041b8:	bf00      	nop
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <turn_Right_180_LR>:
/// @brief //////////////////////////////
void turn_Right_180_LR()
{ // target
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08e      	sub	sp, #56	@ 0x38
 80041c4:	af00      	add	r7, sp, #0
    resetEncoders();
 80041c6:	f000 fddf 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 95; // Maximum motor speed
 80041ca:	235f      	movs	r3, #95	@ 0x5f
 80041cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 65; // Minimum speed to overcome friction
 80041ce:	2341      	movs	r3, #65	@ 0x41
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 500;
 80041d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80041d6:	623b      	str	r3, [r7, #32]
    const int target = 1661;             // Counts to accelerate
 80041d8:	f240 637d 	movw	r3, #1661	@ 0x67d
 80041dc:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 800; // When to start decelerating
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80041e4:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 80041ea:	f000 fdb9 	bl	8004d60 <getLeftEncoderCounts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bfb8      	it	lt
 80041f4:	425b      	neglt	r3, r3
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 80041fa:	f000 fd9d 	bl	8004d38 <getRightEncoderCounts>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	bfb8      	it	lt
 8004204:	425b      	neglt	r3, r3
 8004206:	b29b      	uxth	r3, r3
 8004208:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	0fda      	lsrs	r2, r3, #31
 8004212:	4413      	add	r3, r2
 8004214:	105b      	asrs	r3, r3, #1
 8004216:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	429a      	cmp	r2, r3
 800421e:	da0c      	bge.n	800423a <turn_Right_180_LR+0x7a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8004220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	fb03 f202 	mul.w	r2, r3, r2
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004234:	4413      	add	r3, r2
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
 8004238:	e01e      	b.n	8004278 <turn_Right_180_LR+0xb8>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	429a      	cmp	r2, r3
 8004240:	dd18      	ble.n	8004274 <turn_Right_180_LR+0xb4>
        {
            int remaining = target - avg_counts;
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	dd0e      	ble.n	800426e <turn_Right_180_LR+0xae>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8004250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	fb03 f202 	mul.w	r2, r3, r2
 800425c:	69f9      	ldr	r1, [r7, #28]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1acb      	subs	r3, r1, r3
 8004262:	fb92 f3f3 	sdiv	r3, r2, r3
 8004266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004268:	4413      	add	r3, r2
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
 800426c:	e004      	b.n	8004278 <turn_Right_180_LR+0xb8>
            }
            else
            {
                currentSpeed = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	637b      	str	r3, [r7, #52]	@ 0x34
 8004272:	e001      	b.n	8004278 <turn_Right_180_LR+0xb8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = -(currentSpeed + correction);
 8004284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	4413      	add	r3, r2
 800428a:	425b      	negs	r3, r3
 800428c:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 800428e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfb8      	it	lt
 800429c:	425b      	neglt	r3, r3
 800429e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a0:	429a      	cmp	r2, r3
 80042a2:	dd07      	ble.n	80042b4 <turn_Right_180_LR+0xf4>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	da02      	bge.n	80042b0 <turn_Right_180_LR+0xf0>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	425b      	negs	r3, r3
 80042ae:	e000      	b.n	80042b2 <turn_Right_180_LR+0xf2>
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 80042b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bfb8      	it	lt
 80042ba:	425b      	neglt	r3, r3
 80042bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042be:	429a      	cmp	r2, r3
 80042c0:	dd07      	ble.n	80042d2 <turn_Right_180_LR+0x112>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da02      	bge.n	80042ce <turn_Right_180_LR+0x10e>
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	425b      	negs	r3, r3
 80042cc:	e000      	b.n	80042d0 <turn_Right_180_LR+0x110>
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 80042d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042d4:	f001 fa6c 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80042d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042da:	f001 fa1b 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	db81      	blt.n	80041ea <turn_Right_180_LR+0x2a>
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	da00      	bge.n	80042f0 <turn_Right_180_LR+0x130>
    {
 80042ee:	e77c      	b.n	80041ea <turn_Right_180_LR+0x2a>
        {
            break;
 80042f0:	bf00      	nop
        }
    }

    m_stopLR();
 80042f2:	f001 fac3 	bl	800587c <m_stopLR>
    delay_ms(20);
 80042f6:	2014      	movs	r0, #20
 80042f8:	f7fd f90a 	bl	8001510 <delay_ms>
    resetEncoders();
 80042fc:	f000 fd44 	bl	8004d88 <resetEncoders>
}
 8004300:	bf00      	nop
 8004302:	3738      	adds	r7, #56	@ 0x38
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <turn_Right_90_LR>:
void turn_Right_90_LR()
{ // target
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	@ 0x38
 800430c:	af00      	add	r7, sp, #0
    resetEncoders();
 800430e:	f000 fd3b 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 95; // Maximum motor speed
 8004312:	235f      	movs	r3, #95	@ 0x5f
 8004314:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 66; // Minimum speed to overcome friction
 8004316:	2342      	movs	r3, #66	@ 0x42
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 300;
 800431a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800431e:	623b      	str	r3, [r7, #32]
    const int target = 835;              // Counts to accelerate
 8004320:	f240 3343 	movw	r3, #835	@ 0x343
 8004324:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 480; // When to start decelerating
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800432c:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 8004332:	f000 fd15 	bl	8004d60 <getLeftEncoderCounts>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	bfb8      	it	lt
 800433c:	425b      	neglt	r3, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 8004342:	f000 fcf9 	bl	8004d38 <getRightEncoderCounts>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	bfb8      	it	lt
 800434c:	425b      	neglt	r3, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	0fda      	lsrs	r2, r3, #31
 800435a:	4413      	add	r3, r2
 800435c:	105b      	asrs	r3, r3, #1
 800435e:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	429a      	cmp	r2, r3
 8004366:	da0c      	bge.n	8004382 <turn_Right_90_LR+0x7a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8004368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	fb03 f202 	mul.w	r2, r3, r2
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	fb92 f3f3 	sdiv	r3, r2, r3
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	4413      	add	r3, r2
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004380:	e01e      	b.n	80043c0 <turn_Right_90_LR+0xb8>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	429a      	cmp	r2, r3
 8004388:	dd18      	ble.n	80043bc <turn_Right_90_LR+0xb4>
        {
            int remaining = target - avg_counts;
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	dd0e      	ble.n	80043b6 <turn_Right_90_LR+0xae>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8004398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	fb03 f202 	mul.w	r2, r3, r2
 80043a4:	69f9      	ldr	r1, [r7, #28]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	1acb      	subs	r3, r1, r3
 80043aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80043ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b0:	4413      	add	r3, r2
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b4:	e004      	b.n	80043c0 <turn_Right_90_LR+0xb8>
            }
            else
            {
                currentSpeed = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ba:	e001      	b.n	80043c0 <turn_Right_90_LR+0xb8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = -(currentSpeed + correction);
 80043cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	4413      	add	r3, r2
 80043d2:	425b      	negs	r3, r3
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 80043d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bfb8      	it	lt
 80043e4:	425b      	neglt	r3, r3
 80043e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e8:	429a      	cmp	r2, r3
 80043ea:	dd07      	ble.n	80043fc <turn_Right_90_LR+0xf4>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da02      	bge.n	80043f8 <turn_Right_90_LR+0xf0>
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	425b      	negs	r3, r3
 80043f6:	e000      	b.n	80043fa <turn_Right_90_LR+0xf2>
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bfb8      	it	lt
 8004402:	425b      	neglt	r3, r3
 8004404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004406:	429a      	cmp	r2, r3
 8004408:	dd07      	ble.n	800441a <turn_Right_90_LR+0x112>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	2b00      	cmp	r3, #0
 800440e:	da02      	bge.n	8004416 <turn_Right_90_LR+0x10e>
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	425b      	negs	r3, r3
 8004414:	e000      	b.n	8004418 <turn_Right_90_LR+0x110>
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 800441a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800441c:	f001 f9c8 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8004420:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004422:	f001 f977 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	429a      	cmp	r2, r3
 800442c:	db81      	blt.n	8004332 <turn_Right_90_LR+0x2a>
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	429a      	cmp	r2, r3
 8004434:	da00      	bge.n	8004438 <turn_Right_90_LR+0x130>
    {
 8004436:	e77c      	b.n	8004332 <turn_Right_90_LR+0x2a>
        {
            break;
 8004438:	bf00      	nop
        }
    }

    m_stopLR();
 800443a:	f001 fa1f 	bl	800587c <m_stopLR>
    delay_ms(20);
 800443e:	2014      	movs	r0, #20
 8004440:	f7fd f866 	bl	8001510 <delay_ms>
    resetEncoders();
 8004444:	f000 fca0 	bl	8004d88 <resetEncoders>
}
 8004448:	bf00      	nop
 800444a:	3738      	adds	r7, #56	@ 0x38
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <turn_Left_180_LR>:
void turn_Left_180_LR()
{ // target
 8004450:	b580      	push	{r7, lr}
 8004452:	b08e      	sub	sp, #56	@ 0x38
 8004454:	af00      	add	r7, sp, #0
    resetEncoders();
 8004456:	f000 fc97 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 95; // Maximum motor speed
 800445a:	235f      	movs	r3, #95	@ 0x5f
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 66;              // Minimum speed to overcome friction
 800445e:	2342      	movs	r3, #66	@ 0x42
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 400;           // Counts to accelerate
 8004462:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004466:	623b      	str	r3, [r7, #32]
    const int target = 1650;              // Target encoder counts for 180-degree turn
 8004468:	f240 6372 	movw	r3, #1650	@ 0x672
 800446c:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 1000; // When to start decelerating
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004474:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 800447a:	f000 fc71 	bl	8004d60 <getLeftEncoderCounts>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfb8      	it	lt
 8004484:	425b      	neglt	r3, r3
 8004486:	b29b      	uxth	r3, r3
 8004488:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 800448a:	f000 fc55 	bl	8004d38 <getRightEncoderCounts>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	bfb8      	it	lt
 8004494:	425b      	neglt	r3, r3
 8004496:	b29b      	uxth	r3, r3
 8004498:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	0fda      	lsrs	r2, r3, #31
 80044a2:	4413      	add	r3, r2
 80044a4:	105b      	asrs	r3, r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	da0c      	bge.n	80044ca <turn_Left_180_LR+0x7a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 80044b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	fb03 f202 	mul.w	r2, r3, r2
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	fb92 f3f3 	sdiv	r3, r2, r3
 80044c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c4:	4413      	add	r3, r2
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c8:	e01e      	b.n	8004508 <turn_Left_180_LR+0xb8>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	dd18      	ble.n	8004504 <turn_Left_180_LR+0xb4>
        {
            int remaining = target - avg_counts;
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dd0e      	ble.n	80044fe <turn_Left_180_LR+0xae>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 80044e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	fb03 f202 	mul.w	r2, r3, r2
 80044ec:	69f9      	ldr	r1, [r7, #28]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1acb      	subs	r3, r1, r3
 80044f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80044f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f8:	4413      	add	r3, r2
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fc:	e004      	b.n	8004508 <turn_Left_180_LR+0xb8>
            }
            else
            {
                currentSpeed = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
 8004502:	e001      	b.n	8004508 <turn_Left_180_LR+0xb8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = currentSpeed + correction;
 8004514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = -(currentSpeed - correction);
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	2b00      	cmp	r3, #0
 8004528:	bfb8      	it	lt
 800452a:	425b      	neglt	r3, r3
 800452c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452e:	429a      	cmp	r2, r3
 8004530:	dd07      	ble.n	8004542 <turn_Left_180_LR+0xf2>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	2b00      	cmp	r3, #0
 8004536:	da02      	bge.n	800453e <turn_Left_180_LR+0xee>
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	425b      	negs	r3, r3
 800453c:	e000      	b.n	8004540 <turn_Left_180_LR+0xf0>
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8004542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	bfb8      	it	lt
 8004548:	425b      	neglt	r3, r3
 800454a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454c:	429a      	cmp	r2, r3
 800454e:	dd07      	ble.n	8004560 <turn_Left_180_LR+0x110>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	2b00      	cmp	r3, #0
 8004554:	da02      	bge.n	800455c <turn_Left_180_LR+0x10c>
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	425b      	negs	r3, r3
 800455a:	e000      	b.n	800455e <turn_Left_180_LR+0x10e>
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 8004560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004562:	f001 f925 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8004566:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004568:	f001 f8d4 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	429a      	cmp	r2, r3
 8004572:	db82      	blt.n	800447a <turn_Left_180_LR+0x2a>
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	da00      	bge.n	800457e <turn_Left_180_LR+0x12e>
    {
 800457c:	e77d      	b.n	800447a <turn_Left_180_LR+0x2a>
        {
            break;
 800457e:	bf00      	nop
        }
    }

    m_stopLR();
 8004580:	f001 f97c 	bl	800587c <m_stopLR>
    delay_ms(20);
 8004584:	2014      	movs	r0, #20
 8004586:	f7fc ffc3 	bl	8001510 <delay_ms>
    resetEncoders();
 800458a:	f000 fbfd 	bl	8004d88 <resetEncoders>
}
 800458e:	bf00      	nop
 8004590:	3738      	adds	r7, #56	@ 0x38
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <turn_Left_90_LR>:
void turn_Left_90_LR()
{ // target
 8004596:	b580      	push	{r7, lr}
 8004598:	b08e      	sub	sp, #56	@ 0x38
 800459a:	af00      	add	r7, sp, #0
    resetEncoders();
 800459c:	f000 fbf4 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 95; // Maximum motor speed
 80045a0:	235f      	movs	r3, #95	@ 0x5f
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 66; // Minimum speed to overcome friction
 80045a4:	2342      	movs	r3, #66	@ 0x42
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 300;
 80045a8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80045ac:	623b      	str	r3, [r7, #32]
    const int target = 835;              // Counts to accelerate
 80045ae:	f240 3343 	movw	r3, #835	@ 0x343
 80045b2:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 480; // When to start decelerating
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80045ba:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 80045c0:	f000 fbce 	bl	8004d60 <getLeftEncoderCounts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfb8      	it	lt
 80045ca:	425b      	neglt	r3, r3
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 80045d0:	f000 fbb2 	bl	8004d38 <getRightEncoderCounts>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfb8      	it	lt
 80045da:	425b      	neglt	r3, r3
 80045dc:	b29b      	uxth	r3, r3
 80045de:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	0fda      	lsrs	r2, r3, #31
 80045e8:	4413      	add	r3, r2
 80045ea:	105b      	asrs	r3, r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	da0c      	bge.n	8004610 <turn_Left_90_LR+0x7a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 80045f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	fb03 f202 	mul.w	r2, r3, r2
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	fb92 f3f3 	sdiv	r3, r2, r3
 8004608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460a:	4413      	add	r3, r2
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
 800460e:	e01e      	b.n	800464e <turn_Left_90_LR+0xb8>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	429a      	cmp	r2, r3
 8004616:	dd18      	ble.n	800464a <turn_Left_90_LR+0xb4>
        {
            int remaining = target - avg_counts;
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	dd0e      	ble.n	8004644 <turn_Left_90_LR+0xae>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8004626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	fb03 f202 	mul.w	r2, r3, r2
 8004632:	69f9      	ldr	r1, [r7, #28]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1acb      	subs	r3, r1, r3
 8004638:	fb92 f3f3 	sdiv	r3, r2, r3
 800463c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463e:	4413      	add	r3, r2
 8004640:	637b      	str	r3, [r7, #52]	@ 0x34
 8004642:	e004      	b.n	800464e <turn_Left_90_LR+0xb8>
            }
            else
            {
                currentSpeed = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
 8004648:	e001      	b.n	800464e <turn_Left_90_LR+0xb8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 800464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = currentSpeed + correction;
 800465a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4413      	add	r3, r2
 8004660:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = -(currentSpeed - correction);
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	2b00      	cmp	r3, #0
 800466e:	bfb8      	it	lt
 8004670:	425b      	neglt	r3, r3
 8004672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004674:	429a      	cmp	r2, r3
 8004676:	dd07      	ble.n	8004688 <turn_Left_90_LR+0xf2>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	2b00      	cmp	r3, #0
 800467c:	da02      	bge.n	8004684 <turn_Left_90_LR+0xee>
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	425b      	negs	r3, r3
 8004682:	e000      	b.n	8004686 <turn_Left_90_LR+0xf0>
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8004688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfb8      	it	lt
 800468e:	425b      	neglt	r3, r3
 8004690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004692:	429a      	cmp	r2, r3
 8004694:	dd07      	ble.n	80046a6 <turn_Left_90_LR+0x110>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	da02      	bge.n	80046a2 <turn_Left_90_LR+0x10c>
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	425b      	negs	r3, r3
 80046a0:	e000      	b.n	80046a4 <turn_Left_90_LR+0x10e>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 80046a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046a8:	f001 f882 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80046ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046ae:	f001 f831 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	db82      	blt.n	80045c0 <turn_Left_90_LR+0x2a>
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	429a      	cmp	r2, r3
 80046c0:	da00      	bge.n	80046c4 <turn_Left_90_LR+0x12e>
    {
 80046c2:	e77d      	b.n	80045c0 <turn_Left_90_LR+0x2a>
        {
            break;
 80046c4:	bf00      	nop
        }
    }

    m_stopLR();
 80046c6:	f001 f8d9 	bl	800587c <m_stopLR>
    delay_ms(20);
 80046ca:	2014      	movs	r0, #20
 80046cc:	f7fc ff20 	bl	8001510 <delay_ms>
    resetEncoders();
 80046d0:	f000 fb5a 	bl	8004d88 <resetEncoders>
}
 80046d4:	bf00      	nop
 80046d6:	3738      	adds	r7, #56	@ 0x38
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <turn_Right_45_LR>:
void turn_Right_45_LR()
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08e      	sub	sp, #56	@ 0x38
 80046e0:	af00      	add	r7, sp, #0
    resetEncoders();
 80046e2:	f000 fb51 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 90; // Maximum motor speed
 80046e6:	235a      	movs	r3, #90	@ 0x5a
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 70; // Minimum speed to overcome friction
 80046ea:	2346      	movs	r3, #70	@ 0x46
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 120;
 80046ee:	2378      	movs	r3, #120	@ 0x78
 80046f0:	623b      	str	r3, [r7, #32]
    const int target = 310;              // Counts to accelerate
 80046f2:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80046f6:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 210; // When to start decelerating
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3bd2      	subs	r3, #210	@ 0xd2
 80046fc:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 8004702:	f000 fb2d 	bl	8004d60 <getLeftEncoderCounts>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	bfb8      	it	lt
 800470c:	425b      	neglt	r3, r3
 800470e:	b29b      	uxth	r3, r3
 8004710:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 8004712:	f000 fb11 	bl	8004d38 <getRightEncoderCounts>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	bfb8      	it	lt
 800471c:	425b      	neglt	r3, r3
 800471e:	b29b      	uxth	r3, r3
 8004720:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	0fda      	lsrs	r2, r3, #31
 800472a:	4413      	add	r3, r2
 800472c:	105b      	asrs	r3, r3, #1
 800472e:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	429a      	cmp	r2, r3
 8004736:	da0c      	bge.n	8004752 <turn_Right_45_LR+0x76>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8004738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	fb03 f202 	mul.w	r2, r3, r2
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	fb92 f3f3 	sdiv	r3, r2, r3
 800474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474c:	4413      	add	r3, r2
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004750:	e01e      	b.n	8004790 <turn_Right_45_LR+0xb4>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	429a      	cmp	r2, r3
 8004758:	dd18      	ble.n	800478c <turn_Right_45_LR+0xb0>
        {
            int remaining = target - avg_counts;
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	dd0e      	ble.n	8004786 <turn_Right_45_LR+0xaa>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8004768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	fb03 f202 	mul.w	r2, r3, r2
 8004774:	69f9      	ldr	r1, [r7, #28]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	1acb      	subs	r3, r1, r3
 800477a:	fb92 f3f3 	sdiv	r3, r2, r3
 800477e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004780:	4413      	add	r3, r2
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
 8004784:	e004      	b.n	8004790 <turn_Right_45_LR+0xb4>
            }
            else
            {
                currentSpeed = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
 800478a:	e001      	b.n	8004790 <turn_Right_45_LR+0xb4>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 800478c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = -(currentSpeed + correction);
 800479c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	425b      	negs	r3, r3
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 80047a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bfb8      	it	lt
 80047b4:	425b      	neglt	r3, r3
 80047b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b8:	429a      	cmp	r2, r3
 80047ba:	dd07      	ble.n	80047cc <turn_Right_45_LR+0xf0>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da02      	bge.n	80047c8 <turn_Right_45_LR+0xec>
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	425b      	negs	r3, r3
 80047c6:	e000      	b.n	80047ca <turn_Right_45_LR+0xee>
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 80047cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfb8      	it	lt
 80047d2:	425b      	neglt	r3, r3
 80047d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d6:	429a      	cmp	r2, r3
 80047d8:	dd07      	ble.n	80047ea <turn_Right_45_LR+0x10e>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da02      	bge.n	80047e6 <turn_Right_45_LR+0x10a>
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	425b      	negs	r3, r3
 80047e4:	e000      	b.n	80047e8 <turn_Right_45_LR+0x10c>
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 80047ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ec:	f000 ffe0 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 80047f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80047f2:	f000 ff8f 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	db81      	blt.n	8004702 <turn_Right_45_LR+0x26>
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	429a      	cmp	r2, r3
 8004804:	da00      	bge.n	8004808 <turn_Right_45_LR+0x12c>
    {
 8004806:	e77c      	b.n	8004702 <turn_Right_45_LR+0x26>
        {
            break;
 8004808:	bf00      	nop
        }
    }

    m_stopLR();
 800480a:	f001 f837 	bl	800587c <m_stopLR>
    delay_ms(20);
 800480e:	2014      	movs	r0, #20
 8004810:	f7fc fe7e 	bl	8001510 <delay_ms>
    resetEncoders();
 8004814:	f000 fab8 	bl	8004d88 <resetEncoders>
}
 8004818:	bf00      	nop
 800481a:	3738      	adds	r7, #56	@ 0x38
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <turn_Right_90_LR_Controlled>:
void turn_Right_90_LR_Controlled(int target, int minSpeed)
{ // target
 8004820:	b580      	push	{r7, lr}
 8004822:	b08e      	sub	sp, #56	@ 0x38
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    resetEncoders();
 800482a:	f000 faad 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 90; // Maximum motor speed
 800482e:	235a      	movs	r3, #90	@ 0x5a
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Minimum speed to overcome friction
    const int accelSteps = 300;
 8004832:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
    // Counts to accelerate
    const int decelStart = target - 480; // When to start decelerating
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800483e:	623b      	str	r3, [r7, #32]

    int currentSpeed = minSpeed; // Starting speed
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 8004844:	f000 fa8c 	bl	8004d60 <getLeftEncoderCounts>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfb8      	it	lt
 800484e:	425b      	neglt	r3, r3
 8004850:	b29b      	uxth	r3, r3
 8004852:	61fb      	str	r3, [r7, #28]
        int right_counts = abs(getRightEncoderCounts());
 8004854:	f000 fa70 	bl	8004d38 <getRightEncoderCounts>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfb8      	it	lt
 800485e:	425b      	neglt	r3, r3
 8004860:	b29b      	uxth	r3, r3
 8004862:	61bb      	str	r3, [r7, #24]
        int avg_counts = (left_counts + right_counts) / 2;
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4413      	add	r3, r2
 800486a:	0fda      	lsrs	r2, r3, #31
 800486c:	4413      	add	r3, r2
 800486e:	105b      	asrs	r3, r3, #1
 8004870:	617b      	str	r3, [r7, #20]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	429a      	cmp	r2, r3
 8004878:	da0c      	bge.n	8004894 <turn_Right_90_LR_Controlled+0x74>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 800487a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	fb03 f202 	mul.w	r2, r3, r2
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	fb92 f3f3 	sdiv	r3, r2, r3
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	4413      	add	r3, r2
 8004890:	637b      	str	r3, [r7, #52]	@ 0x34
 8004892:	e01e      	b.n	80048d2 <turn_Right_90_LR_Controlled+0xb2>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	429a      	cmp	r2, r3
 800489a:	dd18      	ble.n	80048ce <turn_Right_90_LR_Controlled+0xae>
        {
            int remaining = target - avg_counts;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	613b      	str	r3, [r7, #16]
            if (remaining > 0)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	dd0e      	ble.n	80048c8 <turn_Right_90_LR_Controlled+0xa8>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 80048aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	fb03 f202 	mul.w	r2, r3, r2
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	1acb      	subs	r3, r1, r3
 80048bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	4413      	add	r3, r2
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c6:	e004      	b.n	80048d2 <turn_Right_90_LR_Controlled+0xb2>
            }
            else
            {
                currentSpeed = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80048cc:	e001      	b.n	80048d2 <turn_Right_90_LR_Controlled+0xb2>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	60fb      	str	r3, [r7, #12]
        int correction = error * 1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	60bb      	str	r3, [r7, #8]

        // Apply speeds with minimum guaranteed
        int speedL = -(currentSpeed + correction);
 80048de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4413      	add	r3, r2
 80048e4:	425b      	negs	r3, r3
 80048e6:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 80048e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfb8      	it	lt
 80048f6:	425b      	neglt	r3, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	dd07      	ble.n	800490e <turn_Right_90_LR_Controlled+0xee>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	2b00      	cmp	r3, #0
 8004902:	da02      	bge.n	800490a <turn_Right_90_LR_Controlled+0xea>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	425b      	negs	r3, r3
 8004908:	e000      	b.n	800490c <turn_Right_90_LR_Controlled+0xec>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 800490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	bfb8      	it	lt
 8004914:	425b      	neglt	r3, r3
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	dd07      	ble.n	800492c <turn_Right_90_LR_Controlled+0x10c>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	2b00      	cmp	r3, #0
 8004920:	da02      	bge.n	8004928 <turn_Right_90_LR_Controlled+0x108>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	425b      	negs	r3, r3
 8004926:	e000      	b.n	800492a <turn_Right_90_LR_Controlled+0x10a>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 800492c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800492e:	f000 ff3f 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8004932:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004934:	f000 feee 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	db81      	blt.n	8004844 <turn_Right_90_LR_Controlled+0x24>
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	da00      	bge.n	800494a <turn_Right_90_LR_Controlled+0x12a>
    {
 8004948:	e77c      	b.n	8004844 <turn_Right_90_LR_Controlled+0x24>
        {
            break;
 800494a:	bf00      	nop
        }
    }

    m_stopLR();
 800494c:	f000 ff96 	bl	800587c <m_stopLR>
    delay_ms(20);
 8004950:	2014      	movs	r0, #20
 8004952:	f7fc fddd 	bl	8001510 <delay_ms>
    resetEncoders();
 8004956:	f000 fa17 	bl	8004d88 <resetEncoders>
}
 800495a:	bf00      	nop
 800495c:	3738      	adds	r7, #56	@ 0x38
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <T4_turn_Right_90_LR>:
//////////////task4////////////////
void T4_turn_Right_90_LR()
{ // target
 8004962:	b580      	push	{r7, lr}
 8004964:	b08e      	sub	sp, #56	@ 0x38
 8004966:	af00      	add	r7, sp, #0
    resetEncoders();
 8004968:	f000 fa0e 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 95; // Maximum motor speed
 800496c:	235f      	movs	r3, #95	@ 0x5f
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 65; // Minimum speed to overcome friction
 8004970:	2341      	movs	r3, #65	@ 0x41
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 300;
 8004974:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004978:	623b      	str	r3, [r7, #32]
    const int target = 823;              // Counts to accelerate
 800497a:	f240 3337 	movw	r3, #823	@ 0x337
 800497e:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 480; // When to start decelerating
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004986:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 800498c:	f000 f9e8 	bl	8004d60 <getLeftEncoderCounts>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfb8      	it	lt
 8004996:	425b      	neglt	r3, r3
 8004998:	b29b      	uxth	r3, r3
 800499a:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 800499c:	f000 f9cc 	bl	8004d38 <getRightEncoderCounts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfb8      	it	lt
 80049a6:	425b      	neglt	r3, r3
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	0fda      	lsrs	r2, r3, #31
 80049b4:	4413      	add	r3, r2
 80049b6:	105b      	asrs	r3, r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	429a      	cmp	r2, r3
 80049c0:	da0c      	bge.n	80049dc <T4_turn_Right_90_LR+0x7a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 80049c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	fb03 f202 	mul.w	r2, r3, r2
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80049d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d6:	4413      	add	r3, r2
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049da:	e01e      	b.n	8004a1a <T4_turn_Right_90_LR+0xb8>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	dd18      	ble.n	8004a16 <T4_turn_Right_90_LR+0xb4>
        {
            int remaining = target - avg_counts;
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	dd0e      	ble.n	8004a10 <T4_turn_Right_90_LR+0xae>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 80049f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	fb03 f202 	mul.w	r2, r3, r2
 80049fe:	69f9      	ldr	r1, [r7, #28]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1acb      	subs	r3, r1, r3
 8004a04:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0a:	4413      	add	r3, r2
 8004a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0e:	e004      	b.n	8004a1a <T4_turn_Right_90_LR+0xb8>
            }
            else
            {
                currentSpeed = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a14:	e001      	b.n	8004a1a <T4_turn_Right_90_LR+0xb8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = -(currentSpeed + correction);
 8004a26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	425b      	negs	r3, r3
 8004a2e:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = currentSpeed - correction;
 8004a30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bfb8      	it	lt
 8004a3e:	425b      	neglt	r3, r3
 8004a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a42:	429a      	cmp	r2, r3
 8004a44:	dd07      	ble.n	8004a56 <T4_turn_Right_90_LR+0xf4>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	da02      	bge.n	8004a52 <T4_turn_Right_90_LR+0xf0>
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	425b      	negs	r3, r3
 8004a50:	e000      	b.n	8004a54 <T4_turn_Right_90_LR+0xf2>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bfb8      	it	lt
 8004a5c:	425b      	neglt	r3, r3
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a60:	429a      	cmp	r2, r3
 8004a62:	dd07      	ble.n	8004a74 <T4_turn_Right_90_LR+0x112>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8004a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da02      	bge.n	8004a70 <T4_turn_Right_90_LR+0x10e>
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	e000      	b.n	8004a72 <T4_turn_Right_90_LR+0x110>
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 8004a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a76:	f000 fe9b 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8004a7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a7c:	f000 fe4a 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	db81      	blt.n	800498c <T4_turn_Right_90_LR+0x2a>
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	da00      	bge.n	8004a92 <T4_turn_Right_90_LR+0x130>
    {
 8004a90:	e77c      	b.n	800498c <T4_turn_Right_90_LR+0x2a>
        {
            break;
 8004a92:	bf00      	nop
        }
    }

    m_stopLR();
 8004a94:	f000 fef2 	bl	800587c <m_stopLR>
    delay_ms(20);
 8004a98:	2014      	movs	r0, #20
 8004a9a:	f7fc fd39 	bl	8001510 <delay_ms>
    resetEncoders();
 8004a9e:	f000 f973 	bl	8004d88 <resetEncoders>
}
 8004aa2:	bf00      	nop
 8004aa4:	3738      	adds	r7, #56	@ 0x38
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <T4_turn_Left_180_LR>:
void T4_turn_Left_180_LR()
{ // target
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b08e      	sub	sp, #56	@ 0x38
 8004aae:	af00      	add	r7, sp, #0
    resetEncoders();
 8004ab0:	f000 f96a 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 95; // Maximum motor speed
 8004ab4:	235f      	movs	r3, #95	@ 0x5f
 8004ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 65;              // Minimum speed to overcome friction
 8004ab8:	2341      	movs	r3, #65	@ 0x41
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 400;           // Counts to accelerate
 8004abc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004ac0:	623b      	str	r3, [r7, #32]
    const int target = 1630;              // Target encoder counts for 180-degree turn
 8004ac2:	f240 635e 	movw	r3, #1630	@ 0x65e
 8004ac6:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 1000; // When to start decelerating
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004ace:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 8004ad4:	f000 f944 	bl	8004d60 <getLeftEncoderCounts>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfb8      	it	lt
 8004ade:	425b      	neglt	r3, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 8004ae4:	f000 f928 	bl	8004d38 <getRightEncoderCounts>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bfb8      	it	lt
 8004aee:	425b      	neglt	r3, r3
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	0fda      	lsrs	r2, r3, #31
 8004afc:	4413      	add	r3, r2
 8004afe:	105b      	asrs	r3, r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	da0c      	bge.n	8004b24 <T4_turn_Left_180_LR+0x7a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8004b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	fb03 f202 	mul.w	r2, r3, r2
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1e:	4413      	add	r3, r2
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b22:	e01e      	b.n	8004b62 <T4_turn_Left_180_LR+0xb8>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	dd18      	ble.n	8004b5e <T4_turn_Left_180_LR+0xb4>
        {
            int remaining = target - avg_counts;
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dd0e      	ble.n	8004b58 <T4_turn_Left_180_LR+0xae>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8004b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	fb03 f202 	mul.w	r2, r3, r2
 8004b46:	69f9      	ldr	r1, [r7, #28]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	1acb      	subs	r3, r1, r3
 8004b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b52:	4413      	add	r3, r2
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b56:	e004      	b.n	8004b62 <T4_turn_Left_180_LR+0xb8>
            }
            else
            {
                currentSpeed = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	e001      	b.n	8004b62 <T4_turn_Left_180_LR+0xb8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = currentSpeed + correction;
 8004b6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4413      	add	r3, r2
 8004b74:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = -(currentSpeed - correction);
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bfb8      	it	lt
 8004b84:	425b      	neglt	r3, r3
 8004b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	dd07      	ble.n	8004b9c <T4_turn_Left_180_LR+0xf2>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da02      	bge.n	8004b98 <T4_turn_Left_180_LR+0xee>
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	425b      	negs	r3, r3
 8004b96:	e000      	b.n	8004b9a <T4_turn_Left_180_LR+0xf0>
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8004b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfb8      	it	lt
 8004ba2:	425b      	neglt	r3, r3
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	dd07      	ble.n	8004bba <T4_turn_Left_180_LR+0x110>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da02      	bge.n	8004bb6 <T4_turn_Left_180_LR+0x10c>
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	425b      	negs	r3, r3
 8004bb4:	e000      	b.n	8004bb8 <T4_turn_Left_180_LR+0x10e>
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 8004bba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bbc:	f000 fdf8 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8004bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bc2:	f000 fda7 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	db82      	blt.n	8004ad4 <T4_turn_Left_180_LR+0x2a>
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	da00      	bge.n	8004bd8 <T4_turn_Left_180_LR+0x12e>
    {
 8004bd6:	e77d      	b.n	8004ad4 <T4_turn_Left_180_LR+0x2a>
        {
            break;
 8004bd8:	bf00      	nop
        }
    }

    m_stopLR();
 8004bda:	f000 fe4f 	bl	800587c <m_stopLR>
    delay_ms(20);
 8004bde:	2014      	movs	r0, #20
 8004be0:	f7fc fc96 	bl	8001510 <delay_ms>
    resetEncoders();
 8004be4:	f000 f8d0 	bl	8004d88 <resetEncoders>
}
 8004be8:	bf00      	nop
 8004bea:	3738      	adds	r7, #56	@ 0x38
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <T4_turn_Left_90_LR>:
void T4_turn_Left_90_LR()
{ // target
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	@ 0x38
 8004bf4:	af00      	add	r7, sp, #0
    resetEncoders();
 8004bf6:	f000 f8c7 	bl	8004d88 <resetEncoders>

    // Ramp parameters - adjust these for your robot
    const int maxSpeed = 95; // Maximum motor speed
 8004bfa:	235f      	movs	r3, #95	@ 0x5f
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int minSpeed = 65; // Minimum speed to overcome friction
 8004bfe:	2341      	movs	r3, #65	@ 0x41
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
    const int accelSteps = 300;
 8004c02:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004c06:	623b      	str	r3, [r7, #32]
    const int target = 825;              // Counts to accelerate
 8004c08:	f240 3339 	movw	r3, #825	@ 0x339
 8004c0c:	61fb      	str	r3, [r7, #28]
    const int decelStart = target - 480; // When to start decelerating
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004c14:	61bb      	str	r3, [r7, #24]

    int currentSpeed = minSpeed; // Starting speed
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        int left_counts = abs(getLeftEncoderCounts());
 8004c1a:	f000 f8a1 	bl	8004d60 <getLeftEncoderCounts>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bfb8      	it	lt
 8004c24:	425b      	neglt	r3, r3
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	617b      	str	r3, [r7, #20]
        int right_counts = abs(getRightEncoderCounts());
 8004c2a:	f000 f885 	bl	8004d38 <getRightEncoderCounts>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bfb8      	it	lt
 8004c34:	425b      	neglt	r3, r3
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	613b      	str	r3, [r7, #16]
        int avg_counts = (left_counts + right_counts) / 2;
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	0fda      	lsrs	r2, r3, #31
 8004c42:	4413      	add	r3, r2
 8004c44:	105b      	asrs	r3, r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]

        // Acceleration phase
        if (avg_counts < accelSteps)
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	da0c      	bge.n	8004c6a <T4_turn_Left_90_LR+0x7a>
        {
            currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8004c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	fb03 f202 	mul.w	r2, r3, r2
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c64:	4413      	add	r3, r2
 8004c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c68:	e01e      	b.n	8004ca8 <T4_turn_Left_90_LR+0xb8>
        }
        // Deceleration phase
        else if (avg_counts > decelStart)
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	dd18      	ble.n	8004ca4 <T4_turn_Left_90_LR+0xb4>
        {
            int remaining = target - avg_counts;
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	60bb      	str	r3, [r7, #8]
            if (remaining > 0)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dd0e      	ble.n	8004c9e <T4_turn_Left_90_LR+0xae>
            {
                currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8004c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	fb03 f202 	mul.w	r2, r3, r2
 8004c8c:	69f9      	ldr	r1, [r7, #28]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	1acb      	subs	r3, r1, r3
 8004c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	4413      	add	r3, r2
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c9c:	e004      	b.n	8004ca8 <T4_turn_Left_90_LR+0xb8>
            }
            else
            {
                currentSpeed = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca2:	e001      	b.n	8004ca8 <T4_turn_Left_90_LR+0xb8>
            }
        }
        // Constant speed phase
        else
        {
            currentSpeed = maxSpeed;
 8004ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Balance correction
        int error = left_counts - right_counts;
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	607b      	str	r3, [r7, #4]
        int correction = error * 1;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]

        // Apply speeds with minimum guaranteed
        int speedL = currentSpeed + correction;
 8004cb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	633b      	str	r3, [r7, #48]	@ 0x30
        int speedR = -(currentSpeed - correction);
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Ensure minimum speed is maintained
        if (abs(speedL) < minSpeed)
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bfb8      	it	lt
 8004cca:	425b      	neglt	r3, r3
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	dd07      	ble.n	8004ce2 <T4_turn_Left_90_LR+0xf2>
            speedL = speedL < 0 ? -minSpeed : minSpeed;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da02      	bge.n	8004cde <T4_turn_Left_90_LR+0xee>
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	425b      	negs	r3, r3
 8004cdc:	e000      	b.n	8004ce0 <T4_turn_Left_90_LR+0xf0>
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (abs(speedR) < minSpeed)
 8004ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfb8      	it	lt
 8004ce8:	425b      	neglt	r3, r3
 8004cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cec:	429a      	cmp	r2, r3
 8004cee:	dd07      	ble.n	8004d00 <T4_turn_Left_90_LR+0x110>
            speedR = speedR < 0 ? -minSpeed : minSpeed;
 8004cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da02      	bge.n	8004cfc <T4_turn_Left_90_LR+0x10c>
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	425b      	negs	r3, r3
 8004cfa:	e000      	b.n	8004cfe <T4_turn_Left_90_LR+0x10e>
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

        setMotorSpeedL(speedL);
 8004d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d02:	f000 fd55 	bl	80057b0 <setMotorSpeedL>
        setMotorSpeedR(speedR);
 8004d06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d08:	f000 fd04 	bl	8005714 <setMotorSpeedR>

        // Exit condition
        if (left_counts >= target && right_counts >= target)
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	db82      	blt.n	8004c1a <T4_turn_Left_90_LR+0x2a>
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	da00      	bge.n	8004d1e <T4_turn_Left_90_LR+0x12e>
    {
 8004d1c:	e77d      	b.n	8004c1a <T4_turn_Left_90_LR+0x2a>
        {
            break;
 8004d1e:	bf00      	nop
        }
    }

    m_stopLR();
 8004d20:	f000 fdac 	bl	800587c <m_stopLR>
    delay_ms(20);
 8004d24:	2014      	movs	r0, #20
 8004d26:	f7fc fbf3 	bl	8001510 <delay_ms>
    resetEncoders();
 8004d2a:	f000 f82d 	bl	8004d88 <resetEncoders>
}
 8004d2e:	bf00      	nop
 8004d30:	3738      	adds	r7, #56	@ 0x38
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <getRightEncoderCounts>:
int16_t right_encoder;
int16_t left_encoder;
/*
 * Implement this function so it returns the right encoder value
 */
int16_t getRightEncoderCounts() {
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	right_encoder = (int16_t) TIM2->CNT;
 8004d3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	b21a      	sxth	r2, r3
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <getRightEncoderCounts+0x24>)
 8004d46:	801a      	strh	r2, [r3, #0]
	return (int16_t) TIM2->CNT;
 8004d48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	b21b      	sxth	r3, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000154 	.word	0x20000154

08004d60 <getLeftEncoderCounts>:

/*
 * Implement this function so it returns the left encoder value
 */
int16_t getLeftEncoderCounts() {
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
	left_encoder = (int16_t) TIM3->CNT;
 8004d64:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <getLeftEncoderCounts+0x20>)
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	b21a      	sxth	r2, r3
 8004d6a:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <getLeftEncoderCounts+0x24>)
 8004d6c:	801a      	strh	r2, [r3, #0]
	return (int16_t) TIM3->CNT;
 8004d6e:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <getLeftEncoderCounts+0x20>)
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	b21b      	sxth	r3, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40000400 	.word	0x40000400
 8004d84:	20000156 	.word	0x20000156

08004d88 <resetEncoders>:

/*
 * This function has already been implemented for you. Enjoy! :)
 */
void resetEncoders() {
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 8004d8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d90:	2200      	movs	r2, #0
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8004d94:	4b03      	ldr	r3, [pc, #12]	@ (8004da4 <resetEncoders+0x1c>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d9a:	bf00      	nop
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40000400 	.word	0x40000400

08004da8 <setTCAChannel>:
#include "i2c_MUX.h"

// External I2C handle (ensure this is declared in your main code or globally)
extern I2C_HandleTypeDef hi2c1;

void setTCAChannel(uint8_t i) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	4603      	mov	r3, r0
 8004db0:	71fb      	strb	r3, [r7, #7]
    uint8_t channel = 1 << i;
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	2201      	movs	r2, #1
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, (0x70 << 1), &channel, 1, 1000);
 8004dbe:	f107 020f 	add.w	r2, r7, #15
 8004dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2301      	movs	r3, #1
 8004dca:	21e0      	movs	r1, #224	@ 0xe0
 8004dcc:	4803      	ldr	r0, [pc, #12]	@ (8004ddc <setTCAChannel+0x34>)
 8004dce:	f008 fc63 	bl	800d698 <HAL_I2C_Master_Transmit>
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000200 	.word	0x20000200

08004de0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004de4:	f007 f846 	bl	800be74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004de8:	f000 f874 	bl	8004ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004dec:	f000 fbb4 	bl	8005558 <MX_GPIO_Init>
  MX_DMA_Init();
 8004df0:	f000 fb92 	bl	8005518 <MX_DMA_Init>
  MX_ADC1_Init();
 8004df4:	f000 f8d8 	bl	8004fa8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004df8:	f000 f9a6 	bl	8005148 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004dfc:	f000 f9d2 	bl	80051a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004e00:	f000 fa94 	bl	800532c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004e04:	f000 fae6 	bl	80053d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004e08:	f000 fb38 	bl	800547c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  TimerDelay_Init();
 8004e0c:	f7fc fb06 	bl	800141c <TimerDelay_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_VAL, 10); // Cast ADC_VAL to uint32_t*
 8004e10:	220a      	movs	r2, #10
 8004e12:	4929      	ldr	r1, [pc, #164]	@ (8004eb8 <main+0xd8>)
 8004e14:	4829      	ldr	r0, [pc, #164]	@ (8004ebc <main+0xdc>)
 8004e16:	f007 f907 	bl	800c028 <HAL_ADC_Start_DMA>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8004e1a:	213c      	movs	r1, #60	@ 0x3c
 8004e1c:	4828      	ldr	r0, [pc, #160]	@ (8004ec0 <main+0xe0>)
 8004e1e:	f00a fe39 	bl	800fa94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004e22:	213c      	movs	r1, #60	@ 0x3c
 8004e24:	4827      	ldr	r0, [pc, #156]	@ (8004ec4 <main+0xe4>)
 8004e26:	f00a fe35 	bl	800fa94 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4826      	ldr	r0, [pc, #152]	@ (8004ec8 <main+0xe8>)
 8004e2e:	f00a fcdb 	bl	800f7e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004e32:	2104      	movs	r1, #4
 8004e34:	4824      	ldr	r0, [pc, #144]	@ (8004ec8 <main+0xe8>)
 8004e36:	f00a fcd7 	bl	800f7e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004e3a:	2108      	movs	r1, #8
 8004e3c:	4822      	ldr	r0, [pc, #136]	@ (8004ec8 <main+0xe8>)
 8004e3e:	f00a fcd3 	bl	800f7e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004e42:	210c      	movs	r1, #12
 8004e44:	4820      	ldr	r0, [pc, #128]	@ (8004ec8 <main+0xe8>)
 8004e46:	f00a fccf 	bl	800f7e8 <HAL_TIM_PWM_Start>
  Ultrasonic_Init();
 8004e4a:	f004 ffb5 	bl	8009db8 <Ultrasonic_Init>
  setTCAChannel(0);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f7ff ffaa 	bl	8004da8 <setTCAChannel>
  tcs3272_init();
 8004e54:	f004 fd3a 	bl	80098cc <tcs3272_init>
  Bottom_C_PAD_Sensor();
 8004e58:	f004 feda 	bl	8009c10 <Bottom_C_PAD_Sensor>
  setTCAChannel(1);
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f7ff ffa3 	bl	8004da8 <setTCAChannel>
  tcs3272_init();
 8004e62:	f004 fd33 	bl	80098cc <tcs3272_init>
  Top_C_BOX_Sensor();
 8004e66:	f004 fe9b 	bl	8009ba0 <Top_C_BOX_Sensor>
  Actuator_Init();
 8004e6a:	f7fc f86f 	bl	8000f4c <Actuator_Init>
  setTCAChannel(3);
 8004e6e:	2003      	movs	r0, #3
 8004e70:	f7ff ff9a 	bl	8004da8 <setTCAChannel>
  tcs3272_init();
 8004e74:	f004 fd2a 	bl	80098cc <tcs3272_init>
  Top_C_BALL_Sensor();
 8004e78:	f004 fe5a 	bl	8009b30 <Top_C_BALL_Sensor>
  OLED_Init();
 8004e7c:	f000 fd92 	bl	80059a4 <OLED_Init>
  OLED_Name();
 8004e80:	f000 fdac 	bl	80059dc <OLED_Name>
  delay_ms(1200);
 8004e84:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8004e88:	f7fc fb42 	bl	8001510 <delay_ms>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    updateStateMachine();
 8004e8c:	f001 fb30 	bl	80064f0 <updateStateMachine>
    if (Button1 == 1)
 8004e90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <main+0xec>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d104      	bne.n	8004ea2 <main+0xc2>
    {
        HandleButton1Press();
 8004e98:	f001 f898 	bl	8005fcc <HandleButton1Press>
        Button1 = 0; // Reset the Button1 flag
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <main+0xec>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
    }

    // Handle Button2 press
    if (Button2 == 1)
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <main+0xf0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d1f0      	bne.n	8004e8c <main+0xac>
    {
        UpdateOLEDMenu(); // Handle task selection
 8004eaa:	f001 f815 	bl	8005ed8 <UpdateOLEDMenu>
        Button2 = 0;      // Reset the Button2 flag
 8004eae:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <main+0xf0>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
    updateStateMachine();
 8004eb4:	e7ea      	b.n	8004e8c <main+0xac>
 8004eb6:	bf00      	nop
 8004eb8:	20000454 	.word	0x20000454
 8004ebc:	20000158 	.word	0x20000158
 8004ec0:	2000029c 	.word	0x2000029c
 8004ec4:	200002e4 	.word	0x200002e4
 8004ec8:	20000254 	.word	0x20000254
 8004ecc:	20000374 	.word	0x20000374
 8004ed0:	20000378 	.word	0x20000378

08004ed4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b094      	sub	sp, #80	@ 0x50
 8004ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eda:	f107 0320 	add.w	r3, r7, #32
 8004ede:	2230      	movs	r2, #48	@ 0x30
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f00b fcf0 	bl	80108c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ee8:	f107 030c 	add.w	r3, r7, #12
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <SystemClock_Config+0xcc>)
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	4a27      	ldr	r2, [pc, #156]	@ (8004fa0 <SystemClock_Config+0xcc>)
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f08:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <SystemClock_Config+0xcc>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f14:	2300      	movs	r3, #0
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	4b22      	ldr	r3, [pc, #136]	@ (8004fa4 <SystemClock_Config+0xd0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004f20:	4a20      	ldr	r2, [pc, #128]	@ (8004fa4 <SystemClock_Config+0xd0>)
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa4 <SystemClock_Config+0xd0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f34:	2302      	movs	r3, #2
 8004f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f40:	2302      	movs	r3, #2
 8004f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004f48:	2308      	movs	r3, #8
 8004f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004f4c:	2354      	movs	r3, #84	@ 0x54
 8004f4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f50:	2302      	movs	r3, #2
 8004f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f54:	2304      	movs	r3, #4
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f58:	f107 0320 	add.w	r3, r7, #32
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f009 fefb 	bl	800ed58 <HAL_RCC_OscConfig>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004f68:	f000 fbce 	bl	8005708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f70:	2302      	movs	r3, #2
 8004f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f82:	f107 030c 	add.w	r3, r7, #12
 8004f86:	2102      	movs	r1, #2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f00a f95d 	bl	800f248 <HAL_RCC_ClockConfig>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004f94:	f000 fbb8 	bl	8005708 <Error_Handler>
  }
}
 8004f98:	bf00      	nop
 8004f9a:	3750      	adds	r7, #80	@ 0x50
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000

08004fa8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004fae:	463b      	mov	r3, r7
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8004fba:	4b60      	ldr	r3, [pc, #384]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fbc:	4a60      	ldr	r2, [pc, #384]	@ (8005140 <MX_ADC1_Init+0x198>)
 8004fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004fc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004fce:	4b5b      	ldr	r3, [pc, #364]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004fd4:	4b59      	ldr	r3, [pc, #356]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004fda:	4b58      	ldr	r3, [pc, #352]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fe2:	4b56      	ldr	r3, [pc, #344]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fe8:	4b54      	ldr	r3, [pc, #336]	@ (800513c <MX_ADC1_Init+0x194>)
 8004fea:	4a56      	ldr	r2, [pc, #344]	@ (8005144 <MX_ADC1_Init+0x19c>)
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004fee:	4b53      	ldr	r3, [pc, #332]	@ (800513c <MX_ADC1_Init+0x194>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8004ff4:	4b51      	ldr	r3, [pc, #324]	@ (800513c <MX_ADC1_Init+0x194>)
 8004ff6:	220a      	movs	r2, #10
 8004ff8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004ffa:	4b50      	ldr	r3, [pc, #320]	@ (800513c <MX_ADC1_Init+0x194>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005002:	4b4e      	ldr	r3, [pc, #312]	@ (800513c <MX_ADC1_Init+0x194>)
 8005004:	2201      	movs	r2, #1
 8005006:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005008:	484c      	ldr	r0, [pc, #304]	@ (800513c <MX_ADC1_Init+0x194>)
 800500a:	f006 ffc9 	bl	800bfa0 <HAL_ADC_Init>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005014:	f000 fb78 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8005018:	2308      	movs	r3, #8
 800501a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800501c:	2301      	movs	r3, #1
 800501e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005020:	2307      	movs	r3, #7
 8005022:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005024:	463b      	mov	r3, r7
 8005026:	4619      	mov	r1, r3
 8005028:	4844      	ldr	r0, [pc, #272]	@ (800513c <MX_ADC1_Init+0x194>)
 800502a:	f007 f901 	bl	800c230 <HAL_ADC_ConfigChannel>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005034:	f000 fb68 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8005038:	2300      	movs	r3, #0
 800503a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800503c:	2302      	movs	r3, #2
 800503e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005040:	463b      	mov	r3, r7
 8005042:	4619      	mov	r1, r3
 8005044:	483d      	ldr	r0, [pc, #244]	@ (800513c <MX_ADC1_Init+0x194>)
 8005046:	f007 f8f3 	bl	800c230 <HAL_ADC_ConfigChannel>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005050:	f000 fb5a 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8005054:	2301      	movs	r3, #1
 8005056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005058:	2303      	movs	r3, #3
 800505a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800505c:	463b      	mov	r3, r7
 800505e:	4619      	mov	r1, r3
 8005060:	4836      	ldr	r0, [pc, #216]	@ (800513c <MX_ADC1_Init+0x194>)
 8005062:	f007 f8e5 	bl	800c230 <HAL_ADC_ConfigChannel>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800506c:	f000 fb4c 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_2;
 8005070:	2302      	movs	r3, #2
 8005072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005074:	2304      	movs	r3, #4
 8005076:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005078:	463b      	mov	r3, r7
 800507a:	4619      	mov	r1, r3
 800507c:	482f      	ldr	r0, [pc, #188]	@ (800513c <MX_ADC1_Init+0x194>)
 800507e:	f007 f8d7 	bl	800c230 <HAL_ADC_ConfigChannel>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8005088:	f000 fb3e 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 800508c:	2303      	movs	r3, #3
 800508e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005090:	2305      	movs	r3, #5
 8005092:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005094:	463b      	mov	r3, r7
 8005096:	4619      	mov	r1, r3
 8005098:	4828      	ldr	r0, [pc, #160]	@ (800513c <MX_ADC1_Init+0x194>)
 800509a:	f007 f8c9 	bl	800c230 <HAL_ADC_ConfigChannel>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80050a4:	f000 fb30 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_4;
 80050a8:	2304      	movs	r3, #4
 80050aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80050ac:	2306      	movs	r3, #6
 80050ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050b0:	463b      	mov	r3, r7
 80050b2:	4619      	mov	r1, r3
 80050b4:	4821      	ldr	r0, [pc, #132]	@ (800513c <MX_ADC1_Init+0x194>)
 80050b6:	f007 f8bb 	bl	800c230 <HAL_ADC_ConfigChannel>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80050c0:	f000 fb22 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_5;
 80050c4:	2305      	movs	r3, #5
 80050c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80050c8:	2307      	movs	r3, #7
 80050ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050cc:	463b      	mov	r3, r7
 80050ce:	4619      	mov	r1, r3
 80050d0:	481a      	ldr	r0, [pc, #104]	@ (800513c <MX_ADC1_Init+0x194>)
 80050d2:	f007 f8ad 	bl	800c230 <HAL_ADC_ConfigChannel>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80050dc:	f000 fb14 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_7;
 80050e0:	2307      	movs	r3, #7
 80050e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80050e4:	2308      	movs	r3, #8
 80050e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050e8:	463b      	mov	r3, r7
 80050ea:	4619      	mov	r1, r3
 80050ec:	4813      	ldr	r0, [pc, #76]	@ (800513c <MX_ADC1_Init+0x194>)
 80050ee:	f007 f89f 	bl	800c230 <HAL_ADC_ConfigChannel>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80050f8:	f000 fb06 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_6;
 80050fc:	2306      	movs	r3, #6
 80050fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005100:	2309      	movs	r3, #9
 8005102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005104:	463b      	mov	r3, r7
 8005106:	4619      	mov	r1, r3
 8005108:	480c      	ldr	r0, [pc, #48]	@ (800513c <MX_ADC1_Init+0x194>)
 800510a:	f007 f891 	bl	800c230 <HAL_ADC_ConfigChannel>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8005114:	f000 faf8 	bl	8005708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8005118:	2309      	movs	r3, #9
 800511a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800511c:	230a      	movs	r3, #10
 800511e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005120:	463b      	mov	r3, r7
 8005122:	4619      	mov	r1, r3
 8005124:	4805      	ldr	r0, [pc, #20]	@ (800513c <MX_ADC1_Init+0x194>)
 8005126:	f007 f883 	bl	800c230 <HAL_ADC_ConfigChannel>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8005130:	f000 faea 	bl	8005708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000158 	.word	0x20000158
 8005140:	40012000 	.word	0x40012000
 8005144:	0f000001 	.word	0x0f000001

08005148 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800514c:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <MX_I2C1_Init+0x50>)
 800514e:	4a13      	ldr	r2, [pc, #76]	@ (800519c <MX_I2C1_Init+0x54>)
 8005150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005152:	4b11      	ldr	r3, [pc, #68]	@ (8005198 <MX_I2C1_Init+0x50>)
 8005154:	4a12      	ldr	r2, [pc, #72]	@ (80051a0 <MX_I2C1_Init+0x58>)
 8005156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005158:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <MX_I2C1_Init+0x50>)
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800515e:	4b0e      	ldr	r3, [pc, #56]	@ (8005198 <MX_I2C1_Init+0x50>)
 8005160:	2200      	movs	r2, #0
 8005162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <MX_I2C1_Init+0x50>)
 8005166:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800516a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800516c:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <MX_I2C1_Init+0x50>)
 800516e:	2200      	movs	r2, #0
 8005170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005172:	4b09      	ldr	r3, [pc, #36]	@ (8005198 <MX_I2C1_Init+0x50>)
 8005174:	2200      	movs	r2, #0
 8005176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005178:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <MX_I2C1_Init+0x50>)
 800517a:	2200      	movs	r2, #0
 800517c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <MX_I2C1_Init+0x50>)
 8005180:	2200      	movs	r2, #0
 8005182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005184:	4804      	ldr	r0, [pc, #16]	@ (8005198 <MX_I2C1_Init+0x50>)
 8005186:	f008 f943 	bl	800d410 <HAL_I2C_Init>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005190:	f000 faba 	bl	8005708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8005194:	bf00      	nop
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000200 	.word	0x20000200
 800519c:	40005400 	.word	0x40005400
 80051a0:	00061a80 	.word	0x00061a80

080051a4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b096      	sub	sp, #88	@ 0x58
 80051a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	609a      	str	r2, [r3, #8]
 80051ce:	60da      	str	r2, [r3, #12]
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	615a      	str	r2, [r3, #20]
 80051d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	2220      	movs	r2, #32
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f00b fb73 	bl	80108c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80051e2:	4b50      	ldr	r3, [pc, #320]	@ (8005324 <MX_TIM1_Init+0x180>)
 80051e4:	4a50      	ldr	r2, [pc, #320]	@ (8005328 <MX_TIM1_Init+0x184>)
 80051e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80051e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005324 <MX_TIM1_Init+0x180>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ee:	4b4d      	ldr	r3, [pc, #308]	@ (8005324 <MX_TIM1_Init+0x180>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2879;
 80051f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005324 <MX_TIM1_Init+0x180>)
 80051f6:	f640 323f 	movw	r2, #2879	@ 0xb3f
 80051fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051fc:	4b49      	ldr	r3, [pc, #292]	@ (8005324 <MX_TIM1_Init+0x180>)
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005202:	4b48      	ldr	r3, [pc, #288]	@ (8005324 <MX_TIM1_Init+0x180>)
 8005204:	2200      	movs	r2, #0
 8005206:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005208:	4b46      	ldr	r3, [pc, #280]	@ (8005324 <MX_TIM1_Init+0x180>)
 800520a:	2200      	movs	r2, #0
 800520c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800520e:	4845      	ldr	r0, [pc, #276]	@ (8005324 <MX_TIM1_Init+0x180>)
 8005210:	f00a f9e6 	bl	800f5e0 <HAL_TIM_Base_Init>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800521a:	f000 fa75 	bl	8005708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800521e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005222:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005224:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005228:	4619      	mov	r1, r3
 800522a:	483e      	ldr	r0, [pc, #248]	@ (8005324 <MX_TIM1_Init+0x180>)
 800522c:	f00a fe72 	bl	800ff14 <HAL_TIM_ConfigClockSource>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005236:	f000 fa67 	bl	8005708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800523a:	483a      	ldr	r0, [pc, #232]	@ (8005324 <MX_TIM1_Init+0x180>)
 800523c:	f00a fa7a 	bl	800f734 <HAL_TIM_PWM_Init>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005246:	f000 fa5f 	bl	8005708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800524a:	2300      	movs	r3, #0
 800524c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800524e:	2300      	movs	r3, #0
 8005250:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005252:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005256:	4619      	mov	r1, r3
 8005258:	4832      	ldr	r0, [pc, #200]	@ (8005324 <MX_TIM1_Init+0x180>)
 800525a:	f00b fa2d 	bl	80106b8 <HAL_TIMEx_MasterConfigSynchronization>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005264:	f000 fa50 	bl	8005708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005268:	2360      	movs	r3, #96	@ 0x60
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005270:	2300      	movs	r3, #0
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005274:	2300      	movs	r3, #0
 8005276:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005278:	2300      	movs	r3, #0
 800527a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800527c:	2300      	movs	r3, #0
 800527e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005288:	2200      	movs	r2, #0
 800528a:	4619      	mov	r1, r3
 800528c:	4825      	ldr	r0, [pc, #148]	@ (8005324 <MX_TIM1_Init+0x180>)
 800528e:	f00a fd7f 	bl	800fd90 <HAL_TIM_PWM_ConfigChannel>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005298:	f000 fa36 	bl	8005708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800529c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052a0:	2204      	movs	r2, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	481f      	ldr	r0, [pc, #124]	@ (8005324 <MX_TIM1_Init+0x180>)
 80052a6:	f00a fd73 	bl	800fd90 <HAL_TIM_PWM_ConfigChannel>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80052b0:	f000 fa2a 	bl	8005708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052b8:	2208      	movs	r2, #8
 80052ba:	4619      	mov	r1, r3
 80052bc:	4819      	ldr	r0, [pc, #100]	@ (8005324 <MX_TIM1_Init+0x180>)
 80052be:	f00a fd67 	bl	800fd90 <HAL_TIM_PWM_ConfigChannel>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80052c8:	f000 fa1e 	bl	8005708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052d0:	220c      	movs	r2, #12
 80052d2:	4619      	mov	r1, r3
 80052d4:	4813      	ldr	r0, [pc, #76]	@ (8005324 <MX_TIM1_Init+0x180>)
 80052d6:	f00a fd5b 	bl	800fd90 <HAL_TIM_PWM_ConfigChannel>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80052e0:	f000 fa12 	bl	8005708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80052f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80052fe:	2300      	movs	r3, #0
 8005300:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4807      	ldr	r0, [pc, #28]	@ (8005324 <MX_TIM1_Init+0x180>)
 8005308:	f00b fa44 	bl	8010794 <HAL_TIMEx_ConfigBreakDeadTime>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8005312:	f000 f9f9 	bl	8005708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005316:	4803      	ldr	r0, [pc, #12]	@ (8005324 <MX_TIM1_Init+0x180>)
 8005318:	f001 fb12 	bl	8006940 <HAL_TIM_MspPostInit>
}
 800531c:	bf00      	nop
 800531e:	3758      	adds	r7, #88	@ 0x58
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20000254 	.word	0x20000254
 8005328:	40010000 	.word	0x40010000

0800532c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	@ 0x30
 8005330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005332:	f107 030c 	add.w	r3, r7, #12
 8005336:	2224      	movs	r2, #36	@ 0x24
 8005338:	2100      	movs	r1, #0
 800533a:	4618      	mov	r0, r3
 800533c:	f00b fac4 	bl	80108c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005348:	4b21      	ldr	r3, [pc, #132]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 800534a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800534e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005350:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 8005352:	2200      	movs	r2, #0
 8005354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005356:	4b1e      	ldr	r3, [pc, #120]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800535c:	4b1c      	ldr	r3, [pc, #112]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 800535e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 8005366:	2200      	movs	r2, #0
 8005368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800536a:	4b19      	ldr	r3, [pc, #100]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 800536c:	2200      	movs	r2, #0
 800536e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005370:	2303      	movs	r3, #3
 8005372:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800537c:	2300      	movs	r3, #0
 800537e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005384:	2300      	movs	r3, #0
 8005386:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005388:	2301      	movs	r3, #1
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800538c:	2300      	movs	r3, #0
 800538e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005394:	f107 030c 	add.w	r3, r7, #12
 8005398:	4619      	mov	r1, r3
 800539a:	480d      	ldr	r0, [pc, #52]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 800539c:	f00a fad4 	bl	800f948 <HAL_TIM_Encoder_Init>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80053a6:	f000 f9af 	bl	8005708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4806      	ldr	r0, [pc, #24]	@ (80053d0 <MX_TIM2_Init+0xa4>)
 80053b8:	f00b f97e 	bl	80106b8 <HAL_TIMEx_MasterConfigSynchronization>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80053c2:	f000 f9a1 	bl	8005708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 80053c6:	bf00      	nop
 80053c8:	3730      	adds	r7, #48	@ 0x30
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	2000029c 	.word	0x2000029c

080053d4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	@ 0x30
 80053d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053da:	f107 030c 	add.w	r3, r7, #12
 80053de:	2224      	movs	r2, #36	@ 0x24
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f00b fa70 	bl	80108c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053f0:	4b20      	ldr	r3, [pc, #128]	@ (8005474 <MX_TIM3_Init+0xa0>)
 80053f2:	4a21      	ldr	r2, [pc, #132]	@ (8005478 <MX_TIM3_Init+0xa4>)
 80053f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80053f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005474 <MX_TIM3_Init+0xa0>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <MX_TIM3_Init+0xa0>)
 80053fe:	2200      	movs	r2, #0
 8005400:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005402:	4b1c      	ldr	r3, [pc, #112]	@ (8005474 <MX_TIM3_Init+0xa0>)
 8005404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005408:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800540a:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <MX_TIM3_Init+0xa0>)
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005410:	4b18      	ldr	r3, [pc, #96]	@ (8005474 <MX_TIM3_Init+0xa0>)
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005416:	2303      	movs	r3, #3
 8005418:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800541a:	2300      	movs	r3, #0
 800541c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800541e:	2301      	movs	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800542a:	2300      	movs	r3, #0
 800542c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800542e:	2301      	movs	r3, #1
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005432:	2300      	movs	r3, #0
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	4619      	mov	r1, r3
 8005440:	480c      	ldr	r0, [pc, #48]	@ (8005474 <MX_TIM3_Init+0xa0>)
 8005442:	f00a fa81 	bl	800f948 <HAL_TIM_Encoder_Init>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800544c:	f000 f95c 	bl	8005708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005450:	2300      	movs	r3, #0
 8005452:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4805      	ldr	r0, [pc, #20]	@ (8005474 <MX_TIM3_Init+0xa0>)
 800545e:	f00b f92b 	bl	80106b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005468:	f000 f94e 	bl	8005708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 800546c:	bf00      	nop
 800546e:	3730      	adds	r7, #48	@ 0x30
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	200002e4 	.word	0x200002e4
 8005478:	40000400 	.word	0x40000400

0800547c <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	609a      	str	r2, [r3, #8]
 800548e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005490:	463b      	mov	r3, r7
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005498:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <MX_TIM5_Init+0x94>)
 800549a:	4a1e      	ldr	r2, [pc, #120]	@ (8005514 <MX_TIM5_Init+0x98>)
 800549c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84 - 1;
 800549e:	4b1c      	ldr	r3, [pc, #112]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054a0:	2253      	movs	r2, #83	@ 0x53
 80054a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80054aa:	4b19      	ldr	r3, [pc, #100]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054b2:	4b17      	ldr	r3, [pc, #92]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b8:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80054be:	4814      	ldr	r0, [pc, #80]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054c0:	f00a f88e 	bl	800f5e0 <HAL_TIM_Base_Init>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80054ca:	f000 f91d 	bl	8005708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	4619      	mov	r1, r3
 80054da:	480d      	ldr	r0, [pc, #52]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054dc:	f00a fd1a 	bl	800ff14 <HAL_TIM_ConfigClockSource>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80054e6:	f000 f90f 	bl	8005708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80054f2:	463b      	mov	r3, r7
 80054f4:	4619      	mov	r1, r3
 80054f6:	4806      	ldr	r0, [pc, #24]	@ (8005510 <MX_TIM5_Init+0x94>)
 80054f8:	f00b f8de 	bl	80106b8 <HAL_TIMEx_MasterConfigSynchronization>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8005502:	f000 f901 	bl	8005708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
}
 8005506:	bf00      	nop
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	2000032c 	.word	0x2000032c
 8005514:	40000c00 	.word	0x40000c00

08005518 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	607b      	str	r3, [r7, #4]
 8005522:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <MX_DMA_Init+0x3c>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	4a0b      	ldr	r2, [pc, #44]	@ (8005554 <MX_DMA_Init+0x3c>)
 8005528:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800552c:	6313      	str	r3, [r2, #48]	@ 0x30
 800552e:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <MX_DMA_Init+0x3c>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	2038      	movs	r0, #56	@ 0x38
 8005540:	f007 f9f1 	bl	800c926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005544:	2038      	movs	r0, #56	@ 0x38
 8005546:	f007 fa0a 	bl	800c95e <HAL_NVIC_EnableIRQ>
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800

08005558 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800555e:	f107 030c 	add.w	r3, r7, #12
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	609a      	str	r2, [r3, #8]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	4b47      	ldr	r3, [pc, #284]	@ (8005690 <MX_GPIO_Init+0x138>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	4a46      	ldr	r2, [pc, #280]	@ (8005690 <MX_GPIO_Init+0x138>)
 8005578:	f043 0304 	orr.w	r3, r3, #4
 800557c:	6313      	str	r3, [r2, #48]	@ 0x30
 800557e:	4b44      	ldr	r3, [pc, #272]	@ (8005690 <MX_GPIO_Init+0x138>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	4b40      	ldr	r3, [pc, #256]	@ (8005690 <MX_GPIO_Init+0x138>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	4a3f      	ldr	r2, [pc, #252]	@ (8005690 <MX_GPIO_Init+0x138>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6313      	str	r3, [r2, #48]	@ 0x30
 800559a:	4b3d      	ldr	r3, [pc, #244]	@ (8005690 <MX_GPIO_Init+0x138>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <MX_GPIO_Init+0x138>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	4a38      	ldr	r2, [pc, #224]	@ (8005690 <MX_GPIO_Init+0x138>)
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055b6:	4b36      	ldr	r3, [pc, #216]	@ (8005690 <MX_GPIO_Init+0x138>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SONIC_TRIG_Pin | PUMP_1_Pin, GPIO_PIN_RESET);
 80055c2:	2200      	movs	r2, #0
 80055c4:	f244 0140 	movw	r1, #16448	@ 0x4040
 80055c8:	4832      	ldr	r0, [pc, #200]	@ (8005694 <MX_GPIO_Init+0x13c>)
 80055ca:	f007 feef 	bl	800d3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_2_GPIO_Port, PUMP_2_Pin, GPIO_PIN_RESET);
 80055ce:	2200      	movs	r2, #0
 80055d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055d4:	4830      	ldr	r0, [pc, #192]	@ (8005698 <MX_GPIO_Init+0x140>)
 80055d6:	f007 fee9 	bl	800d3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SONIC_1_Pin SONIC_2_Pin SONIC_3_Pin */
  GPIO_InitStruct.Pin = SONIC_1_Pin | SONIC_2_Pin | SONIC_3_Pin;
 80055da:	f243 0304 	movw	r3, #12292	@ 0x3004
 80055de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e8:	f107 030c 	add.w	r3, r7, #12
 80055ec:	4619      	mov	r1, r3
 80055ee:	4829      	ldr	r0, [pc, #164]	@ (8005694 <MX_GPIO_Init+0x13c>)
 80055f0:	f007 fd40 	bl	800d074 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin | Button_1_Pin;
 80055f4:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80055f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80055fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	4619      	mov	r1, r3
 800560a:	4822      	ldr	r0, [pc, #136]	@ (8005694 <MX_GPIO_Init+0x13c>)
 800560c:	f007 fd32 	bl	800d074 <HAL_GPIO_Init>

  /*Configure GPIO pins : SONIC_TRIG_Pin PUMP_1_Pin */
  GPIO_InitStruct.Pin = SONIC_TRIG_Pin | PUMP_1_Pin;
 8005610:	f244 0340 	movw	r3, #16448	@ 0x4040
 8005614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005616:	2301      	movs	r3, #1
 8005618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561e:	2300      	movs	r3, #0
 8005620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005622:	f107 030c 	add.w	r3, r7, #12
 8005626:	4619      	mov	r1, r3
 8005628:	481a      	ldr	r0, [pc, #104]	@ (8005694 <MX_GPIO_Init+0x13c>)
 800562a:	f007 fd23 	bl	800d074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_2_Pin */
  GPIO_InitStruct.Pin = PUMP_2_Pin;
 800562e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005634:	2301      	movs	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PUMP_2_GPIO_Port, &GPIO_InitStruct);
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	4619      	mov	r1, r3
 8005646:	4814      	ldr	r0, [pc, #80]	@ (8005698 <MX_GPIO_Init+0x140>)
 8005648:	f007 fd14 	bl	800d074 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_IR_Pin */
  GPIO_InitStruct.Pin = RIGHT_IR_Pin;
 800564c:	2380      	movs	r3, #128	@ 0x80
 800564e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005650:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RIGHT_IR_GPIO_Port, &GPIO_InitStruct);
 800565a:	f107 030c 	add.w	r3, r7, #12
 800565e:	4619      	mov	r1, r3
 8005660:	480c      	ldr	r0, [pc, #48]	@ (8005694 <MX_GPIO_Init+0x13c>)
 8005662:	f007 fd07 	bl	800d074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	2017      	movs	r0, #23
 800566c:	f007 f95b 	bl	800c926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005670:	2017      	movs	r0, #23
 8005672:	f007 f974 	bl	800c95e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005676:	2200      	movs	r2, #0
 8005678:	2100      	movs	r1, #0
 800567a:	2028      	movs	r0, #40	@ 0x28
 800567c:	f007 f953 	bl	800c926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005680:	2028      	movs	r0, #40	@ 0x28
 8005682:	f007 f96c 	bl	800c95e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005686:	bf00      	nop
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	40020400 	.word	0x40020400
 8005698:	40020000 	.word	0x40020000

0800569c <HAL_GPIO_EXTI_Callback>:

volatile uint32_t lastButton1PressTime = 0;
volatile uint32_t lastButton2PressTime = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick(); // Get the current system tick (in milliseconds)
 80056a6:	f006 fc4b 	bl	800bf40 <HAL_GetTick>
 80056aa:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == Button_1_Pin)
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056b2:	d10c      	bne.n	80056ce <HAL_GPIO_EXTI_Callback+0x32>
    {
        // Debounce Button 1
        if ((currentTime - lastButton1PressTime) > DEBOUNCE_DELAY_MS)
 80056b4:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80056be:	d916      	bls.n	80056ee <HAL_GPIO_EXTI_Callback+0x52>
        {
            lastButton1PressTime = currentTime; // Update the last press time
 80056c0:	4a0d      	ldr	r2, [pc, #52]	@ (80056f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6013      	str	r3, [r2, #0]
            Button1 = 1;                        // Set Button1 flag
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <HAL_GPIO_EXTI_Callback+0x60>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
        {
            lastButton2PressTime = currentTime; // Update the last press time
            Button2 = 1;                        // Set Button2 flag
        }
    }
}
 80056cc:	e00f      	b.n	80056ee <HAL_GPIO_EXTI_Callback+0x52>
    else if (GPIO_Pin == Button_2_Pin)
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d4:	d10b      	bne.n	80056ee <HAL_GPIO_EXTI_Callback+0x52>
        if ((currentTime - lastButton2PressTime) > DEBOUNCE_DELAY_MS)
 80056d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <HAL_GPIO_EXTI_Callback+0x64>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2bc8      	cmp	r3, #200	@ 0xc8
 80056e0:	d905      	bls.n	80056ee <HAL_GPIO_EXTI_Callback+0x52>
            lastButton2PressTime = currentTime; // Update the last press time
 80056e2:	4a07      	ldr	r2, [pc, #28]	@ (8005700 <HAL_GPIO_EXTI_Callback+0x64>)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6013      	str	r3, [r2, #0]
            Button2 = 1;                        // Set Button2 flag
 80056e8:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <HAL_GPIO_EXTI_Callback+0x68>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	2000037c 	.word	0x2000037c
 80056fc:	20000374 	.word	0x20000374
 8005700:	20000380 	.word	0x20000380
 8005704:	20000378 	.word	0x20000378

08005708 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800570c:	b672      	cpsid	i
}
 800570e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <Error_Handler+0x8>

08005714 <setMotorSpeedR>:
extern TIM_HandleTypeDef htim1;

#define MAX_TIMER_COUNTS 3817
#define MAX_PWM_VALUE  255    // Full speed range (-255 to +255)

void setMotorSpeedR(int pwm) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
    pwm = limitPWM(pwm);  // Ensure PWM is within range
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f895 	bl	800584c <limitPWM>
 8005722:	6078      	str	r0, [r7, #4]

    if (pwm > 0) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	dd15      	ble.n	8005756 <setMotorSpeedR+0x42>
        // Ensure the motor runs by setting a minimum working PWM
        uint32_t dutyCycle = (pwm < MIN_WORKING_PWM) ? MIN_WORKING_PWM : pwm;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b14      	cmp	r3, #20
 800572e:	bfb8      	it	lt
 8005730:	2314      	movlt	r3, #20
 8005732:	60bb      	str	r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8005734:	4b1c      	ldr	r3, [pc, #112]	@ (80057a8 <setMotorSpeedR+0x94>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint32_t)(dutyCycle * MAX_TIMER_COUNTS / MAX_PWM_VALUE));
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f640 62e9 	movw	r2, #3817	@ 0xee9
 8005742:	fb03 f202 	mul.w	r2, r3, r2
 8005746:	4b18      	ldr	r3, [pc, #96]	@ (80057a8 <setMotorSpeedR+0x94>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4918      	ldr	r1, [pc, #96]	@ (80057ac <setMotorSpeedR+0x98>)
 800574c:	fba1 1202 	umull	r1, r2, r1, r2
 8005750:	09d2      	lsrs	r2, r2, #7
 8005752:	63da      	str	r2, [r3, #60]	@ 0x3c
    else {
        // If pwm == 0, stop the motor completely
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
    }
}
 8005754:	e024      	b.n	80057a0 <setMotorSpeedR+0x8c>
    else if (pwm < 0) {
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da19      	bge.n	8005790 <setMotorSpeedR+0x7c>
        uint32_t dutyCycle = (-pwm < MIN_WORKING_PWM) ? MIN_WORKING_PWM : -pwm;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f113 0f13 	cmn.w	r3, #19
 8005762:	da02      	bge.n	800576a <setMotorSpeedR+0x56>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	425b      	negs	r3, r3
 8005768:	e000      	b.n	800576c <setMotorSpeedR+0x58>
 800576a:	2314      	movs	r3, #20
 800576c:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); 
 800576e:	4b0e      	ldr	r3, [pc, #56]	@ (80057a8 <setMotorSpeedR+0x94>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	63da      	str	r2, [r3, #60]	@ 0x3c
          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint32_t)(dutyCycle * MAX_TIMER_COUNTS / MAX_PWM_VALUE));
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f640 62e9 	movw	r2, #3817	@ 0xee9
 800577c:	fb03 f202 	mul.w	r2, r3, r2
 8005780:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <setMotorSpeedR+0x94>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4909      	ldr	r1, [pc, #36]	@ (80057ac <setMotorSpeedR+0x98>)
 8005786:	fba1 1202 	umull	r1, r2, r1, r2
 800578a:	09d2      	lsrs	r2, r2, #7
 800578c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800578e:	e007      	b.n	80057a0 <setMotorSpeedR+0x8c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <setMotorSpeedR+0x94>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2200      	movs	r2, #0
 8005796:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8005798:	4b03      	ldr	r3, [pc, #12]	@ (80057a8 <setMotorSpeedR+0x94>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000254 	.word	0x20000254
 80057ac:	80808081 	.word	0x80808081

080057b0 <setMotorSpeedL>:

void setMotorSpeedL(int pwm) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
    pwm = limitPWM(pwm);  // Ensure PWM is within range
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f847 	bl	800584c <limitPWM>
 80057be:	6078      	str	r0, [r7, #4]

    if (pwm > 0) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	dd15      	ble.n	80057f2 <setMotorSpeedL+0x42>
        // Ensure the motor runs by setting a minimum working PWM
        uint32_t dutyCycle = (pwm < MIN_WORKING_PWM) ? MIN_WORKING_PWM : pwm;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b14      	cmp	r3, #20
 80057ca:	bfb8      	it	lt
 80057cc:	2314      	movlt	r3, #20
 80057ce:	60bb      	str	r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);  // Stop reverse
 80057d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005844 <setMotorSpeedL+0x94>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2200      	movs	r2, #0
 80057d6:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)(dutyCycle * MAX_TIMER_COUNTS / MAX_PWM_VALUE));
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f640 62e9 	movw	r2, #3817	@ 0xee9
 80057de:	fb03 f202 	mul.w	r2, r3, r2
 80057e2:	4b18      	ldr	r3, [pc, #96]	@ (8005844 <setMotorSpeedL+0x94>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4918      	ldr	r1, [pc, #96]	@ (8005848 <setMotorSpeedL+0x98>)
 80057e8:	fba1 1202 	umull	r1, r2, r1, r2
 80057ec:	09d2      	lsrs	r2, r2, #7
 80057ee:	639a      	str	r2, [r3, #56]	@ 0x38
    else {
        // If pwm == 0, stop the motor completely
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
    }
}
 80057f0:	e024      	b.n	800583c <setMotorSpeedL+0x8c>
    else if (pwm < 0) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da19      	bge.n	800582c <setMotorSpeedL+0x7c>
        uint32_t dutyCycle = (-pwm < MIN_WORKING_PWM) ? MIN_WORKING_PWM : -pwm;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f113 0f13 	cmn.w	r3, #19
 80057fe:	da02      	bge.n	8005806 <setMotorSpeedL+0x56>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	425b      	negs	r3, r3
 8005804:	e000      	b.n	8005808 <setMotorSpeedL+0x58>
 8005806:	2314      	movs	r3, #20
 8005808:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);  // Stop forward
 800580a:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <setMotorSpeedL+0x94>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)(dutyCycle * MAX_TIMER_COUNTS / MAX_PWM_VALUE));
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f640 62e9 	movw	r2, #3817	@ 0xee9
 8005818:	fb03 f202 	mul.w	r2, r3, r2
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <setMotorSpeedL+0x94>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4909      	ldr	r1, [pc, #36]	@ (8005848 <setMotorSpeedL+0x98>)
 8005822:	fba1 1202 	umull	r1, r2, r1, r2
 8005826:	09d2      	lsrs	r2, r2, #7
 8005828:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800582a:	e007      	b.n	800583c <setMotorSpeedL+0x8c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <setMotorSpeedL+0x94>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2200      	movs	r2, #0
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8005834:	4b03      	ldr	r3, [pc, #12]	@ (8005844 <setMotorSpeedL+0x94>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2200      	movs	r2, #0
 800583a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000254 	.word	0x20000254
 8005848:	80808081 	.word	0x80808081

0800584c <limitPWM>:
int limitPWM(int pwm) {
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
    if (pwm > MAX_PWM_VALUE) return MAX_PWM_VALUE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2bff      	cmp	r3, #255	@ 0xff
 8005858:	dd01      	ble.n	800585e <limitPWM+0x12>
 800585a:	23ff      	movs	r3, #255	@ 0xff
 800585c:	e007      	b.n	800586e <limitPWM+0x22>
    if (pwm < -MAX_PWM_VALUE) return -MAX_PWM_VALUE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f113 0fff 	cmn.w	r3, #255	@ 0xff
 8005864:	da02      	bge.n	800586c <limitPWM+0x20>
 8005866:	f06f 03fe 	mvn.w	r3, #254	@ 0xfe
 800586a:	e000      	b.n	800586e <limitPWM+0x22>
    return pwm;
 800586c:	687b      	ldr	r3, [r7, #4]
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <m_stopLR>:
void m_stopLR() {
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8005880:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <m_stopLR+0x30>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2200      	movs	r2, #0
 8005886:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8005888:	4b08      	ldr	r3, [pc, #32]	@ (80058ac <m_stopLR+0x30>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8005890:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <m_stopLR+0x30>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2200      	movs	r2, #0
 8005896:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <m_stopLR+0x30>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2200      	movs	r2, #0
 800589e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000254 	.word	0x20000254

080058b0 <u8x8_gpio_and_delay_stm32>:
extern I2C_HandleTypeDef hi2c1;
// OLED display instance
u8g2_t u8g2;
// GPIO and delay callback for u8g2
uint8_t u8x8_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	72fb      	strb	r3, [r7, #11]
 80058be:	4613      	mov	r3, r2
 80058c0:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	2b29      	cmp	r3, #41	@ 0x29
 80058c6:	d104      	bne.n	80058d2 <u8x8_gpio_and_delay_stm32+0x22>
    {
    case U8X8_MSG_DELAY_MILLI:
        HAL_Delay(arg_int);
 80058c8:	7abb      	ldrb	r3, [r7, #10]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f006 fb44 	bl	800bf58 <HAL_Delay>
        break;
 80058d0:	e000      	b.n	80058d4 <u8x8_gpio_and_delay_stm32+0x24>
    default:
        break;
 80058d2:	bf00      	nop
    }
    return 1;
 80058d4:	2301      	movs	r3, #1
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <u8x8_byte_hw_i2c_stm32>:
// I2C communication callback for u8g2
uint8_t u8x8_byte_hw_i2c_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	72fb      	strb	r3, [r7, #11]
 80058ee:	4613      	mov	r3, r2
 80058f0:	72bb      	strb	r3, [r7, #10]
    static uint8_t buffer[32];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg)
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	3b14      	subs	r3, #20
 80058f6:	2b0c      	cmp	r3, #12
 80058f8:	d845      	bhi.n	8005986 <u8x8_byte_hw_i2c_stm32+0xa6>
 80058fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <u8x8_byte_hw_i2c_stm32+0x20>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	0800598b 	.word	0x0800598b
 8005904:	08005987 	.word	0x08005987
 8005908:	08005987 	.word	0x08005987
 800590c:	08005935 	.word	0x08005935
 8005910:	08005965 	.word	0x08005965
 8005914:	0800596d 	.word	0x0800596d
 8005918:	08005987 	.word	0x08005987
 800591c:	08005987 	.word	0x08005987
 8005920:	08005987 	.word	0x08005987
 8005924:	08005987 	.word	0x08005987
 8005928:	08005987 	.word	0x08005987
 800592c:	08005987 	.word	0x08005987
 8005930:	0800598b 	.word	0x0800598b
    {
    case U8X8_MSG_BYTE_SEND:
        data = (uint8_t *)arg_ptr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	617b      	str	r3, [r7, #20]
        while (arg_int > 0)
 8005938:	e010      	b.n	800595c <u8x8_byte_hw_i2c_stm32+0x7c>
        {
            buffer[buf_idx++] = *data;
 800593a:	4b17      	ldr	r3, [pc, #92]	@ (8005998 <u8x8_byte_hw_i2c_stm32+0xb8>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	b2d1      	uxtb	r1, r2
 8005942:	4a15      	ldr	r2, [pc, #84]	@ (8005998 <u8x8_byte_hw_i2c_stm32+0xb8>)
 8005944:	7011      	strb	r1, [r2, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	7819      	ldrb	r1, [r3, #0]
 800594c:	4b13      	ldr	r3, [pc, #76]	@ (800599c <u8x8_byte_hw_i2c_stm32+0xbc>)
 800594e:	5499      	strb	r1, [r3, r2]
            data++;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	3301      	adds	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
            arg_int--;
 8005956:	7abb      	ldrb	r3, [r7, #10]
 8005958:	3b01      	subs	r3, #1
 800595a:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0)
 800595c:	7abb      	ldrb	r3, [r7, #10]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1eb      	bne.n	800593a <u8x8_byte_hw_i2c_stm32+0x5a>
        }
        break;
 8005962:	e013      	b.n	800598c <u8x8_byte_hw_i2c_stm32+0xac>
    case U8X8_MSG_BYTE_INIT:
        break;
    case U8X8_MSG_BYTE_SET_DC:
        break;
    case U8X8_MSG_BYTE_START_TRANSFER:
        buf_idx = 0;
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <u8x8_byte_hw_i2c_stm32+0xb8>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
        break;
 800596a:	e00f      	b.n	800598c <u8x8_byte_hw_i2c_stm32+0xac>
    case U8X8_MSG_BYTE_END_TRANSFER:
        HAL_I2C_Master_Transmit(&hi2c1, (0x3C << 1), buffer, buf_idx, HAL_MAX_DELAY);
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <u8x8_byte_hw_i2c_stm32+0xb8>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	4a08      	ldr	r2, [pc, #32]	@ (800599c <u8x8_byte_hw_i2c_stm32+0xbc>)
 800597c:	2178      	movs	r1, #120	@ 0x78
 800597e:	4808      	ldr	r0, [pc, #32]	@ (80059a0 <u8x8_byte_hw_i2c_stm32+0xc0>)
 8005980:	f007 fe8a 	bl	800d698 <HAL_I2C_Master_Transmit>
        break;
 8005984:	e002      	b.n	800598c <u8x8_byte_hw_i2c_stm32+0xac>
    default:
        return 0;
 8005986:	2300      	movs	r3, #0
 8005988:	e001      	b.n	800598e <u8x8_byte_hw_i2c_stm32+0xae>
        break;
 800598a:	bf00      	nop
    }
    return 1;
 800598c:	2301      	movs	r3, #1
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000431 	.word	0x20000431
 800599c:	20000434 	.word	0x20000434
 80059a0:	20000200 	.word	0x20000200

080059a4 <OLED_Init>:
{
    return out_min + (uint8_t)((float)(value - in_min) * (float)(out_max - out_min) / (float)(in_max - in_min));
}
// Initialize the OLED display
void OLED_Init(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
    setTCAChannel(4);
 80059a8:	2004      	movs	r0, #4
 80059aa:	f7ff f9fd 	bl	8004da8 <setTCAChannel>
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_hw_i2c_stm32, u8x8_gpio_and_delay_stm32);
 80059ae:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <OLED_Init+0x28>)
 80059b0:	4a07      	ldr	r2, [pc, #28]	@ (80059d0 <OLED_Init+0x2c>)
 80059b2:	4908      	ldr	r1, [pc, #32]	@ (80059d4 <OLED_Init+0x30>)
 80059b4:	4808      	ldr	r0, [pc, #32]	@ (80059d8 <OLED_Init+0x34>)
 80059b6:	f004 fc69 	bl	800a28c <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
    u8g2_InitDisplay(&u8g2);
 80059ba:	4807      	ldr	r0, [pc, #28]	@ (80059d8 <OLED_Init+0x34>)
 80059bc:	f006 f992 	bl	800bce4 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 80059c0:	2100      	movs	r1, #0
 80059c2:	4805      	ldr	r0, [pc, #20]	@ (80059d8 <OLED_Init+0x34>)
 80059c4:	f006 f99d 	bl	800bd02 <u8x8_SetPowerSave>
}
 80059c8:	bf00      	nop
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	080058b1 	.word	0x080058b1
 80059d0:	080058e1 	.word	0x080058e1
 80059d4:	08012d40 	.word	0x08012d40
 80059d8:	2000039c 	.word	0x2000039c

080059dc <OLED_Name>:
// Clear the OLED display
void OLED_Name(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 80059e2:	2004      	movs	r0, #4
 80059e4:	f7ff f9e0 	bl	8004da8 <setTCAChannel>
    static const uint8_t image_KDU_logo_bits[] = {0x00, 0x18, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x3c, 0x00, 0x30, 0x7e, 0x0e, 0xc0, 0x7e, 0x03, 0x00, 0xbd, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x3e, 0x00, 0xf0, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x3f, 0xc0, 0xff, 0x03, 0x3c, 0x7f, 0x3e, 0x3c, 0xff, 0x3c, 0x0c, 0x7e, 0x34, 0xe4, 0xbd, 0x27, 0xe0, 0xdb, 0x07, 0x20, 0xff, 0x04, 0x00, 0x1c, 0x00};
    u8g2_ClearBuffer(&u8g2);
 80059e8:	481a      	ldr	r0, [pc, #104]	@ (8005a54 <OLED_Name+0x78>)
 80059ea:	f004 fbbe 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 80059ee:	2101      	movs	r1, #1
 80059f0:	4818      	ldr	r0, [pc, #96]	@ (8005a54 <OLED_Name+0x78>)
 80059f2:	f004 faa1 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 80059f6:	2101      	movs	r1, #1
 80059f8:	4816      	ldr	r0, [pc, #88]	@ (8005a54 <OLED_Name+0x78>)
 80059fa:	f005 f8a6 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 80059fe:	2102      	movs	r1, #2
 8005a00:	4814      	ldr	r0, [pc, #80]	@ (8005a54 <OLED_Name+0x78>)
 8005a02:	f005 fb4a 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005a06:	4914      	ldr	r1, [pc, #80]	@ (8005a58 <OLED_Name+0x7c>)
 8005a08:	4812      	ldr	r0, [pc, #72]	@ (8005a54 <OLED_Name+0x78>)
 8005a0a:	f005 f9ff 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 16, 24, "NUCLEO-5");
 8005a0e:	4b13      	ldr	r3, [pc, #76]	@ (8005a5c <OLED_Name+0x80>)
 8005a10:	2218      	movs	r2, #24
 8005a12:	2110      	movs	r1, #16
 8005a14:	480f      	ldr	r0, [pc, #60]	@ (8005a54 <OLED_Name+0x78>)
 8005a16:	f005 f957 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 0, 0, 128, 33);
 8005a1a:	2321      	movs	r3, #33	@ 0x21
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	2200      	movs	r2, #0
 8005a22:	2100      	movs	r1, #0
 8005a24:	480b      	ldr	r0, [pc, #44]	@ (8005a54 <OLED_Name+0x78>)
 8005a26:	f004 fb6a 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SetDrawColor(&u8g2, 1);
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	4809      	ldr	r0, [pc, #36]	@ (8005a54 <OLED_Name+0x78>)
 8005a2e:	f005 fb34 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_DrawXBM(&u8g2, 52, 40, 24, 19, image_KDU_logo_bits);
 8005a32:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <OLED_Name+0x84>)
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	2313      	movs	r3, #19
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	2318      	movs	r3, #24
 8005a3c:	2228      	movs	r2, #40	@ 0x28
 8005a3e:	2134      	movs	r1, #52	@ 0x34
 8005a40:	4804      	ldr	r0, [pc, #16]	@ (8005a54 <OLED_Name+0x78>)
 8005a42:	f004 fb19 	bl	800a078 <u8g2_DrawXBM>

    u8g2_SendBuffer(&u8g2);
 8005a46:	4803      	ldr	r0, [pc, #12]	@ (8005a54 <OLED_Name+0x78>)
 8005a48:	f004 fc02 	bl	800a250 <u8g2_SendBuffer>
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	2000039c 	.word	0x2000039c
 8005a58:	08011800 	.word	0x08011800
 8005a5c:	080111e0 	.word	0x080111e0
 8005a60:	08011258 	.word	0x08011258

08005a64 <TASK_1_OLED>:
    u8g2_DrawBox(&u8g2, 0, 17, 128, 30);
    u8g2_SendBuffer(&u8g2);
}

void TASK_1_OLED(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8005a6a:	2004      	movs	r0, #4
 8005a6c:	f7ff f99c 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005a70:	4813      	ldr	r0, [pc, #76]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005a72:	f004 fb7a 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005a76:	2101      	movs	r1, #1
 8005a78:	4811      	ldr	r0, [pc, #68]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005a7a:	f004 fa5d 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005a7e:	2101      	movs	r1, #1
 8005a80:	480f      	ldr	r0, [pc, #60]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005a82:	f005 f862 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 8005a86:	2102      	movs	r1, #2
 8005a88:	480d      	ldr	r0, [pc, #52]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005a8a:	f005 fb06 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005a8e:	490d      	ldr	r1, [pc, #52]	@ (8005ac4 <TASK_1_OLED+0x60>)
 8005a90:	480b      	ldr	r0, [pc, #44]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005a92:	f005 f9bb 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 28, 39, "TASK-1");
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <TASK_1_OLED+0x64>)
 8005a98:	2227      	movs	r2, #39	@ 0x27
 8005a9a:	211c      	movs	r1, #28
 8005a9c:	4808      	ldr	r0, [pc, #32]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005a9e:	f005 f913 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 0, 17, 128, 30);
 8005aa2:	231e      	movs	r3, #30
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2380      	movs	r3, #128	@ 0x80
 8005aa8:	2211      	movs	r2, #17
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4804      	ldr	r0, [pc, #16]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005aae:	f004 fb26 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SendBuffer(&u8g2);
 8005ab2:	4803      	ldr	r0, [pc, #12]	@ (8005ac0 <TASK_1_OLED+0x5c>)
 8005ab4:	f004 fbcc 	bl	800a250 <u8g2_SendBuffer>
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	2000039c 	.word	0x2000039c
 8005ac4:	08011800 	.word	0x08011800
 8005ac8:	080111f8 	.word	0x080111f8

08005acc <TASK_2_OLED>:
void TASK_2_OLED(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8005ad2:	2004      	movs	r0, #4
 8005ad4:	f7ff f968 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005ad8:	4813      	ldr	r0, [pc, #76]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005ada:	f004 fb46 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4811      	ldr	r0, [pc, #68]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005ae2:	f004 fa29 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	480f      	ldr	r0, [pc, #60]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005aea:	f005 f82e 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 8005aee:	2102      	movs	r1, #2
 8005af0:	480d      	ldr	r0, [pc, #52]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005af2:	f005 fad2 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005af6:	490d      	ldr	r1, [pc, #52]	@ (8005b2c <TASK_2_OLED+0x60>)
 8005af8:	480b      	ldr	r0, [pc, #44]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005afa:	f005 f987 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 28, 39, "TASK-2");
 8005afe:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <TASK_2_OLED+0x64>)
 8005b00:	2227      	movs	r2, #39	@ 0x27
 8005b02:	211c      	movs	r1, #28
 8005b04:	4808      	ldr	r0, [pc, #32]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005b06:	f005 f8df 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 0, 17, 128, 30);
 8005b0a:	231e      	movs	r3, #30
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2380      	movs	r3, #128	@ 0x80
 8005b10:	2211      	movs	r2, #17
 8005b12:	2100      	movs	r1, #0
 8005b14:	4804      	ldr	r0, [pc, #16]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005b16:	f004 faf2 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SendBuffer(&u8g2);
 8005b1a:	4803      	ldr	r0, [pc, #12]	@ (8005b28 <TASK_2_OLED+0x5c>)
 8005b1c:	f004 fb98 	bl	800a250 <u8g2_SendBuffer>
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	2000039c 	.word	0x2000039c
 8005b2c:	08011800 	.word	0x08011800
 8005b30:	08011200 	.word	0x08011200

08005b34 <TASK_3_OLED>:
void TASK_3_OLED(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8005b3a:	2004      	movs	r0, #4
 8005b3c:	f7ff f934 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005b40:	4813      	ldr	r0, [pc, #76]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b42:	f004 fb12 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005b46:	2101      	movs	r1, #1
 8005b48:	4811      	ldr	r0, [pc, #68]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b4a:	f004 f9f5 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005b4e:	2101      	movs	r1, #1
 8005b50:	480f      	ldr	r0, [pc, #60]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b52:	f004 fffa 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 8005b56:	2102      	movs	r1, #2
 8005b58:	480d      	ldr	r0, [pc, #52]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b5a:	f005 fa9e 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005b5e:	490d      	ldr	r1, [pc, #52]	@ (8005b94 <TASK_3_OLED+0x60>)
 8005b60:	480b      	ldr	r0, [pc, #44]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b62:	f005 f953 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 28, 39, "TASK-3");
 8005b66:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <TASK_3_OLED+0x64>)
 8005b68:	2227      	movs	r2, #39	@ 0x27
 8005b6a:	211c      	movs	r1, #28
 8005b6c:	4808      	ldr	r0, [pc, #32]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b6e:	f005 f8ab 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 0, 17, 128, 30);
 8005b72:	231e      	movs	r3, #30
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2380      	movs	r3, #128	@ 0x80
 8005b78:	2211      	movs	r2, #17
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4804      	ldr	r0, [pc, #16]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b7e:	f004 fabe 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SendBuffer(&u8g2);
 8005b82:	4803      	ldr	r0, [pc, #12]	@ (8005b90 <TASK_3_OLED+0x5c>)
 8005b84:	f004 fb64 	bl	800a250 <u8g2_SendBuffer>
}
 8005b88:	bf00      	nop
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000039c 	.word	0x2000039c
 8005b94:	08011800 	.word	0x08011800
 8005b98:	08011208 	.word	0x08011208

08005b9c <TASK_4_OLED>:
void TASK_4_OLED(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8005ba2:	2004      	movs	r0, #4
 8005ba4:	f7ff f900 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005ba8:	4813      	ldr	r0, [pc, #76]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005baa:	f004 fade 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4811      	ldr	r0, [pc, #68]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005bb2:	f004 f9c1 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	480f      	ldr	r0, [pc, #60]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005bba:	f004 ffc6 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	480d      	ldr	r0, [pc, #52]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005bc2:	f005 fa6a 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005bc6:	490d      	ldr	r1, [pc, #52]	@ (8005bfc <TASK_4_OLED+0x60>)
 8005bc8:	480b      	ldr	r0, [pc, #44]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005bca:	f005 f91f 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 28, 39, "TASK-4");
 8005bce:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <TASK_4_OLED+0x64>)
 8005bd0:	2227      	movs	r2, #39	@ 0x27
 8005bd2:	211c      	movs	r1, #28
 8005bd4:	4808      	ldr	r0, [pc, #32]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005bd6:	f005 f877 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 0, 17, 128, 30);
 8005bda:	231e      	movs	r3, #30
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	2380      	movs	r3, #128	@ 0x80
 8005be0:	2211      	movs	r2, #17
 8005be2:	2100      	movs	r1, #0
 8005be4:	4804      	ldr	r0, [pc, #16]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005be6:	f004 fa8a 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SendBuffer(&u8g2);
 8005bea:	4803      	ldr	r0, [pc, #12]	@ (8005bf8 <TASK_4_OLED+0x5c>)
 8005bec:	f004 fb30 	bl	800a250 <u8g2_SendBuffer>
}
 8005bf0:	bf00      	nop
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	2000039c 	.word	0x2000039c
 8005bfc:	08011800 	.word	0x08011800
 8005c00:	08011210 	.word	0x08011210

08005c04 <TASK_5_OLED>:
void TASK_5_OLED(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8005c0a:	2004      	movs	r0, #4
 8005c0c:	f7ff f8cc 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005c10:	4813      	ldr	r0, [pc, #76]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c12:	f004 faaa 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005c16:	2101      	movs	r1, #1
 8005c18:	4811      	ldr	r0, [pc, #68]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c1a:	f004 f98d 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005c1e:	2101      	movs	r1, #1
 8005c20:	480f      	ldr	r0, [pc, #60]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c22:	f004 ff92 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 8005c26:	2102      	movs	r1, #2
 8005c28:	480d      	ldr	r0, [pc, #52]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c2a:	f005 fa36 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005c2e:	490d      	ldr	r1, [pc, #52]	@ (8005c64 <TASK_5_OLED+0x60>)
 8005c30:	480b      	ldr	r0, [pc, #44]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c32:	f005 f8eb 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 28, 39, "TASK-5");
 8005c36:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <TASK_5_OLED+0x64>)
 8005c38:	2227      	movs	r2, #39	@ 0x27
 8005c3a:	211c      	movs	r1, #28
 8005c3c:	4808      	ldr	r0, [pc, #32]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c3e:	f005 f843 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 0, 17, 128, 30);
 8005c42:	231e      	movs	r3, #30
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2380      	movs	r3, #128	@ 0x80
 8005c48:	2211      	movs	r2, #17
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4804      	ldr	r0, [pc, #16]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c4e:	f004 fa56 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SendBuffer(&u8g2);
 8005c52:	4803      	ldr	r0, [pc, #12]	@ (8005c60 <TASK_5_OLED+0x5c>)
 8005c54:	f004 fafc 	bl	800a250 <u8g2_SendBuffer>
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	2000039c 	.word	0x2000039c
 8005c64:	08011800 	.word	0x08011800
 8005c68:	08011218 	.word	0x08011218

08005c6c <TASK_6_OLED>:
void TASK_6_OLED(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8005c72:	2004      	movs	r0, #4
 8005c74:	f7ff f898 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005c78:	4813      	ldr	r0, [pc, #76]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005c7a:	f004 fa76 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005c7e:	2101      	movs	r1, #1
 8005c80:	4811      	ldr	r0, [pc, #68]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005c82:	f004 f959 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005c86:	2101      	movs	r1, #1
 8005c88:	480f      	ldr	r0, [pc, #60]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005c8a:	f004 ff5e 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 8005c8e:	2102      	movs	r1, #2
 8005c90:	480d      	ldr	r0, [pc, #52]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005c92:	f005 fa02 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005c96:	490d      	ldr	r1, [pc, #52]	@ (8005ccc <TASK_6_OLED+0x60>)
 8005c98:	480b      	ldr	r0, [pc, #44]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005c9a:	f005 f8b7 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 28, 39, "TASK-6");
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <TASK_6_OLED+0x64>)
 8005ca0:	2227      	movs	r2, #39	@ 0x27
 8005ca2:	211c      	movs	r1, #28
 8005ca4:	4808      	ldr	r0, [pc, #32]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005ca6:	f005 f80f 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 0, 17, 128, 30);
 8005caa:	231e      	movs	r3, #30
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	2380      	movs	r3, #128	@ 0x80
 8005cb0:	2211      	movs	r2, #17
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4804      	ldr	r0, [pc, #16]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005cb6:	f004 fa22 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SendBuffer(&u8g2);
 8005cba:	4803      	ldr	r0, [pc, #12]	@ (8005cc8 <TASK_6_OLED+0x5c>)
 8005cbc:	f004 fac8 	bl	800a250 <u8g2_SendBuffer>
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	2000039c 	.word	0x2000039c
 8005ccc:	08011800 	.word	0x08011800
 8005cd0:	08011220 	.word	0x08011220

08005cd4 <display_TASK>:
void display_TASK(int taskNumber)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	6078      	str	r0, [r7, #4]
    setTCAChannel(4);
 8005cdc:	2004      	movs	r0, #4
 8005cde:	f7ff f863 	bl	8004da8 <setTCAChannel>

    static const uint8_t image_KDU_logo_bits[] = {0x00, 0x18, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x3c, 0x00, 0x30, 0x7e, 0x0e, 0xc0, 0x7e, 0x03, 0x00, 0xbd, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x3e, 0x00, 0xf0, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x3f, 0xc0, 0xff, 0x03, 0x3c, 0x7f, 0x3e, 0x3c, 0xff, 0x3c, 0x0c, 0x7e, 0x34, 0xe4, 0xbd, 0x27, 0xe0, 0xdb, 0x07, 0x20, 0xff, 0x04, 0x00, 0x1c, 0x00};
    char taskString[10]; // Buffer to hold the task string

    // Format the task string dynamically
    snprintf(taskString, sizeof(taskString), "TASK %d", taskNumber);
 8005ce2:	f107 000c 	add.w	r0, r7, #12
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	@ (8005d84 <display_TASK+0xb0>)
 8005cea:	210a      	movs	r1, #10
 8005cec:	f00a fdb8 	bl	8010860 <sniprintf>
    u8g2_ClearBuffer(&u8g2);
 8005cf0:	4825      	ldr	r0, [pc, #148]	@ (8005d88 <display_TASK+0xb4>)
 8005cf2:	f004 fa3a 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4823      	ldr	r0, [pc, #140]	@ (8005d88 <display_TASK+0xb4>)
 8005cfa:	f004 f91d 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4821      	ldr	r0, [pc, #132]	@ (8005d88 <display_TASK+0xb4>)
 8005d02:	f004 ff22 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_SetDrawColor(&u8g2, 2);
 8005d06:	2102      	movs	r1, #2
 8005d08:	481f      	ldr	r0, [pc, #124]	@ (8005d88 <display_TASK+0xb4>)
 8005d0a:	f005 f9c6 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont22_tr);
 8005d0e:	491f      	ldr	r1, [pc, #124]	@ (8005d8c <display_TASK+0xb8>)
 8005d10:	481d      	ldr	r0, [pc, #116]	@ (8005d88 <display_TASK+0xb4>)
 8005d12:	f005 f87b 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 16, 24, "NUCLEO-5");
 8005d16:	4b1e      	ldr	r3, [pc, #120]	@ (8005d90 <display_TASK+0xbc>)
 8005d18:	2218      	movs	r2, #24
 8005d1a:	2110      	movs	r1, #16
 8005d1c:	481a      	ldr	r0, [pc, #104]	@ (8005d88 <display_TASK+0xb4>)
 8005d1e:	f004 ffd3 	bl	800acc8 <u8g2_DrawStr>

    u8g2_DrawBox(&u8g2, 1, 0, 128, 32);
 8005d22:	2320      	movs	r3, #32
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2380      	movs	r3, #128	@ 0x80
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4816      	ldr	r0, [pc, #88]	@ (8005d88 <display_TASK+0xb4>)
 8005d2e:	f004 f9e6 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SetFont(&u8g2, u8g2_font_profont17_tr);
 8005d32:	4918      	ldr	r1, [pc, #96]	@ (8005d94 <display_TASK+0xc0>)
 8005d34:	4814      	ldr	r0, [pc, #80]	@ (8005d88 <display_TASK+0xb4>)
 8005d36:	f005 f869 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 66, 54, taskString);
 8005d3a:	f107 030c 	add.w	r3, r7, #12
 8005d3e:	2236      	movs	r2, #54	@ 0x36
 8005d40:	2142      	movs	r1, #66	@ 0x42
 8005d42:	4811      	ldr	r0, [pc, #68]	@ (8005d88 <display_TASK+0xb4>)
 8005d44:	f004 ffc0 	bl	800acc8 <u8g2_DrawStr>

    u8g2_SetDrawColor(&u8g2, 1);
 8005d48:	2101      	movs	r1, #1
 8005d4a:	480f      	ldr	r0, [pc, #60]	@ (8005d88 <display_TASK+0xb4>)
 8005d4c:	f005 f9a5 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_DrawXBM(&u8g2, 8, 39, 24, 19, image_KDU_logo_bits);
 8005d50:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <display_TASK+0xc4>)
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	2313      	movs	r3, #19
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2318      	movs	r3, #24
 8005d5a:	2227      	movs	r2, #39	@ 0x27
 8005d5c:	2108      	movs	r1, #8
 8005d5e:	480a      	ldr	r0, [pc, #40]	@ (8005d88 <display_TASK+0xb4>)
 8005d60:	f004 f98a 	bl	800a078 <u8g2_DrawXBM>

    u8g2_DrawLine(&u8g2, 0, 0, 0, 0);
 8005d64:	2300      	movs	r3, #0
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4806      	ldr	r0, [pc, #24]	@ (8005d88 <display_TASK+0xb4>)
 8005d70:	f005 fa08 	bl	800b184 <u8g2_DrawLine>

    u8g2_SendBuffer(&u8g2);
 8005d74:	4804      	ldr	r0, [pc, #16]	@ (8005d88 <display_TASK+0xb4>)
 8005d76:	f004 fa6b 	bl	800a250 <u8g2_SendBuffer>
}
 8005d7a:	bf00      	nop
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	08011228 	.word	0x08011228
 8005d88:	2000039c 	.word	0x2000039c
 8005d8c:	08011800 	.word	0x08011800
 8005d90:	080111e0 	.word	0x080111e0
 8005d94:	080112f8 	.word	0x080112f8
 8005d98:	08011294 	.word	0x08011294

08005d9c <display_barcode_decimal>:
void display_barcode_decimal(int decimalValue)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	6078      	str	r0, [r7, #4]
    char decimalString[10];                                             // Buffer to hold the decimal string
    snprintf(decimalString, sizeof(decimalString), "%d", decimalValue); // Format the decimal value
 8005da4:	f107 000c 	add.w	r0, r7, #12
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a20      	ldr	r2, [pc, #128]	@ (8005e2c <display_barcode_decimal+0x90>)
 8005dac:	210a      	movs	r1, #10
 8005dae:	f00a fd57 	bl	8010860 <sniprintf>
    setTCAChannel(4);
 8005db2:	2004      	movs	r0, #4
 8005db4:	f7fe fff8 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005db8:	481d      	ldr	r0, [pc, #116]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005dba:	f004 f9d6 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	481b      	ldr	r0, [pc, #108]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005dc2:	f004 f8b9 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4819      	ldr	r0, [pc, #100]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005dca:	f004 febe 	bl	800ab4a <u8g2_SetFontMode>
    u8g2_SetDrawColor(&u8g2, 2);
 8005dce:	2102      	movs	r1, #2
 8005dd0:	4817      	ldr	r0, [pc, #92]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005dd2:	f005 f962 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_DrawBox(&u8g2, 0, 0, 128, 64);
 8005dd6:	2340      	movs	r3, #64	@ 0x40
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2380      	movs	r3, #128	@ 0x80
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2100      	movs	r1, #0
 8005de0:	4813      	ldr	r0, [pc, #76]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005de2:	f004 f98c 	bl	800a0fe <u8g2_DrawBox>
    u8g2_SetFont(&u8g2, u8g2_font_inb57_mn);
 8005de6:	4913      	ldr	r1, [pc, #76]	@ (8005e34 <display_barcode_decimal+0x98>)
 8005de8:	4811      	ldr	r0, [pc, #68]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005dea:	f005 f80f 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 14, 60, decimalString); // Display the decimal value
 8005dee:	f107 030c 	add.w	r3, r7, #12
 8005df2:	223c      	movs	r2, #60	@ 0x3c
 8005df4:	210e      	movs	r1, #14
 8005df6:	480e      	ldr	r0, [pc, #56]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005df8:	f004 ff66 	bl	800acc8 <u8g2_DrawStr>
    u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8005dfc:	490e      	ldr	r1, [pc, #56]	@ (8005e38 <display_barcode_decimal+0x9c>)
 8005dfe:	480c      	ldr	r0, [pc, #48]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005e00:	f005 f804 	bl	800ae0c <u8g2_SetFont>
    u8g2_SetDrawColor(&u8g2, 1);
 8005e04:	2101      	movs	r1, #1
 8005e06:	480a      	ldr	r0, [pc, #40]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005e08:	f005 f947 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_DrawLine(&u8g2, 0, 0, 0, 0);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	2300      	movs	r3, #0
 8005e12:	2200      	movs	r2, #0
 8005e14:	2100      	movs	r1, #0
 8005e16:	4806      	ldr	r0, [pc, #24]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005e18:	f005 f9b4 	bl	800b184 <u8g2_DrawLine>
    u8g2_SendBuffer(&u8g2);
 8005e1c:	4804      	ldr	r0, [pc, #16]	@ (8005e30 <display_barcode_decimal+0x94>)
 8005e1e:	f004 fa17 	bl	800a250 <u8g2_SendBuffer>
}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	08011230 	.word	0x08011230
 8005e30:	2000039c 	.word	0x2000039c
 8005e34:	080126e4 	.word	0x080126e4
 8005e38:	08011ea8 	.word	0x08011ea8

08005e3c <alldone>:
void alldone(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8005e42:	2004      	movs	r0, #4
 8005e44:	f7fe ffb0 	bl	8004da8 <setTCAChannel>
    u8g2_ClearBuffer(&u8g2);
 8005e48:	481e      	ldr	r0, [pc, #120]	@ (8005ec4 <alldone+0x88>)
 8005e4a:	f004 f98e 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 8005e4e:	2101      	movs	r1, #1
 8005e50:	481c      	ldr	r0, [pc, #112]	@ (8005ec4 <alldone+0x88>)
 8005e52:	f004 f871 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8005e56:	2101      	movs	r1, #1
 8005e58:	481a      	ldr	r0, [pc, #104]	@ (8005ec4 <alldone+0x88>)
 8005e5a:	f004 fe76 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_DrawBox(&u8g2, 0, 0, 128, 64);
 8005e5e:	2340      	movs	r3, #64	@ 0x40
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2380      	movs	r3, #128	@ 0x80
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	4816      	ldr	r0, [pc, #88]	@ (8005ec4 <alldone+0x88>)
 8005e6a:	f004 f948 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SetDrawColor(&u8g2, 2);
 8005e6e:	2102      	movs	r1, #2
 8005e70:	4814      	ldr	r0, [pc, #80]	@ (8005ec4 <alldone+0x88>)
 8005e72:	f005 f912 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont17_tr);
 8005e76:	4914      	ldr	r1, [pc, #80]	@ (8005ec8 <alldone+0x8c>)
 8005e78:	4812      	ldr	r0, [pc, #72]	@ (8005ec4 <alldone+0x88>)
 8005e7a:	f004 ffc7 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 10, 50, "ACCOMPLISHED");
 8005e7e:	4b13      	ldr	r3, [pc, #76]	@ (8005ecc <alldone+0x90>)
 8005e80:	2232      	movs	r2, #50	@ 0x32
 8005e82:	210a      	movs	r1, #10
 8005e84:	480f      	ldr	r0, [pc, #60]	@ (8005ec4 <alldone+0x88>)
 8005e86:	f004 ff1f 	bl	800acc8 <u8g2_DrawStr>

    u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8005e8a:	4911      	ldr	r1, [pc, #68]	@ (8005ed0 <alldone+0x94>)
 8005e8c:	480d      	ldr	r0, [pc, #52]	@ (8005ec4 <alldone+0x88>)
 8005e8e:	f004 ffbd 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 8, 31, "MISSION");
 8005e92:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <alldone+0x98>)
 8005e94:	221f      	movs	r2, #31
 8005e96:	2108      	movs	r1, #8
 8005e98:	480a      	ldr	r0, [pc, #40]	@ (8005ec4 <alldone+0x88>)
 8005e9a:	f004 ff15 	bl	800acc8 <u8g2_DrawStr>

    u8g2_SetDrawColor(&u8g2, 1);
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4808      	ldr	r0, [pc, #32]	@ (8005ec4 <alldone+0x88>)
 8005ea2:	f005 f8fa 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_DrawLine(&u8g2, 0, 0, 0, 0);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2200      	movs	r2, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4804      	ldr	r0, [pc, #16]	@ (8005ec4 <alldone+0x88>)
 8005eb2:	f005 f967 	bl	800b184 <u8g2_DrawLine>

    u8g2_SendBuffer(&u8g2);
 8005eb6:	4803      	ldr	r0, [pc, #12]	@ (8005ec4 <alldone+0x88>)
 8005eb8:	f004 f9ca 	bl	800a250 <u8g2_SendBuffer>
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	2000039c 	.word	0x2000039c
 8005ec8:	080112f8 	.word	0x080112f8
 8005ecc:	08011234 	.word	0x08011234
 8005ed0:	08011ea8 	.word	0x08011ea8
 8005ed4:	08011244 	.word	0x08011244

08005ed8 <UpdateOLEDMenu>:
} OLED_MenuState;

OLED_MenuState currentMenuState = MENU_TASK_1; // Start with the first menu option

void UpdateOLEDMenu()
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
    if (currentMenuState == MENU_TASK_1)
 8005edc:	4b33      	ldr	r3, [pc, #204]	@ (8005fac <UpdateOLEDMenu+0xd4>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10c      	bne.n	8005efe <UpdateOLEDMenu+0x26>
    {
        TASK_1_OLED(); // Display "Task 1" on the OLED
 8005ee4:	f7ff fdbe 	bl	8005a64 <TASK_1_OLED>
        if (Button2 == 1)
 8005ee8:	4b31      	ldr	r3, [pc, #196]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d15a      	bne.n	8005fa6 <UpdateOLEDMenu+0xce>
        {
            start_task_1 = 1; // Start Task 1
 8005ef0:	4b30      	ldr	r3, [pc, #192]	@ (8005fb4 <UpdateOLEDMenu+0xdc>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
            Button2 = 0;      // Reset the button state
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
        {
            start_task_6 = 1; // Start Task 6
            Button2 = 0;      // Reset the button state
        }
    }
}
 8005efc:	e053      	b.n	8005fa6 <UpdateOLEDMenu+0xce>
    else if (currentMenuState == MENU_TASK_2)
 8005efe:	4b2b      	ldr	r3, [pc, #172]	@ (8005fac <UpdateOLEDMenu+0xd4>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10c      	bne.n	8005f20 <UpdateOLEDMenu+0x48>
        TASK_2_OLED(); // Display "Task 2" on the OLED
 8005f06:	f7ff fde1 	bl	8005acc <TASK_2_OLED>
        if (Button2 == 1)
 8005f0a:	4b29      	ldr	r3, [pc, #164]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d149      	bne.n	8005fa6 <UpdateOLEDMenu+0xce>
            start_task_2 = 1; // Start Task 2
 8005f12:	4b29      	ldr	r3, [pc, #164]	@ (8005fb8 <UpdateOLEDMenu+0xe0>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
            Button2 = 0;      // Reset the button state
 8005f18:	4b25      	ldr	r3, [pc, #148]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
}
 8005f1e:	e042      	b.n	8005fa6 <UpdateOLEDMenu+0xce>
    else if (currentMenuState == MENU_TASK_3)
 8005f20:	4b22      	ldr	r3, [pc, #136]	@ (8005fac <UpdateOLEDMenu+0xd4>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d10c      	bne.n	8005f42 <UpdateOLEDMenu+0x6a>
        TASK_3_OLED(); // Display "Task 3" on the OLED
 8005f28:	f7ff fe04 	bl	8005b34 <TASK_3_OLED>
        if (Button2 == 1)
 8005f2c:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d138      	bne.n	8005fa6 <UpdateOLEDMenu+0xce>
            start_task_3 = 1; // Start Task 3
 8005f34:	4b21      	ldr	r3, [pc, #132]	@ (8005fbc <UpdateOLEDMenu+0xe4>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
            Button2 = 0;      // Reset the button state
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
}
 8005f40:	e031      	b.n	8005fa6 <UpdateOLEDMenu+0xce>
    else if (currentMenuState == MENU_TASK_4)
 8005f42:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <UpdateOLEDMenu+0xd4>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d10c      	bne.n	8005f64 <UpdateOLEDMenu+0x8c>
        TASK_4_OLED(); // Display "Task 4" on the OLED
 8005f4a:	f7ff fe27 	bl	8005b9c <TASK_4_OLED>
        if (Button2 == 1)
 8005f4e:	4b18      	ldr	r3, [pc, #96]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d127      	bne.n	8005fa6 <UpdateOLEDMenu+0xce>
            start_task_4 = 1; // Start Task 4
 8005f56:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc0 <UpdateOLEDMenu+0xe8>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
            Button2 = 0;      // Reset the button state
 8005f5c:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
}
 8005f62:	e020      	b.n	8005fa6 <UpdateOLEDMenu+0xce>
    else if (currentMenuState == MENU_TASK_5)
 8005f64:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <UpdateOLEDMenu+0xd4>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d10c      	bne.n	8005f86 <UpdateOLEDMenu+0xae>
        TASK_5_OLED(); // Display "Task 5" on the OLED
 8005f6c:	f7ff fe4a 	bl	8005c04 <TASK_5_OLED>
        if (Button2 == 1)
 8005f70:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d116      	bne.n	8005fa6 <UpdateOLEDMenu+0xce>
            start_task_5 = 1; // Start Task 5
 8005f78:	4b12      	ldr	r3, [pc, #72]	@ (8005fc4 <UpdateOLEDMenu+0xec>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
            Button2 = 0;      // Reset the button state
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	e00f      	b.n	8005fa6 <UpdateOLEDMenu+0xce>
    else if (currentMenuState == MENU_TASK_6)
 8005f86:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <UpdateOLEDMenu+0xd4>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	d10b      	bne.n	8005fa6 <UpdateOLEDMenu+0xce>
        TASK_6_OLED(); // Display "Task 6" on the OLED
 8005f8e:	f7ff fe6d 	bl	8005c6c <TASK_6_OLED>
        if (Button2 == 1)
 8005f92:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d105      	bne.n	8005fa6 <UpdateOLEDMenu+0xce>
            start_task_6 = 1; // Start Task 6
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc8 <UpdateOLEDMenu+0xf0>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
            Button2 = 0;      // Reset the button state
 8005fa0:	4b03      	ldr	r3, [pc, #12]	@ (8005fb0 <UpdateOLEDMenu+0xd8>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000430 	.word	0x20000430
 8005fb0:	20000378 	.word	0x20000378
 8005fb4:	20000384 	.word	0x20000384
 8005fb8:	20000388 	.word	0x20000388
 8005fbc:	2000038c 	.word	0x2000038c
 8005fc0:	20000390 	.word	0x20000390
 8005fc4:	20000394 	.word	0x20000394
 8005fc8:	20000398 	.word	0x20000398

08005fcc <HandleButton1Press>:
void HandleButton1Press()
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
    // Toggle between Task 1 and Task 6
    if (currentMenuState == MENU_TASK_1)
 8005fd0:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <HandleButton1Press+0x5c>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <HandleButton1Press+0x14>
    {
        currentMenuState = MENU_TASK_2;
 8005fd8:	4b13      	ldr	r3, [pc, #76]	@ (8006028 <HandleButton1Press+0x5c>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e01e      	b.n	800601e <HandleButton1Press+0x52>
    }
    else if (currentMenuState == MENU_TASK_2)
 8005fe0:	4b11      	ldr	r3, [pc, #68]	@ (8006028 <HandleButton1Press+0x5c>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d103      	bne.n	8005ff0 <HandleButton1Press+0x24>
    {
        currentMenuState = MENU_TASK_3;
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <HandleButton1Press+0x5c>)
 8005fea:	2202      	movs	r2, #2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e016      	b.n	800601e <HandleButton1Press+0x52>
    }
    else if (currentMenuState == MENU_TASK_3)
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <HandleButton1Press+0x5c>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d103      	bne.n	8006000 <HandleButton1Press+0x34>
    {
        currentMenuState = MENU_TASK_4;
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <HandleButton1Press+0x5c>)
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e00e      	b.n	800601e <HandleButton1Press+0x52>
    }
    else if (currentMenuState == MENU_TASK_4)
 8006000:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <HandleButton1Press+0x5c>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d103      	bne.n	8006010 <HandleButton1Press+0x44>
    {
        currentMenuState = MENU_TASK_5;
 8006008:	4b07      	ldr	r3, [pc, #28]	@ (8006028 <HandleButton1Press+0x5c>)
 800600a:	2204      	movs	r2, #4
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	e006      	b.n	800601e <HandleButton1Press+0x52>
    }
    else if (currentMenuState == MENU_TASK_5)
 8006010:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <HandleButton1Press+0x5c>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b04      	cmp	r3, #4
 8006016:	d102      	bne.n	800601e <HandleButton1Press+0x52>
    {
        currentMenuState = MENU_TASK_6;
 8006018:	4b03      	ldr	r3, [pc, #12]	@ (8006028 <HandleButton1Press+0x5c>)
 800601a:	2205      	movs	r2, #5
 800601c:	701a      	strb	r2, [r3, #0]
    }
    UpdateOLEDMenu(); // Update the OLED display
 800601e:	f7ff ff5b 	bl	8005ed8 <UpdateOLEDMenu>
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000430 	.word	0x20000430

0800602c <RED>:
void RED()
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 8006032:	2004      	movs	r0, #4
 8006034:	f7fe feb8 	bl	8004da8 <setTCAChannel>

    u8g2_ClearBuffer(&u8g2);
 8006038:	4819      	ldr	r0, [pc, #100]	@ (80060a0 <RED+0x74>)
 800603a:	f004 f896 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 800603e:	2101      	movs	r1, #1
 8006040:	4817      	ldr	r0, [pc, #92]	@ (80060a0 <RED+0x74>)
 8006042:	f003 ff79 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 8006046:	2101      	movs	r1, #1
 8006048:	4815      	ldr	r0, [pc, #84]	@ (80060a0 <RED+0x74>)
 800604a:	f004 fd7e 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_DrawBox(&u8g2, 0, 0, 128, 64);
 800604e:	2340      	movs	r3, #64	@ 0x40
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	2200      	movs	r2, #0
 8006056:	2100      	movs	r1, #0
 8006058:	4811      	ldr	r0, [pc, #68]	@ (80060a0 <RED+0x74>)
 800605a:	f004 f850 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SetDrawColor(&u8g2, 2);
 800605e:	2102      	movs	r1, #2
 8006060:	480f      	ldr	r0, [pc, #60]	@ (80060a0 <RED+0x74>)
 8006062:	f005 f81a 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8006066:	490f      	ldr	r1, [pc, #60]	@ (80060a4 <RED+0x78>)
 8006068:	480d      	ldr	r0, [pc, #52]	@ (80060a0 <RED+0x74>)
 800606a:	f004 fecf 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 41, 42, "RED");
 800606e:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <RED+0x7c>)
 8006070:	222a      	movs	r2, #42	@ 0x2a
 8006072:	2129      	movs	r1, #41	@ 0x29
 8006074:	480a      	ldr	r0, [pc, #40]	@ (80060a0 <RED+0x74>)
 8006076:	f004 fe27 	bl	800acc8 <u8g2_DrawStr>

    u8g2_SetDrawColor(&u8g2, 1);
 800607a:	2101      	movs	r1, #1
 800607c:	4808      	ldr	r0, [pc, #32]	@ (80060a0 <RED+0x74>)
 800607e:	f005 f80c 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_DrawLine(&u8g2, 0, 0, 0, 0);
 8006082:	2300      	movs	r3, #0
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2300      	movs	r3, #0
 8006088:	2200      	movs	r2, #0
 800608a:	2100      	movs	r1, #0
 800608c:	4804      	ldr	r0, [pc, #16]	@ (80060a0 <RED+0x74>)
 800608e:	f005 f879 	bl	800b184 <u8g2_DrawLine>

    u8g2_SendBuffer(&u8g2);
 8006092:	4803      	ldr	r0, [pc, #12]	@ (80060a0 <RED+0x74>)
 8006094:	f004 f8dc 	bl	800a250 <u8g2_SendBuffer>
}
 8006098:	bf00      	nop
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	2000039c 	.word	0x2000039c
 80060a4:	08011ea8 	.word	0x08011ea8
 80060a8:	0801124c 	.word	0x0801124c

080060ac <BLUE>:
void BLUE()
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af02      	add	r7, sp, #8
    setTCAChannel(4);
 80060b2:	2004      	movs	r0, #4
 80060b4:	f7fe fe78 	bl	8004da8 <setTCAChannel>

    u8g2_ClearBuffer(&u8g2);
 80060b8:	4819      	ldr	r0, [pc, #100]	@ (8006120 <BLUE+0x74>)
 80060ba:	f004 f856 	bl	800a16a <u8g2_ClearBuffer>
    u8g2_SetBitmapMode(&u8g2, 1);
 80060be:	2101      	movs	r1, #1
 80060c0:	4817      	ldr	r0, [pc, #92]	@ (8006120 <BLUE+0x74>)
 80060c2:	f003 ff39 	bl	8009f38 <u8g2_SetBitmapMode>
    u8g2_SetFontMode(&u8g2, 1);
 80060c6:	2101      	movs	r1, #1
 80060c8:	4815      	ldr	r0, [pc, #84]	@ (8006120 <BLUE+0x74>)
 80060ca:	f004 fd3e 	bl	800ab4a <u8g2_SetFontMode>

    u8g2_DrawBox(&u8g2, 0, 0, 128, 64);
 80060ce:	2340      	movs	r3, #64	@ 0x40
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	2380      	movs	r3, #128	@ 0x80
 80060d4:	2200      	movs	r2, #0
 80060d6:	2100      	movs	r1, #0
 80060d8:	4811      	ldr	r0, [pc, #68]	@ (8006120 <BLUE+0x74>)
 80060da:	f004 f810 	bl	800a0fe <u8g2_DrawBox>

    u8g2_SetDrawColor(&u8g2, 2);
 80060de:	2102      	movs	r1, #2
 80060e0:	480f      	ldr	r0, [pc, #60]	@ (8006120 <BLUE+0x74>)
 80060e2:	f004 ffda 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 80060e6:	490f      	ldr	r1, [pc, #60]	@ (8006124 <BLUE+0x78>)
 80060e8:	480d      	ldr	r0, [pc, #52]	@ (8006120 <BLUE+0x74>)
 80060ea:	f004 fe8f 	bl	800ae0c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 41, 42, "BLUE");
 80060ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006128 <BLUE+0x7c>)
 80060f0:	222a      	movs	r2, #42	@ 0x2a
 80060f2:	2129      	movs	r1, #41	@ 0x29
 80060f4:	480a      	ldr	r0, [pc, #40]	@ (8006120 <BLUE+0x74>)
 80060f6:	f004 fde7 	bl	800acc8 <u8g2_DrawStr>

    u8g2_SetDrawColor(&u8g2, 1);
 80060fa:	2101      	movs	r1, #1
 80060fc:	4808      	ldr	r0, [pc, #32]	@ (8006120 <BLUE+0x74>)
 80060fe:	f004 ffcc 	bl	800b09a <u8g2_SetDrawColor>
    u8g2_DrawLine(&u8g2, 0, 0, 0, 0);
 8006102:	2300      	movs	r3, #0
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	2300      	movs	r3, #0
 8006108:	2200      	movs	r2, #0
 800610a:	2100      	movs	r1, #0
 800610c:	4804      	ldr	r0, [pc, #16]	@ (8006120 <BLUE+0x74>)
 800610e:	f005 f839 	bl	800b184 <u8g2_DrawLine>

    u8g2_SendBuffer(&u8g2);
 8006112:	4803      	ldr	r0, [pc, #12]	@ (8006120 <BLUE+0x74>)
 8006114:	f004 f89c 	bl	800a250 <u8g2_SendBuffer>
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2000039c 	.word	0x2000039c
 8006124:	08011ea8 	.word	0x08011ea8
 8006128:	08011250 	.word	0x08011250

0800612c <PCA9685_SetBit>:
#include "pca9685.h"

extern I2C_HandleTypeDef hi2c1; // Use the I2C handle defined in main.c

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af04      	add	r7, sp, #16
 8006132:	4603      	mov	r3, r0
 8006134:	71fb      	strb	r3, [r7, #7]
 8006136:	460b      	mov	r3, r1
 8006138:	71bb      	strb	r3, [r7, #6]
 800613a:	4613      	mov	r3, r2
 800613c:	717b      	strb	r3, [r7, #5]
    uint8_t readValue;
    HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	b29a      	uxth	r2, r3
 8006142:	230a      	movs	r3, #10
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	2301      	movs	r3, #1
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	f107 030f 	add.w	r3, r7, #15
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2301      	movs	r3, #1
 8006152:	2180      	movs	r1, #128	@ 0x80
 8006154:	4819      	ldr	r0, [pc, #100]	@ (80061bc <PCA9685_SetBit+0x90>)
 8006156:	f007 fec9 	bl	800deec <HAL_I2C_Mem_Read>
    if (Value == 0) readValue &= ~(1 << Bit);
 800615a:	797b      	ldrb	r3, [r7, #5]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10d      	bne.n	800617c <PCA9685_SetBit+0x50>
 8006160:	79bb      	ldrb	r3, [r7, #6]
 8006162:	2201      	movs	r2, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	b25b      	sxtb	r3, r3
 800616a:	43db      	mvns	r3, r3
 800616c:	b25a      	sxtb	r2, r3
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	b25b      	sxtb	r3, r3
 8006172:	4013      	ands	r3, r2
 8006174:	b25b      	sxtb	r3, r3
 8006176:	b2db      	uxtb	r3, r3
 8006178:	73fb      	strb	r3, [r7, #15]
 800617a:	e00a      	b.n	8006192 <PCA9685_SetBit+0x66>
    else readValue |= (1 << Bit);
 800617c:	79bb      	ldrb	r3, [r7, #6]
 800617e:	2201      	movs	r2, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	b25a      	sxtb	r2, r3
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	b25b      	sxtb	r3, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	b25b      	sxtb	r3, r3
 800618e:	b2db      	uxtb	r3, r3
 8006190:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	b29a      	uxth	r2, r3
 8006196:	230a      	movs	r3, #10
 8006198:	9302      	str	r3, [sp, #8]
 800619a:	2301      	movs	r3, #1
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	f107 030f 	add.w	r3, r7, #15
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	2301      	movs	r3, #1
 80061a6:	2180      	movs	r1, #128	@ 0x80
 80061a8:	4804      	ldr	r0, [pc, #16]	@ (80061bc <PCA9685_SetBit+0x90>)
 80061aa:	f007 fda5 	bl	800dcf8 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 80061ae:	2001      	movs	r0, #1
 80061b0:	f005 fed2 	bl	800bf58 <HAL_Delay>
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000200 	.word	0x20000200

080061c0 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	4603      	mov	r3, r0
 80061c8:	80fb      	strh	r3, [r7, #6]
    uint8_t prescale;
    if (frequency >= 1526) prescale = 0x03;
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d902      	bls.n	80061da <PCA9685_SetPWMFrequency+0x1a>
 80061d4:	2303      	movs	r3, #3
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	e00c      	b.n	80061f4 <PCA9685_SetPWMFrequency+0x34>
    else if (frequency <= 24) prescale = 0xFF;
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b18      	cmp	r3, #24
 80061de:	d802      	bhi.n	80061e6 <PCA9685_SetPWMFrequency+0x26>
 80061e0:	23ff      	movs	r3, #255	@ 0xff
 80061e2:	73fb      	strb	r3, [r7, #15]
 80061e4:	e006      	b.n	80061f4 <PCA9685_SetPWMFrequency+0x34>
    else prescale = 25000000 / (4096 * frequency);
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	031b      	lsls	r3, r3, #12
 80061ea:	4a12      	ldr	r2, [pc, #72]	@ (8006234 <PCA9685_SetPWMFrequency+0x74>)
 80061ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	73fb      	strb	r3, [r7, #15]
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 80061f4:	2201      	movs	r2, #1
 80061f6:	2104      	movs	r1, #4
 80061f8:	2000      	movs	r0, #0
 80061fa:	f7ff ff97 	bl	800612c <PCA9685_SetBit>
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 80061fe:	230a      	movs	r3, #10
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	2301      	movs	r3, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f107 030f 	add.w	r3, r7, #15
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	22fe      	movs	r2, #254	@ 0xfe
 8006210:	2180      	movs	r1, #128	@ 0x80
 8006212:	4809      	ldr	r0, [pc, #36]	@ (8006238 <PCA9685_SetPWMFrequency+0x78>)
 8006214:	f007 fd70 	bl	800dcf8 <HAL_I2C_Mem_Write>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8006218:	2200      	movs	r2, #0
 800621a:	2104      	movs	r1, #4
 800621c:	2000      	movs	r0, #0
 800621e:	f7ff ff85 	bl	800612c <PCA9685_SetBit>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8006222:	2201      	movs	r2, #1
 8006224:	2107      	movs	r1, #7
 8006226:	2000      	movs	r0, #0
 8006228:	f7ff ff80 	bl	800612c <PCA9685_SetBit>
}
 800622c:	bf00      	nop
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	017d7840 	.word	0x017d7840
 8006238:	20000200 	.word	0x20000200

0800623c <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	80fb      	strh	r3, [r7, #6]
    PCA9685_SetPWMFrequency(frequency);
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff ffb9 	bl	80061c0 <PCA9685_SetPWMFrequency>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800624e:	2201      	movs	r2, #1
 8006250:	2105      	movs	r1, #5
 8006252:	2000      	movs	r0, #0
 8006254:	f7ff ff6a 	bl	800612c <PCA9685_SetBit>
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af04      	add	r7, sp, #16
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
 800626a:	460b      	mov	r3, r1
 800626c:	80bb      	strh	r3, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	807b      	strh	r3, [r7, #2]
    uint8_t registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	b2db      	uxtb	r3, r3
 8006278:	3306      	adds	r3, #6
 800627a:	73fb      	strb	r3, [r7, #15]
    uint8_t pwm[4] = {
 800627c:	88bb      	ldrh	r3, [r7, #4]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	723b      	strb	r3, [r7, #8]
 8006282:	88bb      	ldrh	r3, [r7, #4]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	b29b      	uxth	r3, r3
 8006288:	b2db      	uxtb	r3, r3
 800628a:	727b      	strb	r3, [r7, #9]
 800628c:	887b      	ldrh	r3, [r7, #2]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	72bb      	strb	r3, [r7, #10]
 8006292:	887b      	ldrh	r3, [r7, #2]
 8006294:	0a1b      	lsrs	r3, r3, #8
 8006296:	b29b      	uxth	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	72fb      	strb	r3, [r7, #11]
        OnTime & 0xFF,
        OnTime >> 8,
        OffTime & 0xFF,
        OffTime >> 8
    };
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	230a      	movs	r3, #10
 80062a2:	9302      	str	r3, [sp, #8]
 80062a4:	2304      	movs	r3, #4
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	2301      	movs	r3, #1
 80062b0:	2180      	movs	r1, #128	@ 0x80
 80062b2:	4803      	ldr	r0, [pc, #12]	@ (80062c0 <PCA9685_SetPWM+0x60>)
 80062b4:	f007 fd20 	bl	800dcf8 <HAL_I2C_Mem_Write>
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000200 	.word	0x20000200
 80062c4:	00000000 	.word	0x00000000

080062c8 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	ed87 0a00 	vstr	s0, [r7]
 80062d4:	71fb      	strb	r3, [r7, #7]
    float Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 80062d6:	6838      	ldr	r0, [r7, #0]
 80062d8:	f7fa f936 	bl	8000548 <__aeabi_f2d>
 80062dc:	a31b      	add	r3, pc, #108	@ (adr r3, 800634c <PCA9685_SetServoAngle+0x84>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7fa f989 	bl	80005f8 <__aeabi_dmul>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4610      	mov	r0, r2
 80062ec:	4619      	mov	r1, r3
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <PCA9685_SetServoAngle+0x80>)
 80062f4:	f7fa faaa 	bl	800084c <__aeabi_ddiv>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	a30f      	add	r3, pc, #60	@ (adr r3, 8006340 <PCA9685_SetServoAngle+0x78>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7f9 ffc1 	bl	800028c <__adddf3>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	f7fa fc53 	bl	8000bbc <__aeabi_d2f>
 8006316:	4603      	mov	r3, r0
 8006318:	60fb      	str	r3, [r7, #12]
    PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 800631a:	edd7 7a03 	vldr	s15, [r7, #12]
 800631e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006322:	ee17 3a90 	vmov	r3, s15
 8006326:	b29a      	uxth	r2, r3
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff97 	bl	8006260 <PCA9685_SetPWM>
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	f3af 8000 	nop.w
 8006340:	9999999a 	.word	0x9999999a
 8006344:	40599999 	.word	0x40599999
 8006348:	40668000 	.word	0x40668000
 800634c:	00000000 	.word	0x00000000
 8006350:	40799800 	.word	0x40799800

08006354 <PCA9685_SetServoAngleSlow>:

void PCA9685_SetServoAngleSlow(uint8_t Channel, float StartAngle, float EndAngle, uint16_t DelayMs)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006360:	edc7 0a01 	vstr	s1, [r7, #4]
 8006364:	460a      	mov	r2, r1
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	4613      	mov	r3, r2
 800636a:	81bb      	strh	r3, [r7, #12]
    float AngleIncrement = (EndAngle > StartAngle) ? 1.0 : -1.0;
 800636c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006370:	edd7 7a02 	vldr	s15, [r7, #8]
 8006374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637c:	dd02      	ble.n	8006384 <PCA9685_SetServoAngleSlow+0x30>
 800637e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006382:	e000      	b.n	8006386 <PCA9685_SetServoAngleSlow+0x32>
 8006384:	4b1d      	ldr	r3, [pc, #116]	@ (80063fc <PCA9685_SetServoAngleSlow+0xa8>)
 8006386:	613b      	str	r3, [r7, #16]
    float CurrentAngle = StartAngle;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	617b      	str	r3, [r7, #20]

    while ((AngleIncrement > 0 && CurrentAngle <= EndAngle) || (AngleIncrement < 0 && CurrentAngle >= EndAngle))
 800638c:	e011      	b.n	80063b2 <PCA9685_SetServoAngleSlow+0x5e>
    {
        PCA9685_SetServoAngle(Channel, CurrentAngle);
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	ed97 0a05 	vldr	s0, [r7, #20]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff ff97 	bl	80062c8 <PCA9685_SetServoAngle>
        CurrentAngle += AngleIncrement;
 800639a:	ed97 7a05 	vldr	s14, [r7, #20]
 800639e:	edd7 7a04 	vldr	s15, [r7, #16]
 80063a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a6:	edc7 7a05 	vstr	s15, [r7, #20]
        HAL_Delay(DelayMs);
 80063aa:	89bb      	ldrh	r3, [r7, #12]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f005 fdd3 	bl	800bf58 <HAL_Delay>
    while ((AngleIncrement > 0 && CurrentAngle <= EndAngle) || (AngleIncrement < 0 && CurrentAngle >= EndAngle))
 80063b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80063b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063be:	dd08      	ble.n	80063d2 <PCA9685_SetServoAngleSlow+0x7e>
 80063c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80063c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80063c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d0:	d9dd      	bls.n	800638e <PCA9685_SetServoAngleSlow+0x3a>
 80063d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80063d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063de:	d400      	bmi.n	80063e2 <PCA9685_SetServoAngleSlow+0x8e>
    }
 80063e0:	e008      	b.n	80063f4 <PCA9685_SetServoAngleSlow+0xa0>
    while ((AngleIncrement > 0 && CurrentAngle <= EndAngle) || (AngleIncrement < 0 && CurrentAngle >= EndAngle))
 80063e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80063e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80063ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f2:	dacc      	bge.n	800638e <PCA9685_SetServoAngleSlow+0x3a>
 80063f4:	bf00      	nop
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	bf800000 	.word	0xbf800000

08006400 <get_sensor_state>:
extern int junction_detected;
uint16_t ADC_VAL[10];       // Raw ADC values (DMA buffer)
uint16_t thresholds[10] = {600, 600, 1000, 1000, 1000, 1000, 1000, 400, 400 , 1500};
uint8_t IR[10]; // Array to store 1/0 for each sensor
//{1500, 2500, 1800, 2500, 2500, 2500, 1700, 600, 600};
uint8_t get_sensor_state(uint16_t adc_value, uint16_t threshold) {
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	460a      	mov	r2, r1
 800640a:	80fb      	strh	r3, [r7, #6]
 800640c:	4613      	mov	r3, r2
 800640e:	80bb      	strh	r3, [r7, #4]
  if (adc_value > threshold) {
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	88bb      	ldrh	r3, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d901      	bls.n	800641c <get_sensor_state+0x1c>
    return 1; // Sensor detects a line (or white surface)
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <get_sensor_state+0x1e>
  } else {
    return 0; // Sensor detects background (or black surface)
 800641c:	2300      	movs	r3, #0
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <process_sensors>:

void process_sensors(void) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
  for (int i = 0; i < 10; i++) {
 8006432:	2300      	movs	r3, #0
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	e015      	b.n	8006464 <process_sensors+0x38>
    IR[i] = get_sensor_state(ADC_VAL[i], thresholds[i]);
 8006438:	4a0e      	ldr	r2, [pc, #56]	@ (8006474 <process_sensors+0x48>)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006440:	490d      	ldr	r1, [pc, #52]	@ (8006478 <process_sensors+0x4c>)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f7ff ffd8 	bl	8006400 <get_sensor_state>
 8006450:	4603      	mov	r3, r0
 8006452:	4619      	mov	r1, r3
 8006454:	4a09      	ldr	r2, [pc, #36]	@ (800647c <process_sensors+0x50>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	460a      	mov	r2, r1
 800645c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 10; i++) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3301      	adds	r3, #1
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b09      	cmp	r3, #9
 8006468:	dde6      	ble.n	8006438 <process_sensors+0xc>
  }
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000454 	.word	0x20000454
 8006478:	20000020 	.word	0x20000020
 800647c:	20000468 	.word	0x20000468

08006480 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  if (hadc1->Instance == ADC1) {
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a15      	ldr	r2, [pc, #84]	@ (80064e4 <HAL_ADC_ConvCpltCallback+0x64>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d124      	bne.n	80064dc <HAL_ADC_ConvCpltCallback+0x5c>
      process_sensors();
 8006492:	f7ff ffcb 	bl	800642c <process_sensors>
      if (( IR[1] == 1 || IR[2] == 1 || IR[3] == 1 || IR[4] == 1 || IR[5] == 1 ) && (IR[7] == 1 && IR[8] == 1)) {
 8006496:	4b14      	ldr	r3, [pc, #80]	@ (80064e8 <HAL_ADC_ConvCpltCallback+0x68>)
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d00f      	beq.n	80064be <HAL_ADC_ConvCpltCallback+0x3e>
 800649e:	4b12      	ldr	r3, [pc, #72]	@ (80064e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80064a0:	789b      	ldrb	r3, [r3, #2]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d00b      	beq.n	80064be <HAL_ADC_ConvCpltCallback+0x3e>
 80064a6:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80064a8:	78db      	ldrb	r3, [r3, #3]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d007      	beq.n	80064be <HAL_ADC_ConvCpltCallback+0x3e>
 80064ae:	4b0e      	ldr	r3, [pc, #56]	@ (80064e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80064b0:	791b      	ldrb	r3, [r3, #4]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d003      	beq.n	80064be <HAL_ADC_ConvCpltCallback+0x3e>
 80064b6:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80064b8:	795b      	ldrb	r3, [r3, #5]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d10b      	bne.n	80064d6 <HAL_ADC_ConvCpltCallback+0x56>
 80064be:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80064c0:	79db      	ldrb	r3, [r3, #7]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d107      	bne.n	80064d6 <HAL_ADC_ConvCpltCallback+0x56>
 80064c6:	4b08      	ldr	r3, [pc, #32]	@ (80064e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80064c8:	7a1b      	ldrb	r3, [r3, #8]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d103      	bne.n	80064d6 <HAL_ADC_ConvCpltCallback+0x56>
        junction_detected = 1;
 80064ce:	4b07      	ldr	r3, [pc, #28]	@ (80064ec <HAL_ADC_ConvCpltCallback+0x6c>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
      } else {
        junction_detected = 0;
      }
  }
}
 80064d4:	e002      	b.n	80064dc <HAL_ADC_ConvCpltCallback+0x5c>
        junction_detected = 0;
 80064d6:	4b05      	ldr	r3, [pc, #20]	@ (80064ec <HAL_ADC_ConvCpltCallback+0x6c>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40012000 	.word	0x40012000
 80064e8:	20000468 	.word	0x20000468
 80064ec:	20000478 	.word	0x20000478

080064f0 <updateStateMachine>:


MainState currentMainState = TASK_1;

void updateStateMachine()
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
    switch (currentMainState)
 80064f4:	4b13      	ldr	r3, [pc, #76]	@ (8006544 <updateStateMachine+0x54>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b05      	cmp	r3, #5
 80064fa:	d821      	bhi.n	8006540 <updateStateMachine+0x50>
 80064fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006504 <updateStateMachine+0x14>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	0800651d 	.word	0x0800651d
 8006508:	08006523 	.word	0x08006523
 800650c:	08006529 	.word	0x08006529
 8006510:	0800652f 	.word	0x0800652f
 8006514:	08006535 	.word	0x08006535
 8006518:	0800653b 	.word	0x0800653b
    {
    case TASK_1:
        task1StateHandler();
 800651c:	f000 fba8 	bl	8006c70 <task1StateHandler>
        break;
 8006520:	e00e      	b.n	8006540 <updateStateMachine+0x50>
    case TASK_2:
        task2StateHandler();
 8006522:	f001 f90f 	bl	8007744 <task2StateHandler>
        break;
 8006526:	e00b      	b.n	8006540 <updateStateMachine+0x50>
    case TASK_3:
        task3StateHandler();
 8006528:	f001 fb9a 	bl	8007c60 <task3StateHandler>
        break;
 800652c:	e008      	b.n	8006540 <updateStateMachine+0x50>
    case TASK_4:
        task4StateHandler();
 800652e:	f002 fce3 	bl	8008ef8 <task4StateHandler>
        break;
 8006532:	e005      	b.n	8006540 <updateStateMachine+0x50>
    case TASK_5:
        task5StateHandler();
 8006534:	f002 fd9e 	bl	8009074 <task5StateHandler>
        break;
 8006538:	e002      	b.n	8006540 <updateStateMachine+0x50>
    case TASK_6:
        task6StateHandler();
 800653a:	f002 febd 	bl	80092b8 <task6StateHandler>
        break;
 800653e:	bf00      	nop
    }
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000472 	.word	0x20000472

08006548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <HAL_MspInit+0x4c>)
 8006554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006556:	4a0f      	ldr	r2, [pc, #60]	@ (8006594 <HAL_MspInit+0x4c>)
 8006558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800655c:	6453      	str	r3, [r2, #68]	@ 0x44
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <HAL_MspInit+0x4c>)
 8006560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800656a:	2300      	movs	r3, #0
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	4b09      	ldr	r3, [pc, #36]	@ (8006594 <HAL_MspInit+0x4c>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	4a08      	ldr	r2, [pc, #32]	@ (8006594 <HAL_MspInit+0x4c>)
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6413      	str	r3, [r2, #64]	@ 0x40
 800657a:	4b06      	ldr	r3, [pc, #24]	@ (8006594 <HAL_MspInit+0x4c>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40023800 	.word	0x40023800

08006598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	@ 0x28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a0:	f107 0314 	add.w	r3, r7, #20
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a3c      	ldr	r2, [pc, #240]	@ (80066a8 <HAL_ADC_MspInit+0x110>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d171      	bne.n	800669e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	4b3b      	ldr	r3, [pc, #236]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c2:	4a3a      	ldr	r2, [pc, #232]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80065ca:	4b38      	ldr	r3, [pc, #224]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	4b34      	ldr	r3, [pc, #208]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065de:	4a33      	ldr	r2, [pc, #204]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80065e6:	4b31      	ldr	r3, [pc, #196]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]
 80065f6:	4b2d      	ldr	r3, [pc, #180]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	4a2c      	ldr	r2, [pc, #176]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	6313      	str	r3, [r2, #48]	@ 0x30
 8006602:	4b2a      	ldr	r3, [pc, #168]	@ (80066ac <HAL_ADC_MspInit+0x114>)
 8006604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	60bb      	str	r3, [r7, #8]
 800660c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800660e:	23ff      	movs	r3, #255	@ 0xff
 8006610:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006612:	2303      	movs	r3, #3
 8006614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006616:	2300      	movs	r3, #0
 8006618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800661a:	f107 0314 	add.w	r3, r7, #20
 800661e:	4619      	mov	r1, r3
 8006620:	4823      	ldr	r0, [pc, #140]	@ (80066b0 <HAL_ADC_MspInit+0x118>)
 8006622:	f006 fd27 	bl	800d074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006626:	2303      	movs	r3, #3
 8006628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800662a:	2303      	movs	r3, #3
 800662c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006632:	f107 0314 	add.w	r3, r7, #20
 8006636:	4619      	mov	r1, r3
 8006638:	481e      	ldr	r0, [pc, #120]	@ (80066b4 <HAL_ADC_MspInit+0x11c>)
 800663a:	f006 fd1b 	bl	800d074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800663e:	4b1e      	ldr	r3, [pc, #120]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006640:	4a1e      	ldr	r2, [pc, #120]	@ (80066bc <HAL_ADC_MspInit+0x124>)
 8006642:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006644:	4b1c      	ldr	r3, [pc, #112]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006646:	2200      	movs	r2, #0
 8006648:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800664a:	4b1b      	ldr	r3, [pc, #108]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 800664c:	2200      	movs	r2, #0
 800664e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006650:	4b19      	ldr	r3, [pc, #100]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006652:	2200      	movs	r2, #0
 8006654:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006656:	4b18      	ldr	r3, [pc, #96]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006658:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800665c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800665e:	4b16      	ldr	r3, [pc, #88]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006660:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006664:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006666:	4b14      	ldr	r3, [pc, #80]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006668:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800666c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800666e:	4b12      	ldr	r3, [pc, #72]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006674:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006676:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006678:	2200      	movs	r2, #0
 800667a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800667c:	4b0e      	ldr	r3, [pc, #56]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 800667e:	2200      	movs	r2, #0
 8006680:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006682:	480d      	ldr	r0, [pc, #52]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006684:	f006 f986 	bl	800c994 <HAL_DMA_Init>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800668e:	f7ff f83b 	bl	8005708 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a08      	ldr	r2, [pc, #32]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38
 8006698:	4a07      	ldr	r2, [pc, #28]	@ (80066b8 <HAL_ADC_MspInit+0x120>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800669e:	bf00      	nop
 80066a0:	3728      	adds	r7, #40	@ 0x28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40012000 	.word	0x40012000
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40020000 	.word	0x40020000
 80066b4:	40020400 	.word	0x40020400
 80066b8:	200001a0 	.word	0x200001a0
 80066bc:	40026410 	.word	0x40026410

080066c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	@ 0x28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c8:	f107 0314 	add.w	r3, r7, #20
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	605a      	str	r2, [r3, #4]
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	60da      	str	r2, [r3, #12]
 80066d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a19      	ldr	r2, [pc, #100]	@ (8006744 <HAL_I2C_MspInit+0x84>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d12c      	bne.n	800673c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	4b18      	ldr	r3, [pc, #96]	@ (8006748 <HAL_I2C_MspInit+0x88>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <HAL_I2C_MspInit+0x88>)
 80066ec:	f043 0302 	orr.w	r3, r3, #2
 80066f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066f2:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <HAL_I2C_MspInit+0x88>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80066fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006704:	2312      	movs	r3, #18
 8006706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006708:	2300      	movs	r3, #0
 800670a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800670c:	2303      	movs	r3, #3
 800670e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006710:	2304      	movs	r3, #4
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006714:	f107 0314 	add.w	r3, r7, #20
 8006718:	4619      	mov	r1, r3
 800671a:	480c      	ldr	r0, [pc, #48]	@ (800674c <HAL_I2C_MspInit+0x8c>)
 800671c:	f006 fcaa 	bl	800d074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	4b08      	ldr	r3, [pc, #32]	@ (8006748 <HAL_I2C_MspInit+0x88>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	4a07      	ldr	r2, [pc, #28]	@ (8006748 <HAL_I2C_MspInit+0x88>)
 800672a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800672e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006730:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <HAL_I2C_MspInit+0x88>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800673c:	bf00      	nop
 800673e:	3728      	adds	r7, #40	@ 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40005400 	.word	0x40005400
 8006748:	40023800 	.word	0x40023800
 800674c:	40020400 	.word	0x40020400

08006750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1f      	ldr	r2, [pc, #124]	@ (80067dc <HAL_TIM_Base_MspInit+0x8c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d10e      	bne.n	8006780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	4b1e      	ldr	r3, [pc, #120]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 8006768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676a:	4a1d      	ldr	r2, [pc, #116]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	6453      	str	r3, [r2, #68]	@ 0x44
 8006772:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800677e:	e026      	b.n	80067ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a17      	ldr	r2, [pc, #92]	@ (80067e4 <HAL_TIM_Base_MspInit+0x94>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d10e      	bne.n	80067a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	4a13      	ldr	r2, [pc, #76]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 8006794:	f043 0308 	orr.w	r3, r3, #8
 8006798:	6413      	str	r3, [r2, #64]	@ 0x40
 800679a:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 800679c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]
}
 80067a6:	e012      	b.n	80067ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM9)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0e      	ldr	r2, [pc, #56]	@ (80067e8 <HAL_TIM_Base_MspInit+0x98>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10d      	bne.n	80067ce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	4b0a      	ldr	r3, [pc, #40]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	4a09      	ldr	r2, [pc, #36]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80067c2:	4b07      	ldr	r3, [pc, #28]	@ (80067e0 <HAL_TIM_Base_MspInit+0x90>)
 80067c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40014000 	.word	0x40014000

080067ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	@ 0x30
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f4:	f107 031c 	add.w	r3, r7, #28
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680c:	d153      	bne.n	80068b6 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	4b47      	ldr	r3, [pc, #284]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006816:	4a46      	ldr	r2, [pc, #280]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	6413      	str	r3, [r2, #64]	@ 0x40
 800681e:	4b44      	ldr	r3, [pc, #272]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	4b40      	ldr	r3, [pc, #256]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 8006830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006832:	4a3f      	ldr	r2, [pc, #252]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	6313      	str	r3, [r2, #48]	@ 0x30
 800683a:	4b3d      	ldr	r3, [pc, #244]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	4b39      	ldr	r3, [pc, #228]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	4a38      	ldr	r2, [pc, #224]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 8006850:	f043 0302 	orr.w	r3, r3, #2
 8006854:	6313      	str	r3, [r2, #48]	@ 0x30
 8006856:	4b36      	ldr	r3, [pc, #216]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MA_C1_Pin;
 8006862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006868:	2302      	movs	r3, #2
 800686a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686c:	2300      	movs	r3, #0
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006870:	2300      	movs	r3, #0
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006874:	2301      	movs	r3, #1
 8006876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MA_C1_GPIO_Port, &GPIO_InitStruct);
 8006878:	f107 031c 	add.w	r3, r7, #28
 800687c:	4619      	mov	r1, r3
 800687e:	482d      	ldr	r0, [pc, #180]	@ (8006934 <HAL_TIM_Encoder_MspInit+0x148>)
 8006880:	f006 fbf8 	bl	800d074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MA_C2_Pin;
 8006884:	2308      	movs	r3, #8
 8006886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006888:	2302      	movs	r3, #2
 800688a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688c:	2300      	movs	r3, #0
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006890:	2300      	movs	r3, #0
 8006892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006894:	2301      	movs	r3, #1
 8006896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MA_C2_GPIO_Port, &GPIO_InitStruct);
 8006898:	f107 031c 	add.w	r3, r7, #28
 800689c:	4619      	mov	r1, r3
 800689e:	4826      	ldr	r0, [pc, #152]	@ (8006938 <HAL_TIM_Encoder_MspInit+0x14c>)
 80068a0:	f006 fbe8 	bl	800d074 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80068a4:	2200      	movs	r2, #0
 80068a6:	2100      	movs	r1, #0
 80068a8:	201c      	movs	r0, #28
 80068aa:	f006 f83c 	bl	800c926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80068ae:	201c      	movs	r0, #28
 80068b0:	f006 f855 	bl	800c95e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80068b4:	e038      	b.n	8006928 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a20      	ldr	r2, [pc, #128]	@ (800693c <HAL_TIM_Encoder_MspInit+0x150>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d133      	bne.n	8006928 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	4a19      	ldr	r2, [pc, #100]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 80068ca:	f043 0302 	orr.w	r3, r3, #2
 80068ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80068d0:	4b17      	ldr	r3, [pc, #92]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068dc:	2300      	movs	r3, #0
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	4a12      	ldr	r2, [pc, #72]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 80068e6:	f043 0302 	orr.w	r3, r3, #2
 80068ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80068ec:	4b10      	ldr	r3, [pc, #64]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x144>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MB_C1_Pin|MB_C2_Pin;
 80068f8:	2330      	movs	r3, #48	@ 0x30
 80068fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fc:	2302      	movs	r3, #2
 80068fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006900:	2300      	movs	r3, #0
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006904:	2300      	movs	r3, #0
 8006906:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006908:	2302      	movs	r3, #2
 800690a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800690c:	f107 031c 	add.w	r3, r7, #28
 8006910:	4619      	mov	r1, r3
 8006912:	4809      	ldr	r0, [pc, #36]	@ (8006938 <HAL_TIM_Encoder_MspInit+0x14c>)
 8006914:	f006 fbae 	bl	800d074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006918:	2200      	movs	r2, #0
 800691a:	2100      	movs	r1, #0
 800691c:	201d      	movs	r0, #29
 800691e:	f006 f802 	bl	800c926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006922:	201d      	movs	r0, #29
 8006924:	f006 f81b 	bl	800c95e <HAL_NVIC_EnableIRQ>
}
 8006928:	bf00      	nop
 800692a:	3730      	adds	r7, #48	@ 0x30
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40023800 	.word	0x40023800
 8006934:	40020000 	.word	0x40020000
 8006938:	40020400 	.word	0x40020400
 800693c:	40000400 	.word	0x40000400

08006940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	60da      	str	r2, [r3, #12]
 8006956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a12      	ldr	r2, [pc, #72]	@ (80069a8 <HAL_TIM_MspPostInit+0x68>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d11e      	bne.n	80069a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	4b11      	ldr	r3, [pc, #68]	@ (80069ac <HAL_TIM_MspPostInit+0x6c>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696a:	4a10      	ldr	r2, [pc, #64]	@ (80069ac <HAL_TIM_MspPostInit+0x6c>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6313      	str	r3, [r2, #48]	@ 0x30
 8006972:	4b0e      	ldr	r3, [pc, #56]	@ (80069ac <HAL_TIM_MspPostInit+0x6c>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = AIN_1_Pin|AIN_2_Pin|BIN_1_Pin|BIN_2_Pin;
 800697e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8006982:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006984:	2302      	movs	r3, #2
 8006986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006990:	2301      	movs	r3, #1
 8006992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006994:	f107 030c 	add.w	r3, r7, #12
 8006998:	4619      	mov	r1, r3
 800699a:	4805      	ldr	r0, [pc, #20]	@ (80069b0 <HAL_TIM_MspPostInit+0x70>)
 800699c:	f006 fb6a 	bl	800d074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80069a0:	bf00      	nop
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40023800 	.word	0x40023800
 80069b0:	40020000 	.word	0x40020000

080069b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069b8:	bf00      	nop
 80069ba:	e7fd      	b.n	80069b8 <NMI_Handler+0x4>

080069bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <HardFault_Handler+0x4>

080069c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069c8:	bf00      	nop
 80069ca:	e7fd      	b.n	80069c8 <MemManage_Handler+0x4>

080069cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <BusFault_Handler+0x4>

080069d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <UsageFault_Handler+0x4>

080069dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069e0:	bf00      	nop
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069ea:	b480      	push	{r7}
 80069ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069fc:	bf00      	nop
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a0a:	f005 fa85 	bl	800bf18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a0e:	bf00      	nop
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_IR_Pin);
 8006a16:	2080      	movs	r0, #128	@ 0x80
 8006a18:	f006 fce2 	bl	800d3e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006a24:	4802      	ldr	r0, [pc, #8]	@ (8006a30 <TIM2_IRQHandler+0x10>)
 8006a26:	f009 f8c3 	bl	800fbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006a2a:	bf00      	nop
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000029c 	.word	0x2000029c

08006a34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006a38:	4802      	ldr	r0, [pc, #8]	@ (8006a44 <TIM3_IRQHandler+0x10>)
 8006a3a:	f009 f8b9 	bl	800fbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	200002e4 	.word	0x200002e4

08006a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8006a4c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006a50:	f006 fcc6 	bl	800d3e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8006a54:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006a58:	f006 fcc2 	bl	800d3e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006a5c:	bf00      	nop
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006a64:	4802      	ldr	r0, [pc, #8]	@ (8006a70 <DMA2_Stream0_IRQHandler+0x10>)
 8006a66:	f006 f89b 	bl	800cba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	200001a0 	.word	0x200001a0

08006a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a7c:	4a14      	ldr	r2, [pc, #80]	@ (8006ad0 <_sbrk+0x5c>)
 8006a7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ad4 <_sbrk+0x60>)
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a88:	4b13      	ldr	r3, [pc, #76]	@ (8006ad8 <_sbrk+0x64>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a90:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <_sbrk+0x64>)
 8006a92:	4a12      	ldr	r2, [pc, #72]	@ (8006adc <_sbrk+0x68>)
 8006a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a96:	4b10      	ldr	r3, [pc, #64]	@ (8006ad8 <_sbrk+0x64>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d207      	bcs.n	8006ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006aa4:	f009 ff18 	bl	80108d8 <__errno>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	220c      	movs	r2, #12
 8006aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	e009      	b.n	8006ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ab4:	4b08      	ldr	r3, [pc, #32]	@ (8006ad8 <_sbrk+0x64>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006aba:	4b07      	ldr	r3, [pc, #28]	@ (8006ad8 <_sbrk+0x64>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	4a05      	ldr	r2, [pc, #20]	@ (8006ad8 <_sbrk+0x64>)
 8006ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20010000 	.word	0x20010000
 8006ad4:	00000400 	.word	0x00000400
 8006ad8:	20000474 	.word	0x20000474
 8006adc:	20000b38 	.word	0x20000b38

08006ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ae4:	4b06      	ldr	r3, [pc, #24]	@ (8006b00 <SystemInit+0x20>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aea:	4a05      	ldr	r2, [pc, #20]	@ (8006b00 <SystemInit+0x20>)
 8006aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	e000ed00 	.word	0xe000ed00

08006b04 <turn_Right_90_LR_IR8>:
const unsigned long ultrasonicInterval = 50; // 50ms delay

Task1SubState currentTask1SubState = STATE_DisplayMenu;

void turn_Right_90_LR_IR8()
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08e      	sub	sp, #56	@ 0x38
 8006b08:	af00      	add	r7, sp, #0
  resetEncoders();
 8006b0a:	f7fe f93d 	bl	8004d88 <resetEncoders>
  const int maxSpeed = 95; // Maximum motor speed
 8006b0e:	235f      	movs	r3, #95	@ 0x5f
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  const int minSpeed = 66; // Minimum speed to overcome friction
 8006b12:	2342      	movs	r3, #66	@ 0x42
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
  const int accelSteps = 300;
 8006b16:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006b1a:	623b      	str	r3, [r7, #32]
  const int target = 825;              // Counts to accelerate
 8006b1c:	f240 3339 	movw	r3, #825	@ 0x339
 8006b20:	61fb      	str	r3, [r7, #28]
  const int decelStart = target - 480; // When to start decelerating
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006b28:	61bb      	str	r3, [r7, #24]

  int currentSpeed = minSpeed; // Starting speed
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34

  while (1)
  {
    int left_counts = abs(getLeftEncoderCounts());
 8006b2e:	f7fe f917 	bl	8004d60 <getLeftEncoderCounts>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bfb8      	it	lt
 8006b38:	425b      	neglt	r3, r3
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	617b      	str	r3, [r7, #20]
    int right_counts = abs(getRightEncoderCounts());
 8006b3e:	f7fe f8fb 	bl	8004d38 <getRightEncoderCounts>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bfb8      	it	lt
 8006b48:	425b      	neglt	r3, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	613b      	str	r3, [r7, #16]
    int avg_counts = (left_counts + right_counts) / 2;
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4413      	add	r3, r2
 8006b54:	0fda      	lsrs	r2, r3, #31
 8006b56:	4413      	add	r3, r2
 8006b58:	105b      	asrs	r3, r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]

    if (IR[8] == 1)
 8006b5c:	4b41      	ldr	r3, [pc, #260]	@ (8006c64 <turn_Right_90_LR_IR8+0x160>)
 8006b5e:	7a1b      	ldrb	r3, [r3, #8]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d105      	bne.n	8006b70 <turn_Right_90_LR_IR8+0x6c>
    {
      junction_count = 1;
 8006b64:	4b40      	ldr	r3, [pc, #256]	@ (8006c68 <turn_Right_90_LR_IR8+0x164>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
      force_junc = 1;
 8006b6a:	4b40      	ldr	r3, [pc, #256]	@ (8006c6c <turn_Right_90_LR_IR8+0x168>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
      // No break here, so the loop continues
    }
    // Acceleration phase
    if (avg_counts < accelSteps)
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	da0c      	bge.n	8006b92 <turn_Right_90_LR_IR8+0x8e>
    {
      currentSpeed = minSpeed + (maxSpeed - minSpeed) * avg_counts / accelSteps;
 8006b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	fb03 f202 	mul.w	r2, r3, r2
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8c:	4413      	add	r3, r2
 8006b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b90:	e01e      	b.n	8006bd0 <turn_Right_90_LR_IR8+0xcc>
    }
    // Deceleration phase
    else if (avg_counts > decelStart)
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	dd18      	ble.n	8006bcc <turn_Right_90_LR_IR8+0xc8>
    {
      int remaining = target - avg_counts;
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	60bb      	str	r3, [r7, #8]
      if (remaining > 0)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dd0e      	ble.n	8006bc6 <turn_Right_90_LR_IR8+0xc2>
      {
        currentSpeed = minSpeed + (maxSpeed - minSpeed) * remaining / (target - decelStart);
 8006ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	fb03 f202 	mul.w	r2, r3, r2
 8006bb4:	69f9      	ldr	r1, [r7, #28]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	1acb      	subs	r3, r1, r3
 8006bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8006bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc0:	4413      	add	r3, r2
 8006bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc4:	e004      	b.n	8006bd0 <turn_Right_90_LR_IR8+0xcc>
      }
      else
      {
        currentSpeed = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bca:	e001      	b.n	8006bd0 <turn_Right_90_LR_IR8+0xcc>
      }
    }
    // Constant speed phase
    else
    {
      currentSpeed = maxSpeed;
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    // Balance correction
    int error = left_counts - right_counts;
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	607b      	str	r3, [r7, #4]
    int correction = error * 1;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]

    // Apply speeds with minimum guaranteed
    int speedL = -(currentSpeed + correction);
 8006bdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	425b      	negs	r3, r3
 8006be4:	633b      	str	r3, [r7, #48]	@ 0x30
    int speedR = currentSpeed - correction;
 8006be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Ensure minimum speed is maintained
    if (abs(speedL) < minSpeed)
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bfb8      	it	lt
 8006bf4:	425b      	neglt	r3, r3
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	dd07      	ble.n	8006c0c <turn_Right_90_LR_IR8+0x108>
      speedL = speedL < 0 ? -minSpeed : minSpeed;
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da02      	bge.n	8006c08 <turn_Right_90_LR_IR8+0x104>
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	425b      	negs	r3, r3
 8006c06:	e000      	b.n	8006c0a <turn_Right_90_LR_IR8+0x106>
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (abs(speedR) < minSpeed)
 8006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bfb8      	it	lt
 8006c12:	425b      	neglt	r3, r3
 8006c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c16:	429a      	cmp	r2, r3
 8006c18:	dd07      	ble.n	8006c2a <turn_Right_90_LR_IR8+0x126>
      speedR = speedR < 0 ? -minSpeed : minSpeed;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	da02      	bge.n	8006c26 <turn_Right_90_LR_IR8+0x122>
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	425b      	negs	r3, r3
 8006c24:	e000      	b.n	8006c28 <turn_Right_90_LR_IR8+0x124>
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    setMotorSpeedL(speedL);
 8006c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c2c:	f7fe fdc0 	bl	80057b0 <setMotorSpeedL>
    setMotorSpeedR(speedR);
 8006c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c32:	f7fe fd6f 	bl	8005714 <setMotorSpeedR>

    // Exit condition
    if (left_counts >= target && right_counts >= target)
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	f6ff af77 	blt.w	8006b2e <turn_Right_90_LR_IR8+0x2a>
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	da00      	bge.n	8006c4a <turn_Right_90_LR_IR8+0x146>
  {
 8006c48:	e771      	b.n	8006b2e <turn_Right_90_LR_IR8+0x2a>
    {
      break;
 8006c4a:	bf00      	nop
    }
  }

  m_stopLR();
 8006c4c:	f7fe fe16 	bl	800587c <m_stopLR>
  delay_ms(50);
 8006c50:	2032      	movs	r0, #50	@ 0x32
 8006c52:	f7fa fc5d 	bl	8001510 <delay_ms>
  resetEncoders();
 8006c56:	f7fe f897 	bl	8004d88 <resetEncoders>
}
 8006c5a:	bf00      	nop
 8006c5c:	3738      	adds	r7, #56	@ 0x38
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000468 	.word	0x20000468
 8006c68:	2000047c 	.word	0x2000047c
 8006c6c:	20000490 	.word	0x20000490

08006c70 <task1StateHandler>:

void task1StateHandler()
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
  switch (currentTask1SubState)
 8006c76:	4bb3      	ldr	r3, [pc, #716]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b1d      	cmp	r3, #29
 8006c7c:	f200 854d 	bhi.w	800771a <task1StateHandler+0xaaa>
 8006c80:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <task1StateHandler+0x18>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006d01 	.word	0x08006d01
 8006c8c:	08006d1f 	.word	0x08006d1f
 8006c90:	08006d29 	.word	0x08006d29
 8006c94:	08007379 	.word	0x08007379
 8006c98:	0800739b 	.word	0x0800739b
 8006c9c:	080073f7 	.word	0x080073f7
 8006ca0:	080074b3 	.word	0x080074b3
 8006ca4:	080074c9 	.word	0x080074c9
 8006ca8:	08006e29 	.word	0x08006e29
 8006cac:	08006dbf 	.word	0x08006dbf
 8006cb0:	08006dc7 	.word	0x08006dc7
 8006cb4:	08006df5 	.word	0x08006df5
 8006cb8:	08006e57 	.word	0x08006e57
 8006cbc:	08006edd 	.word	0x08006edd
 8006cc0:	08006efb 	.word	0x08006efb
 8006cc4:	08006f71 	.word	0x08006f71
 8006cc8:	08007001 	.word	0x08007001
 8006ccc:	08007017 	.word	0x08007017
 8006cd0:	08007059 	.word	0x08007059
 8006cd4:	0800709f 	.word	0x0800709f
 8006cd8:	08007149 	.word	0x08007149
 8006cdc:	08007193 	.word	0x08007193
 8006ce0:	080071df 	.word	0x080071df
 8006ce4:	08007293 	.word	0x08007293
 8006ce8:	080074fb 	.word	0x080074fb
 8006cec:	080075c5 	.word	0x080075c5
 8006cf0:	0800751d 	.word	0x0800751d
 8006cf4:	0800771b 	.word	0x0800771b
 8006cf8:	08007605 	.word	0x08007605
 8006cfc:	08007635 	.word	0x08007635
  {
  case STATE_TESTING:
    enc_driveR_T(1000, 70, 65);
 8006d00:	2241      	movs	r2, #65	@ 0x41
 8006d02:	2146      	movs	r1, #70	@ 0x46
 8006d04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006d08:	f7fb faaa 	bl	8002260 <enc_driveR_T>
    delay_ms(1000);
 8006d0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006d10:	f7fa fbfe 	bl	8001510 <delay_ms>
    currentTask1SubState = STATE_TESTING;
 8006d14:	4b8b      	ldr	r3, [pc, #556]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
    break;
 8006d1a:	f000 bcfe 	b.w	800771a <task1StateHandler+0xaaa>
  case STATE_TESTING2:
    enc_driveR(70);
 8006d1e:	2046      	movs	r0, #70	@ 0x46
 8006d20:	f7fb f9f8 	bl	8002114 <enc_driveR>
    break;
 8006d24:	f000 bcf9 	b.w	800771a <task1StateHandler+0xaaa>
  case STATE_INIT:
    display_TASK(1);
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f7fe ffd3 	bl	8005cd4 <display_TASK>
    // Check if STATE_INIT has already been processed
    if (!state_init_processed)
 8006d2e:	4b86      	ldr	r3, [pc, #536]	@ (8006f48 <task1StateHandler+0x2d8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d107      	bne.n	8006d46 <task1StateHandler+0xd6>
    {
      columns_visited++;        // Increment only once per transition
 8006d36:	4b85      	ldr	r3, [pc, #532]	@ (8006f4c <task1StateHandler+0x2dc>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	4a83      	ldr	r2, [pc, #524]	@ (8006f4c <task1StateHandler+0x2dc>)
 8006d3e:	6013      	str	r3, [r2, #0]
      state_init_processed = 1; // Mark the state as processed
 8006d40:	4b81      	ldr	r3, [pc, #516]	@ (8006f48 <task1StateHandler+0x2d8>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
    }
    junction_count = 0;
 8006d46:	4b82      	ldr	r3, [pc, #520]	@ (8006f50 <task1StateHandler+0x2e0>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
    enc_drive();
 8006d4c:	f7fa ffe0 	bl	8001d10 <enc_drive>

    if (IR[7] == 1 && IR[8] == 1)
 8006d50:	4b80      	ldr	r3, [pc, #512]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006d52:	79db      	ldrb	r3, [r3, #7]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d121      	bne.n	8006d9c <task1StateHandler+0x12c>
 8006d58:	4b7e      	ldr	r3, [pc, #504]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006d5a:	7a1b      	ldrb	r3, [r3, #8]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d11d      	bne.n	8006d9c <task1StateHandler+0x12c>
    {
      // Decelerate for 700 encoder counts
      enc_drive_decel(750, 80, 65);
 8006d60:	2241      	movs	r2, #65	@ 0x41
 8006d62:	2150      	movs	r1, #80	@ 0x50
 8006d64:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8006d68:	f7fa fcca 	bl	8001700 <enc_drive_decel>
      m_stopLR();
 8006d6c:	f7fe fd86 	bl	800587c <m_stopLR>
      delay_ms(80);
 8006d70:	2050      	movs	r0, #80	@ 0x50
 8006d72:	f7fa fbcd 	bl	8001510 <delay_ms>
      resetEncoders();
 8006d76:	f7fe f807 	bl	8004d88 <resetEncoders>
      turn_Right_90_LR_IR8();
 8006d7a:	f7ff fec3 	bl	8006b04 <turn_Right_90_LR_IR8>

      // STATE_linefollow_lastColumn
      if (force_junc == 1)
 8006d7e:	4b76      	ldr	r3, [pc, #472]	@ (8006f58 <task1StateHandler+0x2e8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d106      	bne.n	8006d94 <task1StateHandler+0x124>
      {
        force_junc = 0;
 8006d86:	4b74      	ldr	r3, [pc, #464]	@ (8006f58 <task1StateHandler+0x2e8>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
        currentTask1SubState = STATE_JUNC_Detected;
 8006d8c:	4b6d      	ldr	r3, [pc, #436]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006d8e:	2217      	movs	r2, #23
 8006d90:	701a      	strb	r2, [r3, #0]
      if (force_junc == 1)
 8006d92:	e00a      	b.n	8006daa <task1StateHandler+0x13a>
      }
      else
      {
        currentTask1SubState = STATE_TASK1;
 8006d94:	4b6b      	ldr	r3, [pc, #428]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006d96:	2208      	movs	r2, #8
 8006d98:	701a      	strb	r2, [r3, #0]
      if (force_junc == 1)
 8006d9a:	e006      	b.n	8006daa <task1StateHandler+0x13a>
      }
    }
    else if (columns_visited == 6)
 8006d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8006f4c <task1StateHandler+0x2dc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	d102      	bne.n	8006daa <task1StateHandler+0x13a>
    {
      currentTask1SubState = STATE_SWITCH_L_FOLLOW_LASTCOLUMN_2;
 8006da4:	4b67      	ldr	r3, [pc, #412]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006da6:	220b      	movs	r2, #11
 8006da8:	701a      	strb	r2, [r3, #0]
    }
    // Reset the flag when exiting the state
    if (currentTask1SubState != STATE_INIT)
 8006daa:	4b66      	ldr	r3, [pc, #408]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	f000 84ae 	beq.w	8007710 <task1StateHandler+0xaa0>
    {
      state_init_processed = 0;
 8006db4:	4b64      	ldr	r3, [pc, #400]	@ (8006f48 <task1StateHandler+0x2d8>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
    }
    break;
 8006dba:	f000 bca9 	b.w	8007710 <task1StateHandler+0xaa0>
  case STATE_Align_to_lastColumn:

    enc_drive();
 8006dbe:	f7fa ffa7 	bl	8001d10 <enc_drive>

    break;
 8006dc2:	f000 bcaa 	b.w	800771a <task1StateHandler+0xaaa>
  case STATE_SWITCH_L_FOLLOW_LASTCOLUMN:
    enc_drive();
 8006dc6:	f7fa ffa3 	bl	8001d10 <enc_drive>
    if (getLeftEncoderCounts() > 100 && getRightEncoderCounts() > 100)
 8006dca:	f7fd ffc9 	bl	8004d60 <getLeftEncoderCounts>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b64      	cmp	r3, #100	@ 0x64
 8006dd2:	dd0d      	ble.n	8006df0 <task1StateHandler+0x180>
 8006dd4:	f7fd ffb0 	bl	8004d38 <getRightEncoderCounts>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b64      	cmp	r3, #100	@ 0x64
 8006ddc:	dd08      	ble.n	8006df0 <task1StateHandler+0x180>
    {
      m_stopLR();
 8006dde:	f7fe fd4d 	bl	800587c <m_stopLR>
      delay_ms(100);
 8006de2:	2064      	movs	r0, #100	@ 0x64
 8006de4:	f7fa fb94 	bl	8001510 <delay_ms>
      currentTask1SubState = STATE_SWITCH_L_FOLLOW_LASTCOLUMN_2;
 8006de8:	4b56      	ldr	r3, [pc, #344]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006dea:	220b      	movs	r2, #11
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e001      	b.n	8006df4 <task1StateHandler+0x184>
    }
    else
    {
      enc_drive();
 8006df0:	f7fa ff8e 	bl	8001d10 <enc_drive>
    }
  case STATE_SWITCH_L_FOLLOW_LASTCOLUMN_2:
    enc_drive();
 8006df4:	f7fa ff8c 	bl	8001d10 <enc_drive>
    if (IR[7] == 1 && IR[8] == 1)
 8006df8:	4b56      	ldr	r3, [pc, #344]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006dfa:	79db      	ldrb	r3, [r3, #7]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10f      	bne.n	8006e20 <task1StateHandler+0x1b0>
 8006e00:	4b54      	ldr	r3, [pc, #336]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006e02:	7a1b      	ldrb	r3, [r3, #8]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d10b      	bne.n	8006e20 <task1StateHandler+0x1b0>
    {
      // Decelerate for 700 encoder counts
      enc_drive_decel(124, 85, 60);
 8006e08:	223c      	movs	r2, #60	@ 0x3c
 8006e0a:	2155      	movs	r1, #85	@ 0x55
 8006e0c:	207c      	movs	r0, #124	@ 0x7c
 8006e0e:	f7fa fc77 	bl	8001700 <enc_drive_decel>
      resetEncoders();
 8006e12:	f7fd ffb9 	bl	8004d88 <resetEncoders>
      currentMainState = TASK_2;
 8006e16:	4b51      	ldr	r3, [pc, #324]	@ (8006f5c <task1StateHandler+0x2ec>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      enc_drive();
    }
    break;
 8006e1c:	f000 bc7d 	b.w	800771a <task1StateHandler+0xaaa>
      enc_drive();
 8006e20:	f7fa ff76 	bl	8001d10 <enc_drive>
    break;
 8006e24:	f000 bc79 	b.w	800771a <task1StateHandler+0xaaa>
  case STATE_TASK1:
    line_follow();
 8006e28:	f7fb fd6a 	bl	8002900 <line_follow>
    if (junction_detected == 1)
 8006e2c:	4b4c      	ldr	r3, [pc, #304]	@ (8006f60 <task1StateHandler+0x2f0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d10c      	bne.n	8006e4e <task1StateHandler+0x1de>
    {
      brake_for_linefollow = 1;
 8006e34:	4b4b      	ldr	r3, [pc, #300]	@ (8006f64 <task1StateHandler+0x2f4>)
 8006e36:	2201      	movs	r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
      junction_count++;
 8006e3a:	4b45      	ldr	r3, [pc, #276]	@ (8006f50 <task1StateHandler+0x2e0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	4a43      	ldr	r2, [pc, #268]	@ (8006f50 <task1StateHandler+0x2e0>)
 8006e42:	6013      	str	r3, [r2, #0]
      currentTask1SubState = STATE_JUNC_Detected;
 8006e44:	4b3f      	ldr	r3, [pc, #252]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006e46:	2217      	movs	r2, #23
 8006e48:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      line_follow();
    }
    break;
 8006e4a:	f000 bc66 	b.w	800771a <task1StateHandler+0xaaa>
      line_follow();
 8006e4e:	f7fb fd57 	bl	8002900 <line_follow>
    break;
 8006e52:	f000 bc62 	b.w	800771a <task1StateHandler+0xaaa>
  case STATE_linefollow_lastColumn:
    line_follow_Last_Column();
 8006e56:	f7fb fe3f 	bl	8002ad8 <line_follow_Last_Column>
    if ((IR[7] == 1) && (IR[2] == 1 || IR[3] == 1 || IR[4] == 1))
 8006e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006e5c:	79db      	ldrb	r3, [r3, #7]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d132      	bne.n	8006ec8 <task1StateHandler+0x258>
 8006e62:	4b3c      	ldr	r3, [pc, #240]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006e64:	789b      	ldrb	r3, [r3, #2]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d007      	beq.n	8006e7a <task1StateHandler+0x20a>
 8006e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006e6c:	78db      	ldrb	r3, [r3, #3]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d003      	beq.n	8006e7a <task1StateHandler+0x20a>
 8006e72:	4b38      	ldr	r3, [pc, #224]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006e74:	791b      	ldrb	r3, [r3, #4]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d126      	bne.n	8006ec8 <task1StateHandler+0x258>
    {
      if (junc_count_lastColumn_verify == 0)
 8006e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f68 <task1StateHandler+0x2f8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d129      	bne.n	8006ed6 <task1StateHandler+0x266>
      {
        m_stopLR();
 8006e82:	f7fe fcfb 	bl	800587c <m_stopLR>
        junc_count_lastColumn++;
 8006e86:	4b39      	ldr	r3, [pc, #228]	@ (8006f6c <task1StateHandler+0x2fc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	4a37      	ldr	r2, [pc, #220]	@ (8006f6c <task1StateHandler+0x2fc>)
 8006e8e:	6013      	str	r3, [r2, #0]
        junc_count_lastColumn_verify = 1;
 8006e90:	4b35      	ldr	r3, [pc, #212]	@ (8006f68 <task1StateHandler+0x2f8>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
        resetEncoders();
 8006e96:	f7fd ff77 	bl	8004d88 <resetEncoders>
        while (getLeftEncoderCounts() < 740 && getRightEncoderCounts() < 740)
 8006e9a:	e001      	b.n	8006ea0 <task1StateHandler+0x230>
        {
          line_follow();
 8006e9c:	f7fb fd30 	bl	8002900 <line_follow>
        while (getLeftEncoderCounts() < 740 && getRightEncoderCounts() < 740)
 8006ea0:	f7fd ff5e 	bl	8004d60 <getLeftEncoderCounts>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f5b3 7f39 	cmp.w	r3, #740	@ 0x2e4
 8006eaa:	da05      	bge.n	8006eb8 <task1StateHandler+0x248>
 8006eac:	f7fd ff44 	bl	8004d38 <getRightEncoderCounts>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f5b3 7f39 	cmp.w	r3, #740	@ 0x2e4
 8006eb6:	dbf1      	blt.n	8006e9c <task1StateHandler+0x22c>
        }
        if (junc_count_lastColumn == 2)
 8006eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8006f6c <task1StateHandler+0x2fc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d10a      	bne.n	8006ed6 <task1StateHandler+0x266>
        {
          currentTask1SubState = STATE_TurnTO_Find_PAD;
 8006ec0:	4b20      	ldr	r3, [pc, #128]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006ec2:	220d      	movs	r2, #13
 8006ec4:	701a      	strb	r2, [r3, #0]
      if (junc_count_lastColumn_verify == 0)
 8006ec6:	e006      	b.n	8006ed6 <task1StateHandler+0x266>
        }
      }
    }
    else
    {
      junc_count_lastColumn_verify = 0;
 8006ec8:	4b27      	ldr	r3, [pc, #156]	@ (8006f68 <task1StateHandler+0x2f8>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
      line_follow_Last_Column();
 8006ece:	f7fb fe03 	bl	8002ad8 <line_follow_Last_Column>
    }
    break;
 8006ed2:	f000 bc22 	b.w	800771a <task1StateHandler+0xaaa>
      if (junc_count_lastColumn_verify == 0)
 8006ed6:	bf00      	nop
    break;
 8006ed8:	f000 bc1f 	b.w	800771a <task1StateHandler+0xaaa>
  case STATE_TurnTO_Find_PAD:
    m_stopLR();
 8006edc:	f7fe fcce 	bl	800587c <m_stopLR>
    delay_ms(200);
 8006ee0:	20c8      	movs	r0, #200	@ 0xc8
 8006ee2:	f7fa fb15 	bl	8001510 <delay_ms>
    turn_90_degreesL_fromLastColumn();
 8006ee6:	f7fc fe11 	bl	8003b0c <turn_90_degreesL_fromLastColumn>
    delay_ms(100);
 8006eea:	2064      	movs	r0, #100	@ 0x64
 8006eec:	f7fa fb10 	bl	8001510 <delay_ms>
    currentTask1SubState = STATE_Find_PAD;
 8006ef0:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006ef2:	220e      	movs	r2, #14
 8006ef4:	701a      	strb	r2, [r3, #0]

    break;
 8006ef6:	f000 bc10 	b.w	800771a <task1StateHandler+0xaaa>
  case STATE_Find_PAD:
    enc_drive();
 8006efa:	f7fa ff09 	bl	8001d10 <enc_drive>
    if (IR[1] == 1 || IR[2] == 1 || IR[3] == 1 || IR[4] == 1 || IR[5] == 1)
 8006efe:	4b15      	ldr	r3, [pc, #84]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d00f      	beq.n	8006f26 <task1StateHandler+0x2b6>
 8006f06:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006f08:	789b      	ldrb	r3, [r3, #2]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d00b      	beq.n	8006f26 <task1StateHandler+0x2b6>
 8006f0e:	4b11      	ldr	r3, [pc, #68]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006f10:	78db      	ldrb	r3, [r3, #3]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d007      	beq.n	8006f26 <task1StateHandler+0x2b6>
 8006f16:	4b0f      	ldr	r3, [pc, #60]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006f18:	791b      	ldrb	r3, [r3, #4]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d003      	beq.n	8006f26 <task1StateHandler+0x2b6>
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <task1StateHandler+0x2e4>)
 8006f20:	795b      	ldrb	r3, [r3, #5]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d10a      	bne.n	8006f3c <task1StateHandler+0x2cc>
    {
      m_stopLR();
 8006f26:	f7fe fca9 	bl	800587c <m_stopLR>
      delay_ms(100);
 8006f2a:	2064      	movs	r0, #100	@ 0x64
 8006f2c:	f7fa faf0 	bl	8001510 <delay_ms>
      resetEncoders();
 8006f30:	f7fd ff2a 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_Pad_Colour_Detection;
 8006f34:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <task1StateHandler+0x2d4>)
 8006f36:	220f      	movs	r2, #15
 8006f38:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      enc_drive();
    }
    break;
 8006f3a:	e3ee      	b.n	800771a <task1StateHandler+0xaaa>
      enc_drive();
 8006f3c:	f7fa fee8 	bl	8001d10 <enc_drive>
    break;
 8006f40:	e3eb      	b.n	800771a <task1StateHandler+0xaaa>
 8006f42:	bf00      	nop
 8006f44:	20000038 	.word	0x20000038
 8006f48:	2000048c 	.word	0x2000048c
 8006f4c:	20000488 	.word	0x20000488
 8006f50:	2000047c 	.word	0x2000047c
 8006f54:	20000468 	.word	0x20000468
 8006f58:	20000490 	.word	0x20000490
 8006f5c:	20000472 	.word	0x20000472
 8006f60:	20000478 	.word	0x20000478
 8006f64:	200004a8 	.word	0x200004a8
 8006f68:	20000480 	.word	0x20000480
 8006f6c:	20000484 	.word	0x20000484
  case STATE_Pad_Colour_Detection:
    enc_drive();
 8006f70:	f7fa fece 	bl	8001d10 <enc_drive>
    if (getLeftEncoderCounts() > 250 && getRightEncoderCounts() > 250)
 8006f74:	f7fd fef4 	bl	8004d60 <getLeftEncoderCounts>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2bfa      	cmp	r3, #250	@ 0xfa
 8006f7c:	dd3c      	ble.n	8006ff8 <task1StateHandler+0x388>
 8006f7e:	f7fd fedb 	bl	8004d38 <getRightEncoderCounts>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2bfa      	cmp	r3, #250	@ 0xfa
 8006f86:	dd37      	ble.n	8006ff8 <task1StateHandler+0x388>
    {
      m_stopLR();
 8006f88:	f7fe fc78 	bl	800587c <m_stopLR>
      delay_ms(100);
 8006f8c:	2064      	movs	r0, #100	@ 0x64
 8006f8e:	f7fa fabf 	bl	8001510 <delay_ms>
      turn_20_degrees_L();
 8006f92:	f7fc fe0b 	bl	8003bac <turn_20_degrees_L>
      delay_ms(100);
 8006f96:	2064      	movs	r0, #100	@ 0x64
 8006f98:	f7fa faba 	bl	8001510 <delay_ms>

      setTCAChannel(0);
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f7fd ff03 	bl	8004da8 <setTCAChannel>
      delay_ms(10);
 8006fa2:	200a      	movs	r0, #10
 8006fa4:	f7fa fab4 	bl	8001510 <delay_ms>
      for (int i = 0; i < 10; i++)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	e007      	b.n	8006fbe <task1StateHandler+0x34e>
      {
        Bottom_C_PAD_Sensor();
 8006fae:	f002 fe2f 	bl	8009c10 <Bottom_C_PAD_Sensor>
        delay_ms(20);
 8006fb2:	2014      	movs	r0, #20
 8006fb4:	f7fa faac 	bl	8001510 <delay_ms>
      for (int i = 0; i < 10; i++)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b09      	cmp	r3, #9
 8006fc2:	ddf4      	ble.n	8006fae <task1StateHandler+0x33e>
      }
      if (bottomColor == COLOR_RED)
 8006fc4:	4bbf      	ldr	r3, [pc, #764]	@ (80072c4 <task1StateHandler+0x654>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d10a      	bne.n	8006fe2 <task1StateHandler+0x372>
      {
        delay_ms(800);
 8006fcc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8006fd0:	f7fa fa9e 	bl	8001510 <delay_ms>
        RED_PAD = 1;
 8006fd4:	4bbc      	ldr	r3, [pc, #752]	@ (80072c8 <task1StateHandler+0x658>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
        currentTask1SubState = STATE_reposition_after_pad_color;
 8006fda:	4bbc      	ldr	r3, [pc, #752]	@ (80072cc <task1StateHandler+0x65c>)
 8006fdc:	2210      	movs	r2, #16
 8006fde:	701a      	strb	r2, [r3, #0]
      if (bottomColor == COLOR_RED)
 8006fe0:	e00d      	b.n	8006ffe <task1StateHandler+0x38e>
      }
      else
      {
        delay_ms(800);
 8006fe2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8006fe6:	f7fa fa93 	bl	8001510 <delay_ms>
        BLUE_PAD = 1;
 8006fea:	4bb9      	ldr	r3, [pc, #740]	@ (80072d0 <task1StateHandler+0x660>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
        currentTask1SubState = STATE_reposition_after_pad_color;
 8006ff0:	4bb6      	ldr	r3, [pc, #728]	@ (80072cc <task1StateHandler+0x65c>)
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	701a      	strb	r2, [r3, #0]
      if (bottomColor == COLOR_RED)
 8006ff6:	e002      	b.n	8006ffe <task1StateHandler+0x38e>
      }
    }
    else
    {
      enc_drive();
 8006ff8:	f7fa fe8a 	bl	8001d10 <enc_drive>
    }
    break;
 8006ffc:	e38d      	b.n	800771a <task1StateHandler+0xaaa>
 8006ffe:	e38c      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_reposition_after_pad_color:
    turn_20_degrees_R();
 8007000:	f7fc fdf4 	bl	8003bec <turn_20_degrees_R>
    delay_ms(100);
 8007004:	2064      	movs	r0, #100	@ 0x64
 8007006:	f7fa fa83 	bl	8001510 <delay_ms>
    resetEncoders();
 800700a:	f7fd febd 	bl	8004d88 <resetEncoders>
    currentTask1SubState = STATE_reposition_after_pad_color_1;
 800700e:	4baf      	ldr	r3, [pc, #700]	@ (80072cc <task1StateHandler+0x65c>)
 8007010:	2211      	movs	r2, #17
 8007012:	701a      	strb	r2, [r3, #0]

    break;
 8007014:	e381      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_reposition_after_pad_color_1:
    enc_driveR(70);
 8007016:	2046      	movs	r0, #70	@ 0x46
 8007018:	f7fb f87c 	bl	8002114 <enc_driveR>
    if (getLeftEncoderCounts() < -110 && getRightEncoderCounts() < -110)
 800701c:	f7fd fea0 	bl	8004d60 <getLeftEncoderCounts>
 8007020:	4603      	mov	r3, r0
 8007022:	f113 0f6e 	cmn.w	r3, #110	@ 0x6e
 8007026:	da13      	bge.n	8007050 <task1StateHandler+0x3e0>
 8007028:	f7fd fe86 	bl	8004d38 <getRightEncoderCounts>
 800702c:	4603      	mov	r3, r0
 800702e:	f113 0f6e 	cmn.w	r3, #110	@ 0x6e
 8007032:	da0d      	bge.n	8007050 <task1StateHandler+0x3e0>
    {
      m_stopLR();
 8007034:	f7fe fc22 	bl	800587c <m_stopLR>
      delay_ms(100);
 8007038:	2064      	movs	r0, #100	@ 0x64
 800703a:	f7fa fa69 	bl	8001510 <delay_ms>
      turn_90_degreesR_After_PadColor();
 800703e:	f7fc fcad 	bl	800399c <turn_90_degreesR_After_PadColor>
      delay_ms(100);
 8007042:	2064      	movs	r0, #100	@ 0x64
 8007044:	f7fa fa64 	bl	8001510 <delay_ms>
      currentTask1SubState = STATE_reposition_after_pad_color_2;
 8007048:	4ba0      	ldr	r3, [pc, #640]	@ (80072cc <task1StateHandler+0x65c>)
 800704a:	2212      	movs	r2, #18
 800704c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      enc_driveR(70);
    }
    break;
 800704e:	e364      	b.n	800771a <task1StateHandler+0xaaa>
      enc_driveR(70);
 8007050:	2046      	movs	r0, #70	@ 0x46
 8007052:	f7fb f85f 	bl	8002114 <enc_driveR>
    break;
 8007056:	e360      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_reposition_after_pad_color_2:
    enc_driveR(70);
 8007058:	2046      	movs	r0, #70	@ 0x46
 800705a:	f7fb f85b 	bl	8002114 <enc_driveR>
    if (getLeftEncoderCounts() < -390 && getRightEncoderCounts() < -390)
 800705e:	f7fd fe7f 	bl	8004d60 <getLeftEncoderCounts>
 8007062:	4603      	mov	r3, r0
 8007064:	f513 7fc3 	cmn.w	r3, #390	@ 0x186
 8007068:	da15      	bge.n	8007096 <task1StateHandler+0x426>
 800706a:	f7fd fe65 	bl	8004d38 <getRightEncoderCounts>
 800706e:	4603      	mov	r3, r0
 8007070:	f513 7fc3 	cmn.w	r3, #390	@ 0x186
 8007074:	da0f      	bge.n	8007096 <task1StateHandler+0x426>
    {
      m_stopLR();
 8007076:	f7fe fc01 	bl	800587c <m_stopLR>
      delay_ms(100);
 800707a:	2064      	movs	r0, #100	@ 0x64
 800707c:	f7fa fa48 	bl	8001510 <delay_ms>
      turn_90_degreesR1_reverse_FOR_PAD();
 8007080:	f7fc fd20 	bl	8003ac4 <turn_90_degreesR1_reverse_FOR_PAD>
      delay_ms(100);
 8007084:	2064      	movs	r0, #100	@ 0x64
 8007086:	f7fa fa43 	bl	8001510 <delay_ms>
      resetEncoders();
 800708a:	f7fd fe7d 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_reposition_after_pad_color_3;
 800708e:	4b8f      	ldr	r3, [pc, #572]	@ (80072cc <task1StateHandler+0x65c>)
 8007090:	2213      	movs	r2, #19
 8007092:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      enc_driveR(70);
    }
    break;
 8007094:	e341      	b.n	800771a <task1StateHandler+0xaaa>
      enc_driveR(70);
 8007096:	2046      	movs	r0, #70	@ 0x46
 8007098:	f7fb f83c 	bl	8002114 <enc_driveR>
    break;
 800709c:	e33d      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_reposition_after_pad_color_3:
    enc_driveR(70);
 800709e:	2046      	movs	r0, #70	@ 0x46
 80070a0:	f7fb f838 	bl	8002114 <enc_driveR>
    if (getLeftEncoderCounts() < -450 && getRightEncoderCounts() < -450)
 80070a4:	f7fd fe5c 	bl	8004d60 <getLeftEncoderCounts>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80070ae:	da45      	bge.n	800713c <task1StateHandler+0x4cc>
 80070b0:	f7fd fe42 	bl	8004d38 <getRightEncoderCounts>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80070ba:	da3f      	bge.n	800713c <task1StateHandler+0x4cc>
    {
      m_stopLR();
 80070bc:	f7fe fbde 	bl	800587c <m_stopLR>
      delay_ms(800);
 80070c0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80070c4:	f7fa fa24 	bl	8001510 <delay_ms>
      if (RED_PAD == 1)
 80070c8:	4b7f      	ldr	r3, [pc, #508]	@ (80072c8 <task1StateHandler+0x658>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d118      	bne.n	8007102 <task1StateHandler+0x492>
      {
        open_yellow_door();
 80070d0:	f7fa f820 	bl	8001114 <open_yellow_door>
        TankLift();
 80070d4:	f7f9 ff6e 	bl	8000fb4 <TankLift>
        delay_ms(1000);
 80070d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80070dc:	f7fa fa18 	bl	8001510 <delay_ms>
        close_yellow_door();
 80070e0:	f7fa f83c 	bl	800115c <close_yellow_door>
        TankLower();
 80070e4:	f7f9 ff7e 	bl	8000fe4 <TankLower>
        next_pad_blue = 1;
 80070e8:	4b7a      	ldr	r3, [pc, #488]	@ (80072d4 <task1StateHandler+0x664>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
        delay_ms(1000);
 80070ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80070f2:	f7fa fa0d 	bl	8001510 <delay_ms>
        resetEncoders();
 80070f6:	f7fd fe47 	bl	8004d88 <resetEncoders>
        currentTask1SubState = STATE_reposition_for_2nd_pad;
 80070fa:	4b74      	ldr	r3, [pc, #464]	@ (80072cc <task1StateHandler+0x65c>)
 80070fc:	2214      	movs	r2, #20
 80070fe:	701a      	strb	r2, [r3, #0]
      if (RED_PAD == 1)
 8007100:	e020      	b.n	8007144 <task1StateHandler+0x4d4>
      }
      else if (BLUE_PAD == 1)
 8007102:	4b73      	ldr	r3, [pc, #460]	@ (80072d0 <task1StateHandler+0x660>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d11c      	bne.n	8007144 <task1StateHandler+0x4d4>
      {
        open_white_door();
 800710a:	f7f9 ffbb 	bl	8001084 <open_white_door>
        TankLift();
 800710e:	f7f9 ff51 	bl	8000fb4 <TankLift>
        delay_ms(1000);
 8007112:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007116:	f7fa f9fb 	bl	8001510 <delay_ms>
        close_white_door();
 800711a:	f7f9 ffd7 	bl	80010cc <close_white_door>
        TankLower();
 800711e:	f7f9 ff61 	bl	8000fe4 <TankLower>
        next_pad_red = 1;
 8007122:	4b6d      	ldr	r3, [pc, #436]	@ (80072d8 <task1StateHandler+0x668>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
        delay_ms(1000);
 8007128:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800712c:	f7fa f9f0 	bl	8001510 <delay_ms>
        resetEncoders();
 8007130:	f7fd fe2a 	bl	8004d88 <resetEncoders>
        currentTask1SubState = STATE_reposition_for_2nd_pad;
 8007134:	4b65      	ldr	r3, [pc, #404]	@ (80072cc <task1StateHandler+0x65c>)
 8007136:	2214      	movs	r2, #20
 8007138:	701a      	strb	r2, [r3, #0]
      if (RED_PAD == 1)
 800713a:	e003      	b.n	8007144 <task1StateHandler+0x4d4>
      }
    }
    else
    {
      enc_driveR(70);
 800713c:	2046      	movs	r0, #70	@ 0x46
 800713e:	f7fa ffe9 	bl	8002114 <enc_driveR>
    }
    break;
 8007142:	e2ea      	b.n	800771a <task1StateHandler+0xaaa>
      if (RED_PAD == 1)
 8007144:	bf00      	nop
    break;
 8007146:	e2e8      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_reposition_for_2nd_pad:
    enc_drive();
 8007148:	f7fa fde2 	bl	8001d10 <enc_drive>
    if (getLeftEncoderCounts() > 448 && getRightEncoderCounts() > 448)
 800714c:	f7fd fe08 	bl	8004d60 <getLeftEncoderCounts>
 8007150:	4603      	mov	r3, r0
 8007152:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8007156:	dd18      	ble.n	800718a <task1StateHandler+0x51a>
 8007158:	f7fd fdee 	bl	8004d38 <getRightEncoderCounts>
 800715c:	4603      	mov	r3, r0
 800715e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8007162:	dd12      	ble.n	800718a <task1StateHandler+0x51a>
    {
      turn_90_degreesL1_reverse_FROM_PAD();
 8007164:	f7fc fd01 	bl	8003b6a <turn_90_degreesL1_reverse_FROM_PAD>
      delay_ms(100);
 8007168:	2064      	movs	r0, #100	@ 0x64
 800716a:	f7fa f9d1 	bl	8001510 <delay_ms>
      resetEncoders();
 800716e:	f7fd fe0b 	bl	8004d88 <resetEncoders>
      if (task_done == 1)
 8007172:	4b5a      	ldr	r3, [pc, #360]	@ (80072dc <task1StateHandler+0x66c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d103      	bne.n	8007182 <task1StateHandler+0x512>
      {
        currentTask1SubState = STATE_TASK_DONE;
 800717a:	4b54      	ldr	r3, [pc, #336]	@ (80072cc <task1StateHandler+0x65c>)
 800717c:	221c      	movs	r2, #28
 800717e:	701a      	strb	r2, [r3, #0]
      if (task_done == 1)
 8007180:	e006      	b.n	8007190 <task1StateHandler+0x520>
      }
      else
      {
        currentTask1SubState = STATE_reposition_for_2nd_pad_1;
 8007182:	4b52      	ldr	r3, [pc, #328]	@ (80072cc <task1StateHandler+0x65c>)
 8007184:	2215      	movs	r2, #21
 8007186:	701a      	strb	r2, [r3, #0]
      if (task_done == 1)
 8007188:	e002      	b.n	8007190 <task1StateHandler+0x520>
      }
    }
    else
    {
      enc_drive();
 800718a:	f7fa fdc1 	bl	8001d10 <enc_drive>
    }

    break;
 800718e:	e2c4      	b.n	800771a <task1StateHandler+0xaaa>
 8007190:	e2c3      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_reposition_for_2nd_pad_1:
    enc_drive();
 8007192:	f7fa fdbd 	bl	8001d10 <enc_drive>
    if (getLeftEncoderCounts() > 1788 && getRightEncoderCounts() > 1788)
 8007196:	f7fd fde3 	bl	8004d60 <getLeftEncoderCounts>
 800719a:	4603      	mov	r3, r0
 800719c:	461a      	mov	r2, r3
 800719e:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 80071a2:	429a      	cmp	r2, r3
 80071a4:	dd18      	ble.n	80071d8 <task1StateHandler+0x568>
 80071a6:	f7fd fdc7 	bl	8004d38 <getRightEncoderCounts>
 80071aa:	4603      	mov	r3, r0
 80071ac:	461a      	mov	r2, r3
 80071ae:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 80071b2:	429a      	cmp	r2, r3
 80071b4:	dd10      	ble.n	80071d8 <task1StateHandler+0x568>
    {
      m_stopLR();
 80071b6:	f7fe fb61 	bl	800587c <m_stopLR>
      delay_ms(100);
 80071ba:	2064      	movs	r0, #100	@ 0x64
 80071bc:	f7fa f9a8 	bl	8001510 <delay_ms>
      turn_90_degreesR1_reverse_FOR_PAD();
 80071c0:	f7fc fc80 	bl	8003ac4 <turn_90_degreesR1_reverse_FOR_PAD>
      delay_ms(800);
 80071c4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80071c8:	f7fa f9a2 	bl	8001510 <delay_ms>
      resetEncoders();
 80071cc:	f7fd fddc 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_reposition_for_2nd_pad_2;
 80071d0:	4b3e      	ldr	r3, [pc, #248]	@ (80072cc <task1StateHandler+0x65c>)
 80071d2:	2216      	movs	r2, #22
 80071d4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      enc_drive();
    }
    break;
 80071d6:	e2a0      	b.n	800771a <task1StateHandler+0xaaa>
      enc_drive();
 80071d8:	f7fa fd9a 	bl	8001d10 <enc_drive>
    break;
 80071dc:	e29d      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_reposition_for_2nd_pad_2:
    enc_driveR(70);
 80071de:	2046      	movs	r0, #70	@ 0x46
 80071e0:	f7fa ff98 	bl	8002114 <enc_driveR>
    if (getLeftEncoderCounts() < -500 && getRightEncoderCounts() < -500)
 80071e4:	f7fd fdbc 	bl	8004d60 <getLeftEncoderCounts>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80071ee:	da4a      	bge.n	8007286 <task1StateHandler+0x616>
 80071f0:	f7fd fda2 	bl	8004d38 <getRightEncoderCounts>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80071fa:	da44      	bge.n	8007286 <task1StateHandler+0x616>
    {
      m_stopLR();
 80071fc:	f7fe fb3e 	bl	800587c <m_stopLR>
      delay_ms(800);
 8007200:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8007204:	f7fa f984 	bl	8001510 <delay_ms>
      if (next_pad_red == 1)
 8007208:	4b33      	ldr	r3, [pc, #204]	@ (80072d8 <task1StateHandler+0x668>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d11b      	bne.n	8007248 <task1StateHandler+0x5d8>
      {
        open_yellow_door();
 8007210:	f7f9 ff80 	bl	8001114 <open_yellow_door>
        TankLift();
 8007214:	f7f9 fece 	bl	8000fb4 <TankLift>
        delay_ms(1000);
 8007218:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800721c:	f7fa f978 	bl	8001510 <delay_ms>
        close_yellow_door();
 8007220:	f7f9 ff9c 	bl	800115c <close_yellow_door>
        TankLower();
 8007224:	f7f9 fede 	bl	8000fe4 <TankLower>
        RED_PAD = 0;
 8007228:	4b27      	ldr	r3, [pc, #156]	@ (80072c8 <task1StateHandler+0x658>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
        delay_ms(1000);
 800722e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007232:	f7fa f96d 	bl	8001510 <delay_ms>
        resetEncoders();
 8007236:	f7fd fda7 	bl	8004d88 <resetEncoders>
        task_done = 1;
 800723a:	4b28      	ldr	r3, [pc, #160]	@ (80072dc <task1StateHandler+0x66c>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
        currentTask1SubState = STATE_reposition_for_2nd_pad;
 8007240:	4b22      	ldr	r3, [pc, #136]	@ (80072cc <task1StateHandler+0x65c>)
 8007242:	2214      	movs	r2, #20
 8007244:	701a      	strb	r2, [r3, #0]
      if (next_pad_red == 1)
 8007246:	e022      	b.n	800728e <task1StateHandler+0x61e>
      }
      else if (next_pad_blue == 1)
 8007248:	4b22      	ldr	r3, [pc, #136]	@ (80072d4 <task1StateHandler+0x664>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d11e      	bne.n	800728e <task1StateHandler+0x61e>
      {
        open_white_door();
 8007250:	f7f9 ff18 	bl	8001084 <open_white_door>
        TankLift();
 8007254:	f7f9 feae 	bl	8000fb4 <TankLift>
        delay_ms(100);
 8007258:	2064      	movs	r0, #100	@ 0x64
 800725a:	f7fa f959 	bl	8001510 <delay_ms>
        close_white_door();
 800725e:	f7f9 ff35 	bl	80010cc <close_white_door>
        TankLower();
 8007262:	f7f9 febf 	bl	8000fe4 <TankLower>
        BLUE_PAD = 0;
 8007266:	4b1a      	ldr	r3, [pc, #104]	@ (80072d0 <task1StateHandler+0x660>)
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
        delay_ms(1000);
 800726c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007270:	f7fa f94e 	bl	8001510 <delay_ms>
        resetEncoders();
 8007274:	f7fd fd88 	bl	8004d88 <resetEncoders>
        task_done = 1;
 8007278:	4b18      	ldr	r3, [pc, #96]	@ (80072dc <task1StateHandler+0x66c>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
        currentTask1SubState = STATE_reposition_for_2nd_pad;
 800727e:	4b13      	ldr	r3, [pc, #76]	@ (80072cc <task1StateHandler+0x65c>)
 8007280:	2214      	movs	r2, #20
 8007282:	701a      	strb	r2, [r3, #0]
      if (next_pad_red == 1)
 8007284:	e003      	b.n	800728e <task1StateHandler+0x61e>
      }
    }
    else
    {
      enc_driveR(70);
 8007286:	2046      	movs	r0, #70	@ 0x46
 8007288:	f7fa ff44 	bl	8002114 <enc_driveR>
    }
    break;
 800728c:	e245      	b.n	800771a <task1StateHandler+0xaaa>
      if (next_pad_red == 1)
 800728e:	bf00      	nop
    break;
 8007290:	e243      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_JUNC_Detected:
    cylinder_detected = 0;
 8007292:	4b13      	ldr	r3, [pc, #76]	@ (80072e0 <task1StateHandler+0x670>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
    if (brake_for_linefollow == 1)
 8007298:	4b12      	ldr	r3, [pc, #72]	@ (80072e4 <task1StateHandler+0x674>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d10c      	bne.n	80072ba <task1StateHandler+0x64a>
    {
      brake_for_linefollow = 0;
 80072a0:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <task1StateHandler+0x674>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
      enc_drive_decel(100, 80, 65);
 80072a6:	2241      	movs	r2, #65	@ 0x41
 80072a8:	2150      	movs	r1, #80	@ 0x50
 80072aa:	2064      	movs	r0, #100	@ 0x64
 80072ac:	f7fa fa28 	bl	8001700 <enc_drive_decel>
      m_stopLR();
 80072b0:	f7fe fae4 	bl	800587c <m_stopLR>
      delay_ms(30);
 80072b4:	201e      	movs	r0, #30
 80072b6:	f7fa f92b 	bl	8001510 <delay_ms>
    }
    resetEncoders();
 80072ba:	f7fd fd65 	bl	8004d88 <resetEncoders>
    for (int i = 0; i < 10; i++)
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	e01e      	b.n	8007302 <task1StateHandler+0x692>
 80072c4:	200005ca 	.word	0x200005ca
 80072c8:	20000494 	.word	0x20000494
 80072cc:	20000038 	.word	0x20000038
 80072d0:	20000498 	.word	0x20000498
 80072d4:	2000049c 	.word	0x2000049c
 80072d8:	200004a0 	.word	0x200004a0
 80072dc:	200004a4 	.word	0x200004a4
 80072e0:	20000124 	.word	0x20000124
 80072e4:	200004a8 	.word	0x200004a8
    {
      Distance1 = Ultrasonic_GetDistance(0);
 80072e8:	2000      	movs	r0, #0
 80072ea:	f002 fd79 	bl	8009de0 <Ultrasonic_GetDistance>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	4bac      	ldr	r3, [pc, #688]	@ (80075a4 <task1StateHandler+0x934>)
 80072f4:	601a      	str	r2, [r3, #0]
      delay_ms(50);
 80072f6:	2032      	movs	r0, #50	@ 0x32
 80072f8:	f7fa f90a 	bl	8001510 <delay_ms>
    for (int i = 0; i < 10; i++)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	3301      	adds	r3, #1
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b09      	cmp	r3, #9
 8007306:	ddef      	ble.n	80072e8 <task1StateHandler+0x678>
    }
    line_follow_with_ultrasonic_check(800);
 8007308:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800730c:	f7fb fd90 	bl	8002e30 <line_follow_with_ultrasonic_check>
    enc_drive_decel(250, 80, 65);
 8007310:	2241      	movs	r2, #65	@ 0x41
 8007312:	2150      	movs	r1, #80	@ 0x50
 8007314:	20fa      	movs	r0, #250	@ 0xfa
 8007316:	f7fa f9f3 	bl	8001700 <enc_drive_decel>
    m_stopLR();
 800731a:	f7fe faaf 	bl	800587c <m_stopLR>
    delay_ms(10);
 800731e:	200a      	movs	r0, #10
 8007320:	f7fa f8f6 	bl	8001510 <delay_ms>
    setTCAChannel(0);
 8007324:	2000      	movs	r0, #0
 8007326:	f7fd fd3f 	bl	8004da8 <setTCAChannel>
    delay_ms(10);
 800732a:	200a      	movs	r0, #10
 800732c:	f7fa f8f0 	bl	8001510 <delay_ms>
    for (int i = 0; i < 10; i++)
 8007330:	2300      	movs	r3, #0
 8007332:	607b      	str	r3, [r7, #4]
 8007334:	e007      	b.n	8007346 <task1StateHandler+0x6d6>
    {
      Bottom_C_PAD_Sensor();
 8007336:	f002 fc6b 	bl	8009c10 <Bottom_C_PAD_Sensor>
      delay_ms(5);
 800733a:	2005      	movs	r0, #5
 800733c:	f7fa f8e8 	bl	8001510 <delay_ms>
    for (int i = 0; i < 10; i++)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3301      	adds	r3, #1
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b09      	cmp	r3, #9
 800734a:	ddf4      	ble.n	8007336 <task1StateHandler+0x6c6>
    }
    if (bottomColor == COLOR_GREEN)
 800734c:	4b96      	ldr	r3, [pc, #600]	@ (80075a8 <task1StateHandler+0x938>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b04      	cmp	r3, #4
 8007352:	d103      	bne.n	800735c <task1StateHandler+0x6ec>
    {
      currentTask1SubState = STATE_G_DETECTED;
 8007354:	4b95      	ldr	r3, [pc, #596]	@ (80075ac <task1StateHandler+0x93c>)
 8007356:	2203      	movs	r2, #3
 8007358:	701a      	strb	r2, [r3, #0]
      break; // Add break statement here
 800735a:	e1de      	b.n	800771a <task1StateHandler+0xaaa>
    }
    else
    {
      if (junction_count == 3)
 800735c:	4b94      	ldr	r3, [pc, #592]	@ (80075b0 <task1StateHandler+0x940>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d103      	bne.n	800736c <task1StateHandler+0x6fc>
      {
        currentTask1SubState = STATE_Grid_reverse;
 8007364:	4b91      	ldr	r3, [pc, #580]	@ (80075ac <task1StateHandler+0x93c>)
 8007366:	2207      	movs	r2, #7
 8007368:	701a      	strb	r2, [r3, #0]
        break;
 800736a:	e1d6      	b.n	800771a <task1StateHandler+0xaaa>
      }
      resetEncoders();
 800736c:	f7fd fd0c 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_TASK1;
 8007370:	4b8e      	ldr	r3, [pc, #568]	@ (80075ac <task1StateHandler+0x93c>)
 8007372:	2208      	movs	r2, #8
 8007374:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007376:	e1d0      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_G_DETECTED:
    if (cylinder_detected == 1)
 8007378:	4b8e      	ldr	r3, [pc, #568]	@ (80075b4 <task1StateHandler+0x944>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d108      	bne.n	8007392 <task1StateHandler+0x722>
    {
      resetEncoders();
 8007380:	f7fd fd02 	bl	8004d88 <resetEncoders>
      cylinder_detected = 0;
 8007384:	4b8b      	ldr	r3, [pc, #556]	@ (80075b4 <task1StateHandler+0x944>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
      currentTask1SubState = STATE_Obj_C_detection;
 800738a:	4b88      	ldr	r3, [pc, #544]	@ (80075ac <task1StateHandler+0x93c>)
 800738c:	2204      	movs	r2, #4
 800738e:	701a      	strb	r2, [r3, #0]
      break;
 8007390:	e1c3      	b.n	800771a <task1StateHandler+0xaaa>
      // currentState = STATE_Grid_reverse;
    }
    else
    {
      currentTask1SubState = STATE_TASK1;
 8007392:	4b86      	ldr	r3, [pc, #536]	@ (80075ac <task1StateHandler+0x93c>)
 8007394:	2208      	movs	r2, #8
 8007396:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007398:	e1bf      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_Obj_C_detection:
    enc_driveR(70);
 800739a:	2046      	movs	r0, #70	@ 0x46
 800739c:	f7fa feba 	bl	8002114 <enc_driveR>
    if (IR[7] == 1 && IR[8] == 1)
 80073a0:	4b85      	ldr	r3, [pc, #532]	@ (80075b8 <task1StateHandler+0x948>)
 80073a2:	79db      	ldrb	r3, [r3, #7]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d122      	bne.n	80073ee <task1StateHandler+0x77e>
 80073a8:	4b83      	ldr	r3, [pc, #524]	@ (80075b8 <task1StateHandler+0x948>)
 80073aa:	7a1b      	ldrb	r3, [r3, #8]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d11e      	bne.n	80073ee <task1StateHandler+0x77e>
    {
      enc_driveR_decel(56, 70, 60);
 80073b0:	223c      	movs	r2, #60	@ 0x3c
 80073b2:	2146      	movs	r1, #70	@ 0x46
 80073b4:	2038      	movs	r0, #56	@ 0x38
 80073b6:	f7fa fa9b 	bl	80018f0 <enc_driveR_decel>
      m_stopLR();
 80073ba:	f7fe fa5f 	bl	800587c <m_stopLR>
      delay_ms(100);
 80073be:	2064      	movs	r0, #100	@ 0x64
 80073c0:	f7fa f8a6 	bl	8001510 <delay_ms>
      enc_drive_T(180, 80, 65);
 80073c4:	2241      	movs	r2, #65	@ 0x41
 80073c6:	2150      	movs	r1, #80	@ 0x50
 80073c8:	20b4      	movs	r0, #180	@ 0xb4
 80073ca:	f7fa fb91 	bl	8001af0 <enc_drive_T>
      m_stopLR();
 80073ce:	f7fe fa55 	bl	800587c <m_stopLR>
      delay_ms(10);
 80073d2:	200a      	movs	r0, #10
 80073d4:	f7fa f89c 	bl	8001510 <delay_ms>
      turn_left_45_degrees_right_Wh();
 80073d8:	f7fc fcec 	bl	8003db4 <turn_left_45_degrees_right_Wh>
      delay_ms(10);
 80073dc:	200a      	movs	r0, #10
 80073de:	f7fa f897 	bl	8001510 <delay_ms>
      resetEncoders();
 80073e2:	f7fd fcd1 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_Ball_Detection;
 80073e6:	4b71      	ldr	r3, [pc, #452]	@ (80075ac <task1StateHandler+0x93c>)
 80073e8:	2205      	movs	r2, #5
 80073ea:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      enc_driveR(70);
    }
    break;
 80073ec:	e195      	b.n	800771a <task1StateHandler+0xaaa>
      enc_driveR(70);
 80073ee:	2046      	movs	r0, #70	@ 0x46
 80073f0:	f7fa fe90 	bl	8002114 <enc_driveR>
    break;
 80073f4:	e191      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_Ball_Detection:
    setTCAChannel(3);
 80073f6:	2003      	movs	r0, #3
 80073f8:	f7fd fcd6 	bl	8004da8 <setTCAChannel>
    delay_ms(10);
 80073fc:	200a      	movs	r0, #10
 80073fe:	f7fa f887 	bl	8001510 <delay_ms>
    Top_C_BALL_Sensor();
 8007402:	f002 fb95 	bl	8009b30 <Top_C_BALL_Sensor>
    delay_ms(100);
 8007406:	2064      	movs	r0, #100	@ 0x64
 8007408:	f7fa f882 	bl	8001510 <delay_ms>
    if (topColor == COLOR_ORANGE)
 800740c:	4b6b      	ldr	r3, [pc, #428]	@ (80075bc <task1StateHandler+0x94c>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d124      	bne.n	800745e <task1StateHandler+0x7ee>
    {
      enc_driveR_T(31, 66, 60);
 8007414:	223c      	movs	r2, #60	@ 0x3c
 8007416:	2142      	movs	r1, #66	@ 0x42
 8007418:	201f      	movs	r0, #31
 800741a:	f7fa ff21 	bl	8002260 <enc_driveR_T>
      YellowTnk();
 800741e:	f7f9 fe15 	bl	800104c <YellowTnk>
      Gripper_Open();
 8007422:	f7f9 ff2f 	bl	8001284 <Gripper_Open>
      Arm_Down();
 8007426:	f7f9 febd 	bl	80011a4 <Arm_Down>
      Gripper_Close();
 800742a:	f7f9 ff3f 	bl	80012ac <Gripper_Close>
      Arm_Up();
 800742e:	f7f9 ff01 	bl	8001234 <Arm_Up>
      Gripper_Open();
 8007432:	f7f9 ff27 	bl	8001284 <Gripper_Open>
      delay_ms(600);
 8007436:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800743a:	f7fa f869 	bl	8001510 <delay_ms>
      Gripper_Close();
 800743e:	f7f9 ff35 	bl	80012ac <Gripper_Close>
      Arm_mid();
 8007442:	f7f9 ff0b 	bl	800125c <Arm_mid>
      delay_ms(500);
 8007446:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800744a:	f7fa f861 	bl	8001510 <delay_ms>
      Y_Nutral();
 800744e:	f7f9 fe0b 	bl	8001068 <Y_Nutral>
      resetEncoders();
 8007452:	f7fd fc99 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_Ball_Picked;
 8007456:	4b55      	ldr	r3, [pc, #340]	@ (80075ac <task1StateHandler+0x93c>)
 8007458:	2206      	movs	r2, #6
 800745a:	701a      	strb	r2, [r3, #0]
      delay_ms(500);
      W_Nutral();
      resetEncoders();
      currentTask1SubState = STATE_Ball_Picked;
    }
    break;
 800745c:	e15a      	b.n	8007714 <task1StateHandler+0xaa4>
    else if (topColor == COLOR_WHITE)
 800745e:	4b57      	ldr	r3, [pc, #348]	@ (80075bc <task1StateHandler+0x94c>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	f040 8156 	bne.w	8007714 <task1StateHandler+0xaa4>
      enc_driveR_T(31, 66, 60);
 8007468:	223c      	movs	r2, #60	@ 0x3c
 800746a:	2142      	movs	r1, #66	@ 0x42
 800746c:	201f      	movs	r0, #31
 800746e:	f7fa fef7 	bl	8002260 <enc_driveR_T>
      WhiteTnk();
 8007472:	f7f9 fdcf 	bl	8001014 <WhiteTnk>
      Gripper_Open();
 8007476:	f7f9 ff05 	bl	8001284 <Gripper_Open>
      Arm_Down();
 800747a:	f7f9 fe93 	bl	80011a4 <Arm_Down>
      Gripper_Close();
 800747e:	f7f9 ff15 	bl	80012ac <Gripper_Close>
      Arm_Up();
 8007482:	f7f9 fed7 	bl	8001234 <Arm_Up>
      Gripper_Open();
 8007486:	f7f9 fefd 	bl	8001284 <Gripper_Open>
      delay_ms(600);
 800748a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800748e:	f7fa f83f 	bl	8001510 <delay_ms>
      Gripper_Close();
 8007492:	f7f9 ff0b 	bl	80012ac <Gripper_Close>
      Arm_mid();
 8007496:	f7f9 fee1 	bl	800125c <Arm_mid>
      delay_ms(500);
 800749a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800749e:	f7fa f837 	bl	8001510 <delay_ms>
      W_Nutral();
 80074a2:	f7f9 fdc5 	bl	8001030 <W_Nutral>
      resetEncoders();
 80074a6:	f7fd fc6f 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_Ball_Picked;
 80074aa:	4b40      	ldr	r3, [pc, #256]	@ (80075ac <task1StateHandler+0x93c>)
 80074ac:	2206      	movs	r2, #6
 80074ae:	701a      	strb	r2, [r3, #0]
    break;
 80074b0:	e130      	b.n	8007714 <task1StateHandler+0xaa4>
  case STATE_Ball_Picked:
    enc_driveR_T(144, 66, 60);
 80074b2:	223c      	movs	r2, #60	@ 0x3c
 80074b4:	2142      	movs	r1, #66	@ 0x42
 80074b6:	2090      	movs	r0, #144	@ 0x90
 80074b8:	f7fa fed2 	bl	8002260 <enc_driveR_T>
    turn_Right_45_LR();
 80074bc:	f7fd f90e 	bl	80046dc <turn_Right_45_LR>
    // enc_driveR_T(22, 70, 60);
    currentTask1SubState = STATE_Grid_reverse;
 80074c0:	4b3a      	ldr	r3, [pc, #232]	@ (80075ac <task1StateHandler+0x93c>)
 80074c2:	2207      	movs	r2, #7
 80074c4:	701a      	strb	r2, [r3, #0]
    break;
 80074c6:	e128      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_Grid_reverse:

    if (junction_count == 3 || junction_count == 2)
 80074c8:	4b39      	ldr	r3, [pc, #228]	@ (80075b0 <task1StateHandler+0x940>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d003      	beq.n	80074d8 <task1StateHandler+0x868>
 80074d0:	4b37      	ldr	r3, [pc, #220]	@ (80075b0 <task1StateHandler+0x940>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d10a      	bne.n	80074ee <task1StateHandler+0x87e>
    {
      junction_count--;
 80074d8:	4b35      	ldr	r3, [pc, #212]	@ (80075b0 <task1StateHandler+0x940>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3b01      	subs	r3, #1
 80074de:	4a34      	ldr	r2, [pc, #208]	@ (80075b0 <task1StateHandler+0x940>)
 80074e0:	6013      	str	r3, [r2, #0]
      turn_Left_180_LR();
 80074e2:	f7fc ffb5 	bl	8004450 <turn_Left_180_LR>
      currentTask1SubState = STATE_GRID_R_LineFolow;
 80074e6:	4b31      	ldr	r3, [pc, #196]	@ (80075ac <task1StateHandler+0x93c>)
 80074e8:	221a      	movs	r2, #26
 80074ea:	701a      	strb	r2, [r3, #0]
    else
    {
      resetEncoders();
      currentTask1SubState = STATE_GRID_REPOSJ1;
    }
    break;
 80074ec:	e115      	b.n	800771a <task1StateHandler+0xaaa>
      resetEncoders();
 80074ee:	f7fd fc4b 	bl	8004d88 <resetEncoders>
      currentTask1SubState = STATE_GRID_REPOSJ1;
 80074f2:	4b2e      	ldr	r3, [pc, #184]	@ (80075ac <task1StateHandler+0x93c>)
 80074f4:	2218      	movs	r2, #24
 80074f6:	701a      	strb	r2, [r3, #0]
    break;
 80074f8:	e10f      	b.n	800771a <task1StateHandler+0xaaa>

  case STATE_GRID_REPOSJ1:
    enc_driveR_T(260, 70, 65);
 80074fa:	2241      	movs	r2, #65	@ 0x41
 80074fc:	2146      	movs	r1, #70	@ 0x46
 80074fe:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8007502:	f7fa fead 	bl	8002260 <enc_driveR_T>
    m_stopLR(); // Stop the motors after reaching the target
 8007506:	f7fe f9b9 	bl	800587c <m_stopLR>
    delay_ms(100);
 800750a:	2064      	movs	r0, #100	@ 0x64
 800750c:	f7fa f800 	bl	8001510 <delay_ms>
    turn_Left_90_LR();
 8007510:	f7fd f841 	bl	8004596 <turn_Left_90_LR>
    currentTask1SubState = STATE_INIT;
 8007514:	4b25      	ldr	r3, [pc, #148]	@ (80075ac <task1StateHandler+0x93c>)
 8007516:	2202      	movs	r2, #2
 8007518:	701a      	strb	r2, [r3, #0]
    break;
 800751a:	e0fe      	b.n	800771a <task1StateHandler+0xaaa>

  case STATE_GRID_R_LineFolow:
    line_follow();
 800751c:	f7fb f9f0 	bl	8002900 <line_follow>
    if ((IR[2] == 1 || IR[3] == 1 || IR[4] == 1 || IR[5] == 1 || IR[1] == 1) && (IR[7] == 1 && IR[8] == 1))
 8007520:	4b25      	ldr	r3, [pc, #148]	@ (80075b8 <task1StateHandler+0x948>)
 8007522:	789b      	ldrb	r3, [r3, #2]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d00f      	beq.n	8007548 <task1StateHandler+0x8d8>
 8007528:	4b23      	ldr	r3, [pc, #140]	@ (80075b8 <task1StateHandler+0x948>)
 800752a:	78db      	ldrb	r3, [r3, #3]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d00b      	beq.n	8007548 <task1StateHandler+0x8d8>
 8007530:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <task1StateHandler+0x948>)
 8007532:	791b      	ldrb	r3, [r3, #4]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d007      	beq.n	8007548 <task1StateHandler+0x8d8>
 8007538:	4b1f      	ldr	r3, [pc, #124]	@ (80075b8 <task1StateHandler+0x948>)
 800753a:	795b      	ldrb	r3, [r3, #5]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d003      	beq.n	8007548 <task1StateHandler+0x8d8>
 8007540:	4b1d      	ldr	r3, [pc, #116]	@ (80075b8 <task1StateHandler+0x948>)
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d128      	bne.n	800759a <task1StateHandler+0x92a>
 8007548:	4b1b      	ldr	r3, [pc, #108]	@ (80075b8 <task1StateHandler+0x948>)
 800754a:	79db      	ldrb	r3, [r3, #7]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d124      	bne.n	800759a <task1StateHandler+0x92a>
 8007550:	4b19      	ldr	r3, [pc, #100]	@ (80075b8 <task1StateHandler+0x948>)
 8007552:	7a1b      	ldrb	r3, [r3, #8]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d120      	bne.n	800759a <task1StateHandler+0x92a>
    {
      junction_count--;
 8007558:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <task1StateHandler+0x940>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3b01      	subs	r3, #1
 800755e:	4a14      	ldr	r2, [pc, #80]	@ (80075b0 <task1StateHandler+0x940>)
 8007560:	6013      	str	r3, [r2, #0]
      if (junction_count == 0)
 8007562:	4b13      	ldr	r3, [pc, #76]	@ (80075b0 <task1StateHandler+0x940>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <task1StateHandler+0x906>
      {
        resetEncoders();
 800756a:	f7fd fc0d 	bl	8004d88 <resetEncoders>
        currentTask1SubState = STATE_GRID_REPOSJ2_3;
 800756e:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <task1StateHandler+0x93c>)
 8007570:	2219      	movs	r2, #25
 8007572:	701a      	strb	r2, [r3, #0]
      if (junction_count == 0)
 8007574:	e014      	b.n	80075a0 <task1StateHandler+0x930>
      }
      else
      {
        resetEncoders();
 8007576:	f7fd fc07 	bl	8004d88 <resetEncoders>
        while (getLeftEncoderCounts() < 500 && getRightEncoderCounts() < 500)
 800757a:	e001      	b.n	8007580 <task1StateHandler+0x910>
        {
          line_follow();
 800757c:	f7fb f9c0 	bl	8002900 <line_follow>
        while (getLeftEncoderCounts() < 500 && getRightEncoderCounts() < 500)
 8007580:	f7fd fbee 	bl	8004d60 <getLeftEncoderCounts>
 8007584:	4603      	mov	r3, r0
 8007586:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800758a:	da09      	bge.n	80075a0 <task1StateHandler+0x930>
 800758c:	f7fd fbd4 	bl	8004d38 <getRightEncoderCounts>
 8007590:	4603      	mov	r3, r0
 8007592:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007596:	dbf1      	blt.n	800757c <task1StateHandler+0x90c>
      if (junction_count == 0)
 8007598:	e002      	b.n	80075a0 <task1StateHandler+0x930>
        }
      }
    }
    else
    {
      line_follow();
 800759a:	f7fb f9b1 	bl	8002900 <line_follow>
    }
    break;
 800759e:	e0bc      	b.n	800771a <task1StateHandler+0xaaa>
      if (junction_count == 0)
 80075a0:	bf00      	nop
    break;
 80075a2:	e0ba      	b.n	800771a <task1StateHandler+0xaaa>
 80075a4:	200004ac 	.word	0x200004ac
 80075a8:	200005ca 	.word	0x200005ca
 80075ac:	20000038 	.word	0x20000038
 80075b0:	2000047c 	.word	0x2000047c
 80075b4:	20000124 	.word	0x20000124
 80075b8:	20000468 	.word	0x20000468
 80075bc:	200005c8 	.word	0x200005c8

  case STATE_GRID_REPOSJ2_3:
    while (getLeftEncoderCounts() < 750 && getRightEncoderCounts() < 750)
    {
      line_follow();
 80075c0:	f7fb f99e 	bl	8002900 <line_follow>
    while (getLeftEncoderCounts() < 750 && getRightEncoderCounts() < 750)
 80075c4:	f7fd fbcc 	bl	8004d60 <getLeftEncoderCounts>
 80075c8:	4603      	mov	r3, r0
 80075ca:	461a      	mov	r2, r3
 80075cc:	f240 23ed 	movw	r3, #749	@ 0x2ed
 80075d0:	429a      	cmp	r2, r3
 80075d2:	dc07      	bgt.n	80075e4 <task1StateHandler+0x974>
 80075d4:	f7fd fbb0 	bl	8004d38 <getRightEncoderCounts>
 80075d8:	4603      	mov	r3, r0
 80075da:	461a      	mov	r2, r3
 80075dc:	f240 23ed 	movw	r3, #749	@ 0x2ed
 80075e0:	429a      	cmp	r2, r3
 80075e2:	dded      	ble.n	80075c0 <task1StateHandler+0x950>
    }
    enc_drive_decel(100, 80, 65);
 80075e4:	2241      	movs	r2, #65	@ 0x41
 80075e6:	2150      	movs	r1, #80	@ 0x50
 80075e8:	2064      	movs	r0, #100	@ 0x64
 80075ea:	f7fa f889 	bl	8001700 <enc_drive_decel>
    m_stopLR(); // Stop the motors after reaching the target
 80075ee:	f7fe f945 	bl	800587c <m_stopLR>
    delay_ms(50);
 80075f2:	2032      	movs	r0, #50	@ 0x32
 80075f4:	f7f9 ff8c 	bl	8001510 <delay_ms>
    turn_90_degreesR1();
 80075f8:	f7fc fb1a 	bl	8003c30 <turn_90_degreesR1>
    currentTask1SubState = STATE_INIT; // Transition to the next state
 80075fc:	4b49      	ldr	r3, [pc, #292]	@ (8007724 <task1StateHandler+0xab4>)
 80075fe:	2202      	movs	r2, #2
 8007600:	701a      	strb	r2, [r3, #0]
    break;
 8007602:	e08a      	b.n	800771a <task1StateHandler+0xaaa>
  case STATE_TASK_DONE:
    enc_drive();
 8007604:	f7fa fb84 	bl	8001d10 <enc_drive>
    if (getLeftEncoderCounts() > 560 && getRightEncoderCounts() > 560)
 8007608:	f7fd fbaa 	bl	8004d60 <getLeftEncoderCounts>
 800760c:	4603      	mov	r3, r0
 800760e:	f5b3 7f0c 	cmp.w	r3, #560	@ 0x230
 8007612:	dd0c      	ble.n	800762e <task1StateHandler+0x9be>
 8007614:	f7fd fb90 	bl	8004d38 <getRightEncoderCounts>
 8007618:	4603      	mov	r3, r0
 800761a:	f5b3 7f0c 	cmp.w	r3, #560	@ 0x230
 800761e:	dd06      	ble.n	800762e <task1StateHandler+0x9be>
    {
      m_stopLR();
 8007620:	f7fe f92c 	bl	800587c <m_stopLR>
      delay_ms(30000);
 8007624:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007628:	f7f9 ff72 	bl	8001510 <delay_ms>
    }
    else
    {
      enc_drive();
    }
    break;
 800762c:	e075      	b.n	800771a <task1StateHandler+0xaaa>
      enc_drive();
 800762e:	f7fa fb6f 	bl	8001d10 <enc_drive>
    break;
 8007632:	e072      	b.n	800771a <task1StateHandler+0xaaa>

  case STATE_DisplayMenu:
    UpdateOLEDMenu(); // Update the OLED menu
 8007634:	f7fe fc50 	bl	8005ed8 <UpdateOLEDMenu>
    if (start_task_1 == 1)
 8007638:	4b3b      	ldr	r3, [pc, #236]	@ (8007728 <task1StateHandler+0xab8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10d      	bne.n	800765c <task1StateHandler+0x9ec>
    {
      display_TASK(1);
 8007640:	2001      	movs	r0, #1
 8007642:	f7fe fb47 	bl	8005cd4 <display_TASK>
      delay_ms(2000);
 8007646:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800764a:	f7f9 ff61 	bl	8001510 <delay_ms>
      currentTask1SubState = STATE_INIT; // Transition to Task 1
 800764e:	4b35      	ldr	r3, [pc, #212]	@ (8007724 <task1StateHandler+0xab4>)
 8007650:	2202      	movs	r2, #2
 8007652:	701a      	strb	r2, [r3, #0]
      start_task_1 = 0;                  // Reset the flag
 8007654:	4b34      	ldr	r3, [pc, #208]	@ (8007728 <task1StateHandler+0xab8>)
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
      display_TASK(6);
      delay_ms(2000);
      currentMainState = TASK_6; // Transition to Task 6
      start_task_6 = 0;          // Reset the flag
    }
    break;
 800765a:	e05d      	b.n	8007718 <task1StateHandler+0xaa8>
    else if (start_task_2 == 1)
 800765c:	4b33      	ldr	r3, [pc, #204]	@ (800772c <task1StateHandler+0xabc>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d10d      	bne.n	8007680 <task1StateHandler+0xa10>
      display_TASK(2);
 8007664:	2002      	movs	r0, #2
 8007666:	f7fe fb35 	bl	8005cd4 <display_TASK>
      delay_ms(2000);
 800766a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800766e:	f7f9 ff4f 	bl	8001510 <delay_ms>
      currentMainState = TASK_2; // Transition to Task 2
 8007672:	4b2f      	ldr	r3, [pc, #188]	@ (8007730 <task1StateHandler+0xac0>)
 8007674:	2201      	movs	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
      start_task_2 = 0;          // Reset the flag
 8007678:	4b2c      	ldr	r3, [pc, #176]	@ (800772c <task1StateHandler+0xabc>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
    break;
 800767e:	e04b      	b.n	8007718 <task1StateHandler+0xaa8>
    else if (start_task_3 == 1)
 8007680:	4b2c      	ldr	r3, [pc, #176]	@ (8007734 <task1StateHandler+0xac4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d10d      	bne.n	80076a4 <task1StateHandler+0xa34>
      display_TASK(3);
 8007688:	2003      	movs	r0, #3
 800768a:	f7fe fb23 	bl	8005cd4 <display_TASK>
      delay_ms(2000);
 800768e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007692:	f7f9 ff3d 	bl	8001510 <delay_ms>
      currentMainState = TASK_3; // Transition to Task 3
 8007696:	4b26      	ldr	r3, [pc, #152]	@ (8007730 <task1StateHandler+0xac0>)
 8007698:	2202      	movs	r2, #2
 800769a:	701a      	strb	r2, [r3, #0]
      start_task_3 = 0;          // Reset the flag
 800769c:	4b25      	ldr	r3, [pc, #148]	@ (8007734 <task1StateHandler+0xac4>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
    break;
 80076a2:	e039      	b.n	8007718 <task1StateHandler+0xaa8>
    else if (start_task_4 == 1)
 80076a4:	4b24      	ldr	r3, [pc, #144]	@ (8007738 <task1StateHandler+0xac8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d10d      	bne.n	80076c8 <task1StateHandler+0xa58>
      display_TASK(4);
 80076ac:	2004      	movs	r0, #4
 80076ae:	f7fe fb11 	bl	8005cd4 <display_TASK>
      delay_ms(2000);
 80076b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80076b6:	f7f9 ff2b 	bl	8001510 <delay_ms>
      currentMainState = TASK_4; // Transition to Task 4
 80076ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007730 <task1StateHandler+0xac0>)
 80076bc:	2203      	movs	r2, #3
 80076be:	701a      	strb	r2, [r3, #0]
      start_task_4 = 0;          // Reset the flag
 80076c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007738 <task1StateHandler+0xac8>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
    break;
 80076c6:	e027      	b.n	8007718 <task1StateHandler+0xaa8>
    else if (start_task_5 == 1)
 80076c8:	4b1c      	ldr	r3, [pc, #112]	@ (800773c <task1StateHandler+0xacc>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10d      	bne.n	80076ec <task1StateHandler+0xa7c>
      display_TASK(5);
 80076d0:	2005      	movs	r0, #5
 80076d2:	f7fe faff 	bl	8005cd4 <display_TASK>
      delay_ms(2000);
 80076d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80076da:	f7f9 ff19 	bl	8001510 <delay_ms>
      currentMainState = TASK_5; // Transition to Task 5
 80076de:	4b14      	ldr	r3, [pc, #80]	@ (8007730 <task1StateHandler+0xac0>)
 80076e0:	2204      	movs	r2, #4
 80076e2:	701a      	strb	r2, [r3, #0]
      start_task_5 = 0;          // Reset the flag
 80076e4:	4b15      	ldr	r3, [pc, #84]	@ (800773c <task1StateHandler+0xacc>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
    break;
 80076ea:	e015      	b.n	8007718 <task1StateHandler+0xaa8>
    else if (start_task_6 == 1)
 80076ec:	4b14      	ldr	r3, [pc, #80]	@ (8007740 <task1StateHandler+0xad0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d111      	bne.n	8007718 <task1StateHandler+0xaa8>
      display_TASK(6);
 80076f4:	2006      	movs	r0, #6
 80076f6:	f7fe faed 	bl	8005cd4 <display_TASK>
      delay_ms(2000);
 80076fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80076fe:	f7f9 ff07 	bl	8001510 <delay_ms>
      currentMainState = TASK_6; // Transition to Task 6
 8007702:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <task1StateHandler+0xac0>)
 8007704:	2205      	movs	r2, #5
 8007706:	701a      	strb	r2, [r3, #0]
      start_task_6 = 0;          // Reset the flag
 8007708:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <task1StateHandler+0xad0>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
    break;
 800770e:	e003      	b.n	8007718 <task1StateHandler+0xaa8>
    break;
 8007710:	bf00      	nop
 8007712:	e002      	b.n	800771a <task1StateHandler+0xaaa>
    break;
 8007714:	bf00      	nop
 8007716:	e000      	b.n	800771a <task1StateHandler+0xaaa>
    break;
 8007718:	bf00      	nop
  }
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000038 	.word	0x20000038
 8007728:	20000384 	.word	0x20000384
 800772c:	20000388 	.word	0x20000388
 8007730:	20000472 	.word	0x20000472
 8007734:	2000038c 	.word	0x2000038c
 8007738:	20000390 	.word	0x20000390
 800773c:	20000394 	.word	0x20000394
 8007740:	20000398 	.word	0x20000398

08007744 <task2StateHandler>:
int rightside_of_ramp = 0;

Task2SubState currentTask2SubState = STATE_TASK2_A;

void task2StateHandler()
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0

    switch (currentTask2SubState)
 800774a:	4b8c      	ldr	r3, [pc, #560]	@ (800797c <task2StateHandler+0x238>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b03      	cmp	r3, #3
 8007750:	f000 809b 	beq.w	800788a <task2StateHandler+0x146>
 8007754:	2b03      	cmp	r3, #3
 8007756:	f300 810d 	bgt.w	8007974 <task2StateHandler+0x230>
 800775a:	2b01      	cmp	r3, #1
 800775c:	d002      	beq.n	8007764 <task2StateHandler+0x20>
 800775e:	2b02      	cmp	r3, #2
 8007760:	d03d      	beq.n	80077de <task2StateHandler+0x9a>
        resetEncoders();
        currentMainState = TASK_3;
        break;
    }
    // End of switch (currentTask2SubState)
}
 8007762:	e107      	b.n	8007974 <task2StateHandler+0x230>
        display_TASK(2);
 8007764:	2002      	movs	r0, #2
 8007766:	f7fe fab5 	bl	8005cd4 <display_TASK>
        if (ultr_int == 0)
 800776a:	4b85      	ldr	r3, [pc, #532]	@ (8007980 <task2StateHandler+0x23c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d117      	bne.n	80077a2 <task2StateHandler+0x5e>
            resetEncoders();
 8007772:	f7fd fb09 	bl	8004d88 <resetEncoders>
            for (int i = 0; i < 10; i++)
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e00c      	b.n	8007796 <task2StateHandler+0x52>
                sidewall_Distance = Ultrasonic_GetDistance(2);
 800777c:	2002      	movs	r0, #2
 800777e:	f002 fb2f 	bl	8009de0 <Ultrasonic_GetDistance>
 8007782:	4603      	mov	r3, r0
 8007784:	461a      	mov	r2, r3
 8007786:	4b7f      	ldr	r3, [pc, #508]	@ (8007984 <task2StateHandler+0x240>)
 8007788:	601a      	str	r2, [r3, #0]
                delay_ms(50);
 800778a:	2032      	movs	r0, #50	@ 0x32
 800778c:	f7f9 fec0 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3301      	adds	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b09      	cmp	r3, #9
 800779a:	ddef      	ble.n	800777c <task2StateHandler+0x38>
            ultr_int = 1;
 800779c:	4b78      	ldr	r3, [pc, #480]	@ (8007980 <task2StateHandler+0x23c>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
        sidewall_Distance = Ultrasonic_GetDistance(2);
 80077a2:	2002      	movs	r0, #2
 80077a4:	f002 fb1c 	bl	8009de0 <Ultrasonic_GetDistance>
 80077a8:	4603      	mov	r3, r0
 80077aa:	461a      	mov	r2, r3
 80077ac:	4b75      	ldr	r3, [pc, #468]	@ (8007984 <task2StateHandler+0x240>)
 80077ae:	601a      	str	r2, [r3, #0]
        enc_drive_with_ultrasonic_Target(1860);
 80077b0:	f240 7044 	movw	r0, #1860	@ 0x744
 80077b4:	f7fb fe56 	bl	8003464 <enc_drive_with_ultrasonic_Target>
        enc_drive_decel(156, 70, 60);
 80077b8:	223c      	movs	r2, #60	@ 0x3c
 80077ba:	2146      	movs	r1, #70	@ 0x46
 80077bc:	209c      	movs	r0, #156	@ 0x9c
 80077be:	f7f9 ff9f 	bl	8001700 <enc_drive_decel>
        m_stopLR();
 80077c2:	f7fe f85b 	bl	800587c <m_stopLR>
        delay_ms(300);
 80077c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80077ca:	f7f9 fea1 	bl	8001510 <delay_ms>
        Distance3 = min_sidewall_Distance;
 80077ce:	4b6e      	ldr	r3, [pc, #440]	@ (8007988 <task2StateHandler+0x244>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a6e      	ldr	r2, [pc, #440]	@ (800798c <task2StateHandler+0x248>)
 80077d4:	6013      	str	r3, [r2, #0]
        currentTask2SubState = STATE_TASK2_B;
 80077d6:	4b69      	ldr	r3, [pc, #420]	@ (800797c <task2StateHandler+0x238>)
 80077d8:	2202      	movs	r2, #2
 80077da:	701a      	strb	r2, [r3, #0]
        break;
 80077dc:	e0ca      	b.n	8007974 <task2StateHandler+0x230>
        if (ultr_int == 0)
 80077de:	4b68      	ldr	r3, [pc, #416]	@ (8007980 <task2StateHandler+0x23c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d117      	bne.n	8007816 <task2StateHandler+0xd2>
            resetEncoders();
 80077e6:	f7fd facf 	bl	8004d88 <resetEncoders>
            for (int i = 0; i < 10; i++)
 80077ea:	2300      	movs	r3, #0
 80077ec:	60bb      	str	r3, [r7, #8]
 80077ee:	e00c      	b.n	800780a <task2StateHandler+0xc6>
                sidewall_Distance = Ultrasonic_GetDistance(2);
 80077f0:	2002      	movs	r0, #2
 80077f2:	f002 faf5 	bl	8009de0 <Ultrasonic_GetDistance>
 80077f6:	4603      	mov	r3, r0
 80077f8:	461a      	mov	r2, r3
 80077fa:	4b62      	ldr	r3, [pc, #392]	@ (8007984 <task2StateHandler+0x240>)
 80077fc:	601a      	str	r2, [r3, #0]
                delay_ms(50);
 80077fe:	2032      	movs	r0, #50	@ 0x32
 8007800:	f7f9 fe86 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	3301      	adds	r3, #1
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b09      	cmp	r3, #9
 800780e:	ddef      	ble.n	80077f0 <task2StateHandler+0xac>
            ultr_int = 1;
 8007810:	4b5b      	ldr	r3, [pc, #364]	@ (8007980 <task2StateHandler+0x23c>)
 8007812:	2201      	movs	r2, #1
 8007814:	601a      	str	r2, [r3, #0]
        sidewall_Distance = Ultrasonic_GetDistance(2);
 8007816:	2002      	movs	r0, #2
 8007818:	f002 fae2 	bl	8009de0 <Ultrasonic_GetDistance>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	4b58      	ldr	r3, [pc, #352]	@ (8007984 <task2StateHandler+0x240>)
 8007822:	601a      	str	r2, [r3, #0]
        enc_drive_with_ultrasonic_Target(516);
 8007824:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8007828:	f7fb fe1c 	bl	8003464 <enc_drive_with_ultrasonic_Target>
        enc_drive_decel(156, 70, 60);
 800782c:	223c      	movs	r2, #60	@ 0x3c
 800782e:	2146      	movs	r1, #70	@ 0x46
 8007830:	209c      	movs	r0, #156	@ 0x9c
 8007832:	f7f9 ff65 	bl	8001700 <enc_drive_decel>
        m_stopLR();
 8007836:	f7fe f821 	bl	800587c <m_stopLR>
        delay_ms(300);
 800783a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800783e:	f7f9 fe67 	bl	8001510 <delay_ms>
        Distance4 = min_sidewall_Distance;
 8007842:	4b51      	ldr	r3, [pc, #324]	@ (8007988 <task2StateHandler+0x244>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a52      	ldr	r2, [pc, #328]	@ (8007990 <task2StateHandler+0x24c>)
 8007848:	6013      	str	r3, [r2, #0]
        if (Distance3 < Distance4)
 800784a:	4b50      	ldr	r3, [pc, #320]	@ (800798c <task2StateHandler+0x248>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	4b50      	ldr	r3, [pc, #320]	@ (8007990 <task2StateHandler+0x24c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	da05      	bge.n	8007862 <task2StateHandler+0x11e>
            turn_90_degreesR1();
 8007856:	f7fc f9eb 	bl	8003c30 <turn_90_degreesR1>
            path_B = 1;
 800785a:	4b4e      	ldr	r3, [pc, #312]	@ (8007994 <task2StateHandler+0x250>)
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e00f      	b.n	8007882 <task2StateHandler+0x13e>
            enc_driveR_T(1889, 70, 60);
 8007862:	223c      	movs	r2, #60	@ 0x3c
 8007864:	2146      	movs	r1, #70	@ 0x46
 8007866:	f240 7061 	movw	r0, #1889	@ 0x761
 800786a:	f7fa fcf9 	bl	8002260 <enc_driveR_T>
            m_stopLR();
 800786e:	f7fe f805 	bl	800587c <m_stopLR>
            delay_ms(30);
 8007872:	201e      	movs	r0, #30
 8007874:	f7f9 fe4c 	bl	8001510 <delay_ms>
            turn_90_degreesR1();
 8007878:	f7fc f9da 	bl	8003c30 <turn_90_degreesR1>
            path_A = 1;
 800787c:	4b46      	ldr	r3, [pc, #280]	@ (8007998 <task2StateHandler+0x254>)
 800787e:	2201      	movs	r2, #1
 8007880:	601a      	str	r2, [r3, #0]
        currentTask2SubState = STATE_TASK2_A1;
 8007882:	4b3e      	ldr	r3, [pc, #248]	@ (800797c <task2StateHandler+0x238>)
 8007884:	2203      	movs	r2, #3
 8007886:	701a      	strb	r2, [r3, #0]
        break;
 8007888:	e074      	b.n	8007974 <task2StateHandler+0x230>
        if (ultr_int == 0)
 800788a:	4b3d      	ldr	r3, [pc, #244]	@ (8007980 <task2StateHandler+0x23c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d117      	bne.n	80078c2 <task2StateHandler+0x17e>
            resetEncoders();
 8007892:	f7fd fa79 	bl	8004d88 <resetEncoders>
            for (int i = 0; i < 10; i++)
 8007896:	2300      	movs	r3, #0
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	e00c      	b.n	80078b6 <task2StateHandler+0x172>
                frontwall_Distance = Ultrasonic_GetDistance(1);
 800789c:	2001      	movs	r0, #1
 800789e:	f002 fa9f 	bl	8009de0 <Ultrasonic_GetDistance>
 80078a2:	4603      	mov	r3, r0
 80078a4:	461a      	mov	r2, r3
 80078a6:	4b3d      	ldr	r3, [pc, #244]	@ (800799c <task2StateHandler+0x258>)
 80078a8:	601a      	str	r2, [r3, #0]
                delay_ms(30);
 80078aa:	201e      	movs	r0, #30
 80078ac:	f7f9 fe30 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3301      	adds	r3, #1
 80078b4:	607b      	str	r3, [r7, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b09      	cmp	r3, #9
 80078ba:	ddef      	ble.n	800789c <task2StateHandler+0x158>
            ultr_int = 1;
 80078bc:	4b30      	ldr	r3, [pc, #192]	@ (8007980 <task2StateHandler+0x23c>)
 80078be:	2201      	movs	r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
        enc_drive_with_ultrasonic_check();
 80078c2:	f7fb fbd1 	bl	8003068 <enc_drive_with_ultrasonic_check>
        if (frontwall_detected == 1)
 80078c6:	4b36      	ldr	r3, [pc, #216]	@ (80079a0 <task2StateHandler+0x25c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d14c      	bne.n	8007968 <task2StateHandler+0x224>
            enc_drive_decel(156, 70, 60);
 80078ce:	223c      	movs	r2, #60	@ 0x3c
 80078d0:	2146      	movs	r1, #70	@ 0x46
 80078d2:	209c      	movs	r0, #156	@ 0x9c
 80078d4:	f7f9 ff14 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 80078d8:	f7fd ffd0 	bl	800587c <m_stopLR>
            delay_ms(30);
 80078dc:	201e      	movs	r0, #30
 80078de:	f7f9 fe17 	bl	8001510 <delay_ms>
            if (path_B == 1)
 80078e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007994 <task2StateHandler+0x250>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d11f      	bne.n	800792a <task2StateHandler+0x1e6>
                path_B = 0;
 80078ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007994 <task2StateHandler+0x250>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
                turn_Right_45_TASK2_LR();
 80078f0:	f7fc fac0 	bl	8003e74 <turn_Right_45_TASK2_LR>
                m_stopLR();
 80078f4:	f7fd ffc2 	bl	800587c <m_stopLR>
                delay_ms(20);
 80078f8:	2014      	movs	r0, #20
 80078fa:	f7f9 fe09 	bl	8001510 <delay_ms>
                enc_drive_T(1986, 80, 60);
 80078fe:	223c      	movs	r2, #60	@ 0x3c
 8007900:	2150      	movs	r1, #80	@ 0x50
 8007902:	f240 70c2 	movw	r0, #1986	@ 0x7c2
 8007906:	f7fa f8f3 	bl	8001af0 <enc_drive_T>
                m_stopLR();
 800790a:	f7fd ffb7 	bl	800587c <m_stopLR>
                delay_ms(20);
 800790e:	2014      	movs	r0, #20
 8007910:	f7f9 fdfe 	bl	8001510 <delay_ms>
                turn_Left_45_TASK2_LR();
 8007914:	f7fc fb51 	bl	8003fba <turn_Left_45_TASK2_LR>
                m_stopLR();
 8007918:	f7fd ffb0 	bl	800587c <m_stopLR>
                delay_ms(50);
 800791c:	2032      	movs	r0, #50	@ 0x32
 800791e:	f7f9 fdf7 	bl	8001510 <delay_ms>
                rightside_of_ramp = 1;
 8007922:	4b20      	ldr	r3, [pc, #128]	@ (80079a4 <task2StateHandler+0x260>)
 8007924:	2201      	movs	r2, #1
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e01e      	b.n	8007968 <task2StateHandler+0x224>
                path_A = 0;
 800792a:	4b1b      	ldr	r3, [pc, #108]	@ (8007998 <task2StateHandler+0x254>)
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]
                turn_Left_45_TASK2_LR();
 8007930:	f7fc fb43 	bl	8003fba <turn_Left_45_TASK2_LR>
                m_stopLR();
 8007934:	f7fd ffa2 	bl	800587c <m_stopLR>
                delay_ms(20);
 8007938:	2014      	movs	r0, #20
 800793a:	f7f9 fde9 	bl	8001510 <delay_ms>
                enc_drive_T(1614, 80, 60);
 800793e:	223c      	movs	r2, #60	@ 0x3c
 8007940:	2150      	movs	r1, #80	@ 0x50
 8007942:	f240 604e 	movw	r0, #1614	@ 0x64e
 8007946:	f7fa f8d3 	bl	8001af0 <enc_drive_T>
                m_stopLR();
 800794a:	f7fd ff97 	bl	800587c <m_stopLR>
                delay_ms(20);
 800794e:	2014      	movs	r0, #20
 8007950:	f7f9 fdde 	bl	8001510 <delay_ms>
                turn_Right_45_TASK2_R1();
 8007954:	f7fc fbd3 	bl	80040fe <turn_Right_45_TASK2_R1>
                m_stopLR();
 8007958:	f7fd ff90 	bl	800587c <m_stopLR>
                delay_ms(50);
 800795c:	2032      	movs	r0, #50	@ 0x32
 800795e:	f7f9 fdd7 	bl	8001510 <delay_ms>
                leftside_of_ramp = 1;
 8007962:	4b11      	ldr	r3, [pc, #68]	@ (80079a8 <task2StateHandler+0x264>)
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
        resetEncoders();
 8007968:	f7fd fa0e 	bl	8004d88 <resetEncoders>
        currentMainState = TASK_3;
 800796c:	4b0f      	ldr	r3, [pc, #60]	@ (80079ac <task2StateHandler+0x268>)
 800796e:	2202      	movs	r2, #2
 8007970:	701a      	strb	r2, [r3, #0]
        break;
 8007972:	bf00      	nop
}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000039 	.word	0x20000039
 8007980:	200004b0 	.word	0x200004b0
 8007984:	20000134 	.word	0x20000134
 8007988:	2000001c 	.word	0x2000001c
 800798c:	200004b8 	.word	0x200004b8
 8007990:	200004b4 	.word	0x200004b4
 8007994:	200004c0 	.word	0x200004c0
 8007998:	200004bc 	.word	0x200004bc
 800799c:	20000130 	.word	0x20000130
 80079a0:	2000012c 	.word	0x2000012c
 80079a4:	200004c8 	.word	0x200004c8
 80079a8:	200004c4 	.word	0x200004c4
 80079ac:	20000472 	.word	0x20000472

080079b0 <detectBarCode>:
extern int frontwall_Distance;
extern int obstacle_detected;
extern int leftside_of_ramp;
extern int rightside_of_ramp;
void detectBarCode()
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
    static int stripeStartLeftCount = 0; // Left encoder count at the start of the stripe
    static int stripeStartRightCount = 0;
    static int lastDetectionLeftCount = 0; // Tracks the last encoder count when IR[3] was detected

    // Cache IR sensor value (updated via DMA)
    int irValue = IR[3];
 80079b6:	4b43      	ldr	r3, [pc, #268]	@ (8007ac4 <detectBarCode+0x114>)
 80079b8:	78db      	ldrb	r3, [r3, #3]
 80079ba:	617b      	str	r3, [r7, #20]
    int currentLeftCount = getLeftEncoderCounts(); // Get the current left encoder count
 80079bc:	f7fd f9d0 	bl	8004d60 <getLeftEncoderCounts>
 80079c0:	4603      	mov	r3, r0
 80079c2:	613b      	str	r3, [r7, #16]

    if (irValue == 1) // IR sensor detects a white stripe
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d119      	bne.n	80079fe <detectBarCode+0x4e>
    {
        barcodeDetected = 1;                       // Set the barcode detected flag
 80079ca:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac8 <detectBarCode+0x118>)
 80079cc:	2201      	movs	r2, #1
 80079ce:	601a      	str	r2, [r3, #0]
        lastDetectionLeftCount = currentLeftCount; // Update the last detection count
 80079d0:	4a3e      	ldr	r2, [pc, #248]	@ (8007acc <detectBarCode+0x11c>)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	6013      	str	r3, [r2, #0]

        if (!isWhiteStripe) // Only reset and start when entering a white stripe
 80079d6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ad0 <detectBarCode+0x120>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d15f      	bne.n	8007a9e <detectBarCode+0xee>
        {
            isWhiteStripe = 1;
 80079de:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad0 <detectBarCode+0x120>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

            // Cache encoder counts at the start of the stripe
            stripeStartLeftCount = currentLeftCount;
 80079e4:	4a3b      	ldr	r2, [pc, #236]	@ (8007ad4 <detectBarCode+0x124>)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6013      	str	r3, [r2, #0]
            stripeStartRightCount = getRightEncoderCounts();
 80079ea:	f7fd f9a5 	bl	8004d38 <getRightEncoderCounts>
 80079ee:	4603      	mov	r3, r0
 80079f0:	461a      	mov	r2, r3
 80079f2:	4b39      	ldr	r3, [pc, #228]	@ (8007ad8 <detectBarCode+0x128>)
 80079f4:	601a      	str	r2, [r3, #0]

            stripeWidth = 0; // Reset stripeWidth
 80079f6:	4b39      	ldr	r3, [pc, #228]	@ (8007adc <detectBarCode+0x12c>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	e04f      	b.n	8007a9e <detectBarCode+0xee>
        }
    }
    else // IR sensor no longer detects a white stripe
    {
        if (isWhiteStripe) // Only calculate when leaving a white stripe
 80079fe:	4b34      	ldr	r3, [pc, #208]	@ (8007ad0 <detectBarCode+0x120>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d04b      	beq.n	8007a9e <detectBarCode+0xee>
        {
            isWhiteStripe = 0;
 8007a06:	4b32      	ldr	r3, [pc, #200]	@ (8007ad0 <detectBarCode+0x120>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

            // Cache encoder counts at the end of the stripe
            int stripeEndLeftCount = currentLeftCount;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	60fb      	str	r3, [r7, #12]
            int stripeEndRightCount = getRightEncoderCounts();
 8007a10:	f7fd f992 	bl	8004d38 <getRightEncoderCounts>
 8007a14:	4603      	mov	r3, r0
 8007a16:	60bb      	str	r3, [r7, #8]

            // Calculate the encoder counts for the stripe
            int leftStripeCount = stripeEndLeftCount - stripeStartLeftCount;
 8007a18:	4b2e      	ldr	r3, [pc, #184]	@ (8007ad4 <detectBarCode+0x124>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	607b      	str	r3, [r7, #4]
            int rightStripeCount = stripeEndRightCount - stripeStartRightCount;
 8007a22:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad8 <detectBarCode+0x128>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	603b      	str	r3, [r7, #0]

            // Calculate the average stripe width
            stripeWidth = (leftStripeCount + rightStripeCount) / 2;
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	4413      	add	r3, r2
 8007a32:	0fda      	lsrs	r2, r3, #31
 8007a34:	4413      	add	r3, r2
 8007a36:	105b      	asrs	r3, r3, #1
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b28      	ldr	r3, [pc, #160]	@ (8007adc <detectBarCode+0x12c>)
 8007a3c:	601a      	str	r2, [r3, #0]

            // Classify the stripe and store it in the barcode array
            stripeValue = -1; // Default invalid value
 8007a3e:	4b28      	ldr	r3, [pc, #160]	@ (8007ae0 <detectBarCode+0x130>)
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
 8007a44:	601a      	str	r2, [r3, #0]
            if (stripeWidth > 270)
 8007a46:	4b25      	ldr	r3, [pc, #148]	@ (8007adc <detectBarCode+0x12c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8007a4e:	dd03      	ble.n	8007a58 <detectBarCode+0xa8>
            {
                stripeValue = 1; // STRIPE_1
 8007a50:	4b23      	ldr	r3, [pc, #140]	@ (8007ae0 <detectBarCode+0x130>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	e00b      	b.n	8007a70 <detectBarCode+0xc0>
            }
            else if (stripeWidth > 100 && stripeWidth <= 270)
 8007a58:	4b20      	ldr	r3, [pc, #128]	@ (8007adc <detectBarCode+0x12c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b64      	cmp	r3, #100	@ 0x64
 8007a5e:	dd07      	ble.n	8007a70 <detectBarCode+0xc0>
 8007a60:	4b1e      	ldr	r3, [pc, #120]	@ (8007adc <detectBarCode+0x12c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8007a68:	dc02      	bgt.n	8007a70 <detectBarCode+0xc0>
            {
                stripeValue = 0; // STRIPE_0
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae0 <detectBarCode+0x130>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
            }

            if (stripeValue != -1 && barcodeSize < MAX_BARCODE_BITS)
 8007a70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <detectBarCode+0x130>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d011      	beq.n	8007a9e <detectBarCode+0xee>
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae4 <detectBarCode+0x134>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b07      	cmp	r3, #7
 8007a80:	dc0d      	bgt.n	8007a9e <detectBarCode+0xee>
            {
                // Store the stripe value in the fixed-size array
                barcodeData[barcodeSize++] = stripeValue;
 8007a82:	4b18      	ldr	r3, [pc, #96]	@ (8007ae4 <detectBarCode+0x134>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	4916      	ldr	r1, [pc, #88]	@ (8007ae4 <detectBarCode+0x134>)
 8007a8a:	600a      	str	r2, [r1, #0]
 8007a8c:	4a14      	ldr	r2, [pc, #80]	@ (8007ae0 <detectBarCode+0x130>)
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	4915      	ldr	r1, [pc, #84]	@ (8007ae8 <detectBarCode+0x138>)
 8007a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // Update the current stripe value for Live Expressions
                currentStripeValue = stripeValue;
 8007a96:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <detectBarCode+0x130>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a14      	ldr	r2, [pc, #80]	@ (8007aec <detectBarCode+0x13c>)
 8007a9c:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Check if the barcode has ended
    if (((currentLeftCount - lastDetectionLeftCount) > BARCODE_END_THRESHOLD) && barcodeDetected == 1)
 8007a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007acc <detectBarCode+0x11c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8007aaa:	dd06      	ble.n	8007aba <detectBarCode+0x10a>
 8007aac:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <detectBarCode+0x118>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d102      	bne.n	8007aba <detectBarCode+0x10a>
    {
        // Set the barcode complete flag for Live Expressions
        barcodeComplete = 1;
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8007af0 <detectBarCode+0x140>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]
    }
}
 8007aba:	bf00      	nop
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000468 	.word	0x20000468
 8007ac8:	200004cc 	.word	0x200004cc
 8007acc:	2000051c 	.word	0x2000051c
 8007ad0:	20000520 	.word	0x20000520
 8007ad4:	20000524 	.word	0x20000524
 8007ad8:	20000528 	.word	0x20000528
 8007adc:	20000500 	.word	0x20000500
 8007ae0:	200004fc 	.word	0x200004fc
 8007ae4:	200004f4 	.word	0x200004f4
 8007ae8:	200004d4 	.word	0x200004d4
 8007aec:	2000003c 	.word	0x2000003c
 8007af0:	200004d0 	.word	0x200004d0
 8007af4:	00000000 	.word	0x00000000

08007af8 <gotowardwall_encoders>:
void gotowardwall_encoders()
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
    frontwall_Distance = 0;
 8007afe:	4b3e      	ldr	r3, [pc, #248]	@ (8007bf8 <gotowardwall_encoders+0x100>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
    if (ultr_int2 == 0)
 8007b04:	4b3d      	ldr	r3, [pc, #244]	@ (8007bfc <gotowardwall_encoders+0x104>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d117      	bne.n	8007b3c <gotowardwall_encoders+0x44>
    {
        resetEncoders();
 8007b0c:	f7fd f93c 	bl	8004d88 <resetEncoders>
        for (int i = 0; i < 10; i++)
 8007b10:	2300      	movs	r3, #0
 8007b12:	607b      	str	r3, [r7, #4]
 8007b14:	e00c      	b.n	8007b30 <gotowardwall_encoders+0x38>
        {
            frontwall_Distance = Ultrasonic_GetDistance(1);
 8007b16:	2001      	movs	r0, #1
 8007b18:	f002 f962 	bl	8009de0 <Ultrasonic_GetDistance>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4b35      	ldr	r3, [pc, #212]	@ (8007bf8 <gotowardwall_encoders+0x100>)
 8007b22:	601a      	str	r2, [r3, #0]
            delay_ms(50);
 8007b24:	2032      	movs	r0, #50	@ 0x32
 8007b26:	f7f9 fcf3 	bl	8001510 <delay_ms>
        for (int i = 0; i < 10; i++)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	607b      	str	r3, [r7, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b09      	cmp	r3, #9
 8007b34:	ddef      	ble.n	8007b16 <gotowardwall_encoders+0x1e>
        }
        ultr_int2 = 1;
 8007b36:	4b31      	ldr	r3, [pc, #196]	@ (8007bfc <gotowardwall_encoders+0x104>)
 8007b38:	2201      	movs	r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
    }
    if (frontwall_Distance >= 110)
 8007b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf8 <gotowardwall_encoders+0x100>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b6d      	cmp	r3, #109	@ 0x6d
 8007b42:	dd2d      	ble.n	8007ba0 <gotowardwall_encoders+0xa8>
    {
        distance = (frontwall_Distance - 110) * 6.2; // Adjust the distance as needed
 8007b44:	4b2c      	ldr	r3, [pc, #176]	@ (8007bf8 <gotowardwall_encoders+0x100>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3b6e      	subs	r3, #110	@ 0x6e
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7f8 fcea 	bl	8000524 <__aeabi_i2d>
 8007b50:	a327      	add	r3, pc, #156	@ (adr r3, 8007bf0 <gotowardwall_encoders+0xf8>)
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4619      	mov	r1, r3
 8007b62:	f7f8 ffe3 	bl	8000b2c <__aeabi_d2iz>
 8007b66:	4603      	mov	r3, r0
 8007b68:	4a25      	ldr	r2, [pc, #148]	@ (8007c00 <gotowardwall_encoders+0x108>)
 8007b6a:	6013      	str	r3, [r2, #0]
        wall_follow_with_ultrasonic_encoders(140, 90, 2.7, 0.015, 0.015, distance);
 8007b6c:	4b24      	ldr	r3, [pc, #144]	@ (8007c00 <gotowardwall_encoders+0x108>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8007c04 <gotowardwall_encoders+0x10c>
 8007b76:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8007c04 <gotowardwall_encoders+0x10c>
 8007b7a:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8007c08 <gotowardwall_encoders+0x110>
 8007b7e:	215a      	movs	r1, #90	@ 0x5a
 8007b80:	208c      	movs	r0, #140	@ 0x8c
 8007b82:	f7fb fe41 	bl	8003808 <wall_follow_with_ultrasonic_encoders>
        enc_drive_decel(62, 75, 60);
 8007b86:	223c      	movs	r2, #60	@ 0x3c
 8007b88:	214b      	movs	r1, #75	@ 0x4b
 8007b8a:	203e      	movs	r0, #62	@ 0x3e
 8007b8c:	f7f9 fdb8 	bl	8001700 <enc_drive_decel>
        m_stopLR();
 8007b90:	f7fd fe74 	bl	800587c <m_stopLR>
        delay_ms(50);
 8007b94:	2032      	movs	r0, #50	@ 0x32
 8007b96:	f7f9 fcbb 	bl	8001510 <delay_ms>
        turn_Right_90_LR();
 8007b9a:	f7fc fbb5 	bl	8004308 <turn_Right_90_LR>
        enc_driveR_T(distance, 80, 60);              // Move forward until the distance is less than 110 cm
        m_stopLR();
        delay_ms(50);
        turn_Right_90_LR();
    }
}
 8007b9e:	e022      	b.n	8007be6 <gotowardwall_encoders+0xee>
        distance = (110 - frontwall_Distance) * 6.2; // Adjust the distance as needed
 8007ba0:	4b15      	ldr	r3, [pc, #84]	@ (8007bf8 <gotowardwall_encoders+0x100>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f1c3 036e 	rsb	r3, r3, #110	@ 0x6e
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7f8 fcbb 	bl	8000524 <__aeabi_i2d>
 8007bae:	a310      	add	r3, pc, #64	@ (adr r3, 8007bf0 <gotowardwall_encoders+0xf8>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f7f8 ffb4 	bl	8000b2c <__aeabi_d2iz>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8007c00 <gotowardwall_encoders+0x108>)
 8007bc8:	6013      	str	r3, [r2, #0]
        enc_driveR_T(distance, 80, 60);              // Move forward until the distance is less than 110 cm
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <gotowardwall_encoders+0x108>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	223c      	movs	r2, #60	@ 0x3c
 8007bd0:	2150      	movs	r1, #80	@ 0x50
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fa fb44 	bl	8002260 <enc_driveR_T>
        m_stopLR();
 8007bd8:	f7fd fe50 	bl	800587c <m_stopLR>
        delay_ms(50);
 8007bdc:	2032      	movs	r0, #50	@ 0x32
 8007bde:	f7f9 fc97 	bl	8001510 <delay_ms>
        turn_Right_90_LR();
 8007be2:	f7fc fb91 	bl	8004308 <turn_Right_90_LR>
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	cccccccd 	.word	0xcccccccd
 8007bf4:	4018cccc 	.word	0x4018cccc
 8007bf8:	20000130 	.word	0x20000130
 8007bfc:	20000504 	.word	0x20000504
 8007c00:	20000508 	.word	0x20000508
 8007c04:	3c75c28f 	.word	0x3c75c28f
 8007c08:	402ccccd 	.word	0x402ccccd

08007c0c <calculateDecimalValue>:
int calculateDecimalValue()
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
    decimalValue = 0;
 8007c12:	4b10      	ldr	r3, [pc, #64]	@ (8007c54 <calculateDecimalValue+0x48>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]

    // Iterate through the barcodeData array in reverse (LSB is at index 0)
    for (int i = 0; i < barcodeSize; i++)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	e00d      	b.n	8007c3a <calculateDecimalValue+0x2e>
    {
        decimalValue += barcodeData[i] * (1 << i); // Multiply bit by 2^i
 8007c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c58 <calculateDecimalValue+0x4c>)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	409a      	lsls	r2, r3
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c54 <calculateDecimalValue+0x48>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4413      	add	r3, r2
 8007c30:	4a08      	ldr	r2, [pc, #32]	@ (8007c54 <calculateDecimalValue+0x48>)
 8007c32:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < barcodeSize; i++)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3301      	adds	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	4b08      	ldr	r3, [pc, #32]	@ (8007c5c <calculateDecimalValue+0x50>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	dbec      	blt.n	8007c1e <calculateDecimalValue+0x12>
    }

    return decimalValue;
 8007c44:	4b03      	ldr	r3, [pc, #12]	@ (8007c54 <calculateDecimalValue+0x48>)
 8007c46:	681b      	ldr	r3, [r3, #0]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	200004f8 	.word	0x200004f8
 8007c58:	200004d4 	.word	0x200004d4
 8007c5c:	200004f4 	.word	0x200004f4

08007c60 <task3StateHandler>:

Task3SubState currentTask3SubState = STATE_enter_from_ramp_entry;

void task3StateHandler()
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
    switch (currentTask3SubState)
 8007c66:	4bc0      	ldr	r3, [pc, #768]	@ (8007f68 <task3StateHandler+0x308>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	2b0d      	cmp	r3, #13
 8007c6e:	f200 827e 	bhi.w	800816e <task3StateHandler+0x50e>
 8007c72:	a201      	add	r2, pc, #4	@ (adr r2, 8007c78 <task3StateHandler+0x18>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007cb1 	.word	0x08007cb1
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007d43 	.word	0x08007d43
 8007c84:	08007da5 	.word	0x08007da5
 8007c88:	08007e69 	.word	0x08007e69
 8007c8c:	08007ed9 	.word	0x08007ed9
 8007c90:	0800816f 	.word	0x0800816f
 8007c94:	0800816f 	.word	0x0800816f
 8007c98:	0800816f 	.word	0x0800816f
 8007c9c:	08007f39 	.word	0x08007f39
 8007ca0:	08008025 	.word	0x08008025
 8007ca4:	0800808b 	.word	0x0800808b
 8007ca8:	080080c9 	.word	0x080080c9
 8007cac:	08008125 	.word	0x08008125
    {
    case STATE_enter_from_ramp_entry:
        enc_drive_fast_to_target(6000, 150, 85);
 8007cb0:	2255      	movs	r2, #85	@ 0x55
 8007cb2:	2196      	movs	r1, #150	@ 0x96
 8007cb4:	f241 7070 	movw	r0, #6000	@ 0x1770
 8007cb8:	f7fa fbf2 	bl	80024a0 <enc_drive_fast_to_target>
        currentTask3SubState = STATE_enter_from_ramp;
 8007cbc:	4baa      	ldr	r3, [pc, #680]	@ (8007f68 <task3StateHandler+0x308>)
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	701a      	strb	r2, [r3, #0]
        break;
 8007cc2:	e254      	b.n	800816e <task3StateHandler+0x50e>
    case STATE_enter_from_ramp:
        if (ultr_int2 == 0)
 8007cc4:	4ba9      	ldr	r3, [pc, #676]	@ (8007f6c <task3StateHandler+0x30c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d115      	bne.n	8007cf8 <task3StateHandler+0x98>
        {
            resetEncoders();
 8007ccc:	f7fd f85c 	bl	8004d88 <resetEncoders>
            for (int i = 0; i < 10; i++)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e00a      	b.n	8007cec <task3StateHandler+0x8c>
            {
                int frontwall_Distance = Ultrasonic_GetDistance(1);
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	f002 f882 	bl	8009de0 <Ultrasonic_GetDistance>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	607b      	str	r3, [r7, #4]
                delay_ms(50);
 8007ce0:	2032      	movs	r0, #50	@ 0x32
 8007ce2:	f7f9 fc15 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	ddf1      	ble.n	8007cd6 <task3StateHandler+0x76>
            }
            ultr_int2 = 1;
 8007cf2:	4b9e      	ldr	r3, [pc, #632]	@ (8007f6c <task3StateHandler+0x30c>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
        }
        enc_drive_with_ultrasonic_check_85(55, 1);
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	2037      	movs	r0, #55	@ 0x37
 8007cfc:	f7fb fab0 	bl	8003260 <enc_drive_with_ultrasonic_check_85>
        if (wall == 1)
 8007d00:	4b9b      	ldr	r3, [pc, #620]	@ (8007f70 <task3StateHandler+0x310>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	f040 822f 	bne.w	8008168 <task3StateHandler+0x508>
        {
            wall == 0;
            m_stopLR();
 8007d0a:	f7fd fdb7 	bl	800587c <m_stopLR>
            delay_ms(30);
 8007d0e:	201e      	movs	r0, #30
 8007d10:	f7f9 fbfe 	bl	8001510 <delay_ms>
            resetEncoders();
 8007d14:	f7fd f838 	bl	8004d88 <resetEncoders>
            enc_driveR_T(61, 65, 60);
 8007d18:	223c      	movs	r2, #60	@ 0x3c
 8007d1a:	2141      	movs	r1, #65	@ 0x41
 8007d1c:	203d      	movs	r0, #61	@ 0x3d
 8007d1e:	f7fa fa9f 	bl	8002260 <enc_driveR_T>
            turn_Right_90_LR_Controlled(825, 80);
 8007d22:	2150      	movs	r1, #80	@ 0x50
 8007d24:	f240 3039 	movw	r0, #825	@ 0x339
 8007d28:	f7fc fd7a 	bl	8004820 <turn_Right_90_LR_Controlled>
            m_stopLR();
 8007d2c:	f7fd fda6 	bl	800587c <m_stopLR>
            delay_ms(50);
 8007d30:	2032      	movs	r0, #50	@ 0x32
 8007d32:	f7f9 fbed 	bl	8001510 <delay_ms>
            resetEncoders();
 8007d36:	f7fd f827 	bl	8004d88 <resetEncoders>
            currentTask3SubState = STATE_2nd_wall;
 8007d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8007f68 <task3StateHandler+0x308>)
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007d40:	e212      	b.n	8008168 <task3StateHandler+0x508>
    case STATE_2nd_wall:
        display_TASK(3);
 8007d42:	2003      	movs	r0, #3
 8007d44:	f7fd ffc6 	bl	8005cd4 <display_TASK>
        ultr_int2 = 0;
 8007d48:	4b88      	ldr	r3, [pc, #544]	@ (8007f6c <task3StateHandler+0x30c>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
        wall_follow_with_ultrasonic_encoders(140, 90, 2.7, 0.015, 0.015, 1000);
 8007d4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d52:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 8007f74 <task3StateHandler+0x314>
 8007d56:	eddf 0a87 	vldr	s1, [pc, #540]	@ 8007f74 <task3StateHandler+0x314>
 8007d5a:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8007f78 <task3StateHandler+0x318>
 8007d5e:	215a      	movs	r1, #90	@ 0x5a
 8007d60:	208c      	movs	r0, #140	@ 0x8c
 8007d62:	f7fb fd51 	bl	8003808 <wall_follow_with_ultrasonic_encoders>
        enc_drive_decel(400, 80, 55);
 8007d66:	2237      	movs	r2, #55	@ 0x37
 8007d68:	2150      	movs	r1, #80	@ 0x50
 8007d6a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8007d6e:	f7f9 fcc7 	bl	8001700 <enc_drive_decel>
        m_stopLR();
 8007d72:	f7fd fd83 	bl	800587c <m_stopLR>
        delay_ms(50);
 8007d76:	2032      	movs	r0, #50	@ 0x32
 8007d78:	f7f9 fbca 	bl	8001510 <delay_ms>
        gotowardwall_encoders();
 8007d7c:	f7ff febc 	bl	8007af8 <gotowardwall_encoders>
        m_stopLR();
 8007d80:	f7fd fd7c 	bl	800587c <m_stopLR>
        wall_follow_with_ultrasonic_encoders(215, 90, 2.75, 0.018, 0.015, 1550);
 8007d84:	f240 620e 	movw	r2, #1550	@ 0x60e
 8007d88:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8007f74 <task3StateHandler+0x314>
 8007d8c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8007f7c <task3StateHandler+0x31c>
 8007d90:	eeb0 0a06 	vmov.f32	s0, #6	@ 0x40300000  2.750
 8007d94:	215a      	movs	r1, #90	@ 0x5a
 8007d96:	20d7      	movs	r0, #215	@ 0xd7
 8007d98:	f7fb fd36 	bl	8003808 <wall_follow_with_ultrasonic_encoders>
        currentTask3SubState = STATE_to_pad;
 8007d9c:	4b72      	ldr	r3, [pc, #456]	@ (8007f68 <task3StateHandler+0x308>)
 8007d9e:	2204      	movs	r2, #4
 8007da0:	701a      	strb	r2, [r3, #0]
        break;
 8007da2:	e1e4      	b.n	800816e <task3StateHandler+0x50e>
    case STATE_to_pad:
        enc_drive2(90);
 8007da4:	205a      	movs	r0, #90	@ 0x5a
 8007da6:	f7fa f8ff 	bl	8001fa8 <enc_drive2>
        if (IR[3] == 1)
 8007daa:	4b75      	ldr	r3, [pc, #468]	@ (8007f80 <task3StateHandler+0x320>)
 8007dac:	78db      	ldrb	r3, [r3, #3]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d156      	bne.n	8007e60 <task3StateHandler+0x200>
        {
            enc_drive_decel(350, 90, 55);
 8007db2:	2237      	movs	r2, #55	@ 0x37
 8007db4:	215a      	movs	r1, #90	@ 0x5a
 8007db6:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8007dba:	f7f9 fca1 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 8007dbe:	f7fd fd5d 	bl	800587c <m_stopLR>
            delay_ms(50);
 8007dc2:	2032      	movs	r0, #50	@ 0x32
 8007dc4:	f7f9 fba4 	bl	8001510 <delay_ms>
            setTCAChannel(0);
 8007dc8:	2000      	movs	r0, #0
 8007dca:	f7fc ffed 	bl	8004da8 <setTCAChannel>
            delay_ms(10);
 8007dce:	200a      	movs	r0, #10
 8007dd0:	f7f9 fb9e 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60bb      	str	r3, [r7, #8]
 8007dd8:	e007      	b.n	8007dea <task3StateHandler+0x18a>
            {
                Bottom_C_PAD_Sensor();
 8007dda:	f001 ff19 	bl	8009c10 <Bottom_C_PAD_Sensor>
                delay_ms(20);
 8007dde:	2014      	movs	r0, #20
 8007de0:	f7f9 fb96 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60bb      	str	r3, [r7, #8]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	ddf4      	ble.n	8007dda <task3StateHandler+0x17a>
            }
            if (bottomColor == COLOR_RED)
 8007df0:	4b64      	ldr	r3, [pc, #400]	@ (8007f84 <task3StateHandler+0x324>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d103      	bne.n	8007e00 <task3StateHandler+0x1a0>
            {
                TSK3_first_PAD = 0;
 8007df8:	4b63      	ldr	r3, [pc, #396]	@ (8007f88 <task3StateHandler+0x328>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e005      	b.n	8007e0c <task3StateHandler+0x1ac>
            }
            else
            {
                delay_ms(80);
 8007e00:	2050      	movs	r0, #80	@ 0x50
 8007e02:	f7f9 fb85 	bl	8001510 <delay_ms>
                TSK3_first_PAD = 1;
 8007e06:	4b60      	ldr	r3, [pc, #384]	@ (8007f88 <task3StateHandler+0x328>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
            }

            resetEncoders();
 8007e0c:	f7fc ffbc 	bl	8004d88 <resetEncoders>
            enc_driveR_T(560, 65, 50);
 8007e10:	2232      	movs	r2, #50	@ 0x32
 8007e12:	2141      	movs	r1, #65	@ 0x41
 8007e14:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8007e18:	f7fa fa22 	bl	8002260 <enc_driveR_T>
            m_stopLR();
 8007e1c:	f7fd fd2e 	bl	800587c <m_stopLR>
            delay_ms(50);
 8007e20:	2032      	movs	r0, #50	@ 0x32
 8007e22:	f7f9 fb75 	bl	8001510 <delay_ms>
            turn_90_degreesL1();
 8007e26:	f7fb ff64 	bl	8003cf2 <turn_90_degreesL1>
            m_stopLR();
 8007e2a:	f7fd fd27 	bl	800587c <m_stopLR>
            delay_ms(50);
 8007e2e:	2032      	movs	r0, #50	@ 0x32
 8007e30:	f7f9 fb6e 	bl	8001510 <delay_ms>
            enc_driveR_T(930, 90, 50);
 8007e34:	2232      	movs	r2, #50	@ 0x32
 8007e36:	215a      	movs	r1, #90	@ 0x5a
 8007e38:	f240 30a2 	movw	r0, #930	@ 0x3a2
 8007e3c:	f7fa fa10 	bl	8002260 <enc_driveR_T>
            m_stopLR();
 8007e40:	f7fd fd1c 	bl	800587c <m_stopLR>
            delay_ms(80);
 8007e44:	2050      	movs	r0, #80	@ 0x50
 8007e46:	f7f9 fb63 	bl	8001510 <delay_ms>
            enc_drive_accel(200, 200, 50);
 8007e4a:	2232      	movs	r2, #50	@ 0x32
 8007e4c:	21c8      	movs	r1, #200	@ 0xc8
 8007e4e:	20c8      	movs	r0, #200	@ 0xc8
 8007e50:	f7f9 fb82 	bl	8001558 <enc_drive_accel>
            resetEncoders();
 8007e54:	f7fc ff98 	bl	8004d88 <resetEncoders>
            currentTask3SubState = STATE_BarCode;
 8007e58:	4b43      	ldr	r3, [pc, #268]	@ (8007f68 <task3StateHandler+0x308>)
 8007e5a:	2205      	movs	r2, #5
 8007e5c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            enc_drive2(100);
        }
        break;
 8007e5e:	e186      	b.n	800816e <task3StateHandler+0x50e>
            enc_drive2(100);
 8007e60:	2064      	movs	r0, #100	@ 0x64
 8007e62:	f7fa f8a1 	bl	8001fa8 <enc_drive2>
        break;
 8007e66:	e182      	b.n	800816e <task3StateHandler+0x50e>
    case STATE_BarCode:
        enc_drive_fast();
 8007e68:	f7f9 fff8 	bl	8001e5c <enc_drive_fast>
        detectBarCode();
 8007e6c:	f7ff fda0 	bl	80079b0 <detectBarCode>
        if (barcodeComplete == 1)
 8007e70:	4b46      	ldr	r3, [pc, #280]	@ (8007f8c <task3StateHandler+0x32c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d126      	bne.n	8007ec6 <task3StateHandler+0x266>
        {
            // Calculate the decimal value from the barcode data
            decimalValue = calculateDecimalValue();
 8007e78:	f7ff fec8 	bl	8007c0c <calculateDecimalValue>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4a44      	ldr	r2, [pc, #272]	@ (8007f90 <task3StateHandler+0x330>)
 8007e80:	6013      	str	r3, [r2, #0]
            display_barcode_decimal(decimalValue);
 8007e82:	4b43      	ldr	r3, [pc, #268]	@ (8007f90 <task3StateHandler+0x330>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd ff88 	bl	8005d9c <display_barcode_decimal>

            if (decimalValue % 2 == 0)
 8007e8c:	4b40      	ldr	r3, [pc, #256]	@ (8007f90 <task3StateHandler+0x330>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <task3StateHandler+0x240>
            {
                // even
                Y_balls_to_RED = 1;
 8007e98:	4b3e      	ldr	r3, [pc, #248]	@ (8007f94 <task3StateHandler+0x334>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e002      	b.n	8007ea6 <task3StateHandler+0x246>
            }
            else
            {
                Y_balls_to_BLUE = 1;
 8007ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8007f98 <task3StateHandler+0x338>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
            }

            // Reset the barcode complete flag for the next barcode
            barcodeComplete = 0;
 8007ea6:	4b39      	ldr	r3, [pc, #228]	@ (8007f8c <task3StateHandler+0x32c>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

            // Stop the robot
            enc_drive_decel(1300, 130, 80);
 8007eac:	2250      	movs	r2, #80	@ 0x50
 8007eae:	2182      	movs	r1, #130	@ 0x82
 8007eb0:	f240 5014 	movw	r0, #1300	@ 0x514
 8007eb4:	f7f9 fc24 	bl	8001700 <enc_drive_decel>

            barcodeComplete = 2;
 8007eb8:	4b34      	ldr	r3, [pc, #208]	@ (8007f8c <task3StateHandler+0x32c>)
 8007eba:	2202      	movs	r2, #2
 8007ebc:	601a      	str	r2, [r3, #0]
            // Update the decimal value for Live Expressions
            currentStripeValue = decimalValue; // Use this variable for debugging
 8007ebe:	4b34      	ldr	r3, [pc, #208]	@ (8007f90 <task3StateHandler+0x330>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a36      	ldr	r2, [pc, #216]	@ (8007f9c <task3StateHandler+0x33c>)
 8007ec4:	6013      	str	r3, [r2, #0]
        }
        if (barcodeComplete == 2)
 8007ec6:	4b31      	ldr	r3, [pc, #196]	@ (8007f8c <task3StateHandler+0x32c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	f040 814e 	bne.w	800816c <task3StateHandler+0x50c>
        {
            currentTask3SubState = STATE_line_detect;
 8007ed0:	4b25      	ldr	r3, [pc, #148]	@ (8007f68 <task3StateHandler+0x308>)
 8007ed2:	2206      	movs	r2, #6
 8007ed4:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007ed6:	e149      	b.n	800816c <task3StateHandler+0x50c>
    case STATE_line_detect:
        enc_drive2(80);
 8007ed8:	2050      	movs	r0, #80	@ 0x50
 8007eda:	f7fa f865 	bl	8001fa8 <enc_drive2>
        if (IR[3] == 1)
 8007ede:	4b28      	ldr	r3, [pc, #160]	@ (8007f80 <task3StateHandler+0x320>)
 8007ee0:	78db      	ldrb	r3, [r3, #3]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d124      	bne.n	8007f30 <task3StateHandler+0x2d0>
        {
            enc_drive_decel(250, 80, 50);
 8007ee6:	2232      	movs	r2, #50	@ 0x32
 8007ee8:	2150      	movs	r1, #80	@ 0x50
 8007eea:	20fa      	movs	r0, #250	@ 0xfa
 8007eec:	f7f9 fc08 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 8007ef0:	f7fd fcc4 	bl	800587c <m_stopLR>
            display_barcode_decimal(decimalValue);
 8007ef4:	4b26      	ldr	r3, [pc, #152]	@ (8007f90 <task3StateHandler+0x330>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fd ff4f 	bl	8005d9c <display_barcode_decimal>
            delay_ms(50);
 8007efe:	2032      	movs	r0, #50	@ 0x32
 8007f00:	f7f9 fb06 	bl	8001510 <delay_ms>
            turn_Left_90_LR(); // Turn left 90 degrees to drop balls
 8007f04:	f7fc fb47 	bl	8004596 <turn_Left_90_LR>
            m_stopLR();
 8007f08:	f7fd fcb8 	bl	800587c <m_stopLR>
            delay_ms(20);
 8007f0c:	2014      	movs	r0, #20
 8007f0e:	f7f9 faff 	bl	8001510 <delay_ms>
            enc_driveR_T(820, 80, 60);
 8007f12:	223c      	movs	r2, #60	@ 0x3c
 8007f14:	2150      	movs	r1, #80	@ 0x50
 8007f16:	f44f 704d 	mov.w	r0, #820	@ 0x334
 8007f1a:	f7fa f9a1 	bl	8002260 <enc_driveR_T>
            m_stopLR();
 8007f1e:	f7fd fcad 	bl	800587c <m_stopLR>
            delay_ms(50);
 8007f22:	2032      	movs	r0, #50	@ 0x32
 8007f24:	f7f9 faf4 	bl	8001510 <delay_ms>
            currentTask3SubState = STATE_Drop_balls;
 8007f28:	4b0f      	ldr	r3, [pc, #60]	@ (8007f68 <task3StateHandler+0x308>)
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            enc_drive2(80);
        }
        break;
 8007f2e:	e11e      	b.n	800816e <task3StateHandler+0x50e>
            enc_drive2(80);
 8007f30:	2050      	movs	r0, #80	@ 0x50
 8007f32:	f7fa f839 	bl	8001fa8 <enc_drive2>
        break;
 8007f36:	e11a      	b.n	800816e <task3StateHandler+0x50e>
    case STATE_Drop_balls:
        if (Y_balls_to_RED == 1 && TSK3_first_PAD == 0)
 8007f38:	4b16      	ldr	r3, [pc, #88]	@ (8007f94 <task3StateHandler+0x334>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d131      	bne.n	8007fa4 <task3StateHandler+0x344>
 8007f40:	4b11      	ldr	r3, [pc, #68]	@ (8007f88 <task3StateHandler+0x328>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d12d      	bne.n	8007fa4 <task3StateHandler+0x344>
        {
            // Drop white balls on the blue pad
            other_ball = 0;
 8007f48:	4b15      	ldr	r3, [pc, #84]	@ (8007fa0 <task3StateHandler+0x340>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
            open_white_door();
 8007f4e:	f7f9 f899 	bl	8001084 <open_white_door>
            TankLift();
 8007f52:	f7f9 f82f 	bl	8000fb4 <TankLift>
            delay_ms(100);
 8007f56:	2064      	movs	r0, #100	@ 0x64
 8007f58:	f7f9 fada 	bl	8001510 <delay_ms>
            close_white_door();
 8007f5c:	f7f9 f8b6 	bl	80010cc <close_white_door>
            TankLower();
 8007f60:	f7f9 f840 	bl	8000fe4 <TankLower>
 8007f64:	e05a      	b.n	800801c <task3StateHandler+0x3bc>
 8007f66:	bf00      	nop
 8007f68:	20000040 	.word	0x20000040
 8007f6c:	20000504 	.word	0x20000504
 8007f70:	20000138 	.word	0x20000138
 8007f74:	3c75c28f 	.word	0x3c75c28f
 8007f78:	402ccccd 	.word	0x402ccccd
 8007f7c:	3c9374bc 	.word	0x3c9374bc
 8007f80:	20000468 	.word	0x20000468
 8007f84:	200005ca 	.word	0x200005ca
 8007f88:	2000050c 	.word	0x2000050c
 8007f8c:	200004d0 	.word	0x200004d0
 8007f90:	200004f8 	.word	0x200004f8
 8007f94:	20000510 	.word	0x20000510
 8007f98:	20000514 	.word	0x20000514
 8007f9c:	2000003c 	.word	0x2000003c
 8007fa0:	20000518 	.word	0x20000518
        }
        else if (Y_balls_to_RED == 1 && TSK3_first_PAD == 1)
 8007fa4:	4b74      	ldr	r3, [pc, #464]	@ (8008178 <task3StateHandler+0x518>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d112      	bne.n	8007fd2 <task3StateHandler+0x372>
 8007fac:	4b73      	ldr	r3, [pc, #460]	@ (800817c <task3StateHandler+0x51c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d10e      	bne.n	8007fd2 <task3StateHandler+0x372>
        {
            // Drop yellow balls on the red pad
            other_ball = 1;
 8007fb4:	4b72      	ldr	r3, [pc, #456]	@ (8008180 <task3StateHandler+0x520>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
            open_yellow_door();
 8007fba:	f7f9 f8ab 	bl	8001114 <open_yellow_door>
            TankLift();
 8007fbe:	f7f8 fff9 	bl	8000fb4 <TankLift>
            delay_ms(100);
 8007fc2:	2064      	movs	r0, #100	@ 0x64
 8007fc4:	f7f9 faa4 	bl	8001510 <delay_ms>
            close_yellow_door();
 8007fc8:	f7f9 f8c8 	bl	800115c <close_yellow_door>
            TankLower();
 8007fcc:	f7f9 f80a 	bl	8000fe4 <TankLower>
 8007fd0:	e024      	b.n	800801c <task3StateHandler+0x3bc>
        }
        else if (Y_balls_to_BLUE == 1 && TSK3_first_PAD == 0)
 8007fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8008184 <task3StateHandler+0x524>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d112      	bne.n	8008000 <task3StateHandler+0x3a0>
 8007fda:	4b68      	ldr	r3, [pc, #416]	@ (800817c <task3StateHandler+0x51c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10e      	bne.n	8008000 <task3StateHandler+0x3a0>
        {
            // Drop yellow balls on the blue pad
            other_ball = 1;
 8007fe2:	4b67      	ldr	r3, [pc, #412]	@ (8008180 <task3StateHandler+0x520>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
            open_yellow_door();
 8007fe8:	f7f9 f894 	bl	8001114 <open_yellow_door>
            TankLift();
 8007fec:	f7f8 ffe2 	bl	8000fb4 <TankLift>
            delay_ms(100);
 8007ff0:	2064      	movs	r0, #100	@ 0x64
 8007ff2:	f7f9 fa8d 	bl	8001510 <delay_ms>
            close_yellow_door();
 8007ff6:	f7f9 f8b1 	bl	800115c <close_yellow_door>
            TankLower();
 8007ffa:	f7f8 fff3 	bl	8000fe4 <TankLower>
 8007ffe:	e00d      	b.n	800801c <task3StateHandler+0x3bc>
        }
        else
        {
            // Drop white balls on the red pad
            other_ball = 0;
 8008000:	4b5f      	ldr	r3, [pc, #380]	@ (8008180 <task3StateHandler+0x520>)
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
            open_white_door();
 8008006:	f7f9 f83d 	bl	8001084 <open_white_door>
            TankLift();
 800800a:	f7f8 ffd3 	bl	8000fb4 <TankLift>
            delay_ms(100);
 800800e:	2064      	movs	r0, #100	@ 0x64
 8008010:	f7f9 fa7e 	bl	8001510 <delay_ms>
            close_white_door();
 8008014:	f7f9 f85a 	bl	80010cc <close_white_door>
            TankLower();
 8008018:	f7f8 ffe4 	bl	8000fe4 <TankLower>
        }
        currentTask3SubState = STATE_goto_next_PAD;
 800801c:	4b5a      	ldr	r3, [pc, #360]	@ (8008188 <task3StateHandler+0x528>)
 800801e:	220b      	movs	r2, #11
 8008020:	701a      	strb	r2, [r3, #0]
        break;
 8008022:	e0a4      	b.n	800816e <task3StateHandler+0x50e>
    case STATE_goto_next_PAD:
        enc_drive_T(820, 80, 60); // reposition
 8008024:	223c      	movs	r2, #60	@ 0x3c
 8008026:	2150      	movs	r1, #80	@ 0x50
 8008028:	f44f 704d 	mov.w	r0, #820	@ 0x334
 800802c:	f7f9 fd60 	bl	8001af0 <enc_drive_T>
        m_stopLR();
 8008030:	f7fd fc24 	bl	800587c <m_stopLR>
        delay_ms(50);
 8008034:	2032      	movs	r0, #50	@ 0x32
 8008036:	f7f9 fa6b 	bl	8001510 <delay_ms>
        turn_Right_90_LR(); // Turn right 90 degrees go reverse
 800803a:	f7fc f965 	bl	8004308 <turn_Right_90_LR>
        m_stopLR();
 800803e:	f7fd fc1d 	bl	800587c <m_stopLR>
        delay_ms(50);
 8008042:	2032      	movs	r0, #50	@ 0x32
 8008044:	f7f9 fa64 	bl	8001510 <delay_ms>
        enc_driveR_T(3520, 130, 60); // go reverse
 8008048:	223c      	movs	r2, #60	@ 0x3c
 800804a:	2182      	movs	r1, #130	@ 0x82
 800804c:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8008050:	f7fa f906 	bl	8002260 <enc_driveR_T>
        m_stopLR();
 8008054:	f7fd fc12 	bl	800587c <m_stopLR>
        delay_ms(20);
 8008058:	2014      	movs	r0, #20
 800805a:	f7f9 fa59 	bl	8001510 <delay_ms>
        turn_Left_90_LR(); // Turn left 90 degrees to drop balls
 800805e:	f7fc fa9a 	bl	8004596 <turn_Left_90_LR>
        m_stopLR();
 8008062:	f7fd fc0b 	bl	800587c <m_stopLR>
        delay_ms(20);
 8008066:	2014      	movs	r0, #20
 8008068:	f7f9 fa52 	bl	8001510 <delay_ms>
        enc_driveR_T(820, 80, 60);
 800806c:	223c      	movs	r2, #60	@ 0x3c
 800806e:	2150      	movs	r1, #80	@ 0x50
 8008070:	f44f 704d 	mov.w	r0, #820	@ 0x334
 8008074:	f7fa f8f4 	bl	8002260 <enc_driveR_T>
        m_stopLR();
 8008078:	f7fd fc00 	bl	800587c <m_stopLR>
        delay_ms(50);
 800807c:	2032      	movs	r0, #50	@ 0x32
 800807e:	f7f9 fa47 	bl	8001510 <delay_ms>
        currentTask3SubState = STATE_Drop_balls_second_PAD;
 8008082:	4b41      	ldr	r3, [pc, #260]	@ (8008188 <task3StateHandler+0x528>)
 8008084:	220c      	movs	r2, #12
 8008086:	701a      	strb	r2, [r3, #0]
        break;
 8008088:	e071      	b.n	800816e <task3StateHandler+0x50e>
    case STATE_Drop_balls_second_PAD:
        if (other_ball == 0)
 800808a:	4b3d      	ldr	r3, [pc, #244]	@ (8008180 <task3StateHandler+0x520>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <task3StateHandler+0x44a>
        {
            // Drop Yellow Balls
            open_yellow_door();
 8008092:	f7f9 f83f 	bl	8001114 <open_yellow_door>
            TankLift();
 8008096:	f7f8 ff8d 	bl	8000fb4 <TankLift>
            delay_ms(100);
 800809a:	2064      	movs	r0, #100	@ 0x64
 800809c:	f7f9 fa38 	bl	8001510 <delay_ms>
            close_yellow_door();
 80080a0:	f7f9 f85c 	bl	800115c <close_yellow_door>
            TankLower();
 80080a4:	f7f8 ff9e 	bl	8000fe4 <TankLower>
 80080a8:	e00a      	b.n	80080c0 <task3StateHandler+0x460>
        }
        else
        {
            // Drop White Balls
            open_white_door();
 80080aa:	f7f8 ffeb 	bl	8001084 <open_white_door>
            TankLift();
 80080ae:	f7f8 ff81 	bl	8000fb4 <TankLift>
            delay_ms(100);
 80080b2:	2064      	movs	r0, #100	@ 0x64
 80080b4:	f7f9 fa2c 	bl	8001510 <delay_ms>
            close_white_door();
 80080b8:	f7f9 f808 	bl	80010cc <close_white_door>
            TankLower();
 80080bc:	f7f8 ff92 	bl	8000fe4 <TankLower>
        }
        currentTask3SubState = reposition;
 80080c0:	4b31      	ldr	r3, [pc, #196]	@ (8008188 <task3StateHandler+0x528>)
 80080c2:	220d      	movs	r2, #13
 80080c4:	701a      	strb	r2, [r3, #0]
        break;
 80080c6:	e052      	b.n	800816e <task3StateHandler+0x50e>
    case reposition:
        enc_drive_T(820, 80, 60); // reposition
 80080c8:	223c      	movs	r2, #60	@ 0x3c
 80080ca:	2150      	movs	r1, #80	@ 0x50
 80080cc:	f44f 704d 	mov.w	r0, #820	@ 0x334
 80080d0:	f7f9 fd0e 	bl	8001af0 <enc_drive_T>
        m_stopLR();
 80080d4:	f7fd fbd2 	bl	800587c <m_stopLR>
        delay_ms(50);
 80080d8:	2032      	movs	r0, #50	@ 0x32
 80080da:	f7f9 fa19 	bl	8001510 <delay_ms>
        turn_Right_90_LR(); // Turn right 90 degrees to reposition to go front
 80080de:	f7fc f913 	bl	8004308 <turn_Right_90_LR>
        m_stopLR();
 80080e2:	f7fd fbcb 	bl	800587c <m_stopLR>
        delay_ms(50);
 80080e6:	2032      	movs	r0, #50	@ 0x32
 80080e8:	f7f9 fa12 	bl	8001510 <delay_ms>
        enc_drive_accel(400, 180, 50);
 80080ec:	2232      	movs	r2, #50	@ 0x32
 80080ee:	21b4      	movs	r1, #180	@ 0xb4
 80080f0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80080f4:	f7f9 fa30 	bl	8001558 <enc_drive_accel>
        enc_drive_fast_to_target(2400, 180, 60); // go front
 80080f8:	223c      	movs	r2, #60	@ 0x3c
 80080fa:	21b4      	movs	r1, #180	@ 0xb4
 80080fc:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8008100:	f7fa f9ce 	bl	80024a0 <enc_drive_fast_to_target>
        m_stopLR();
 8008104:	f7fd fbba 	bl	800587c <m_stopLR>
        delay_ms(50);
 8008108:	2032      	movs	r0, #50	@ 0x32
 800810a:	f7f9 fa01 	bl	8001510 <delay_ms>
        turn_Left_90_LR();
 800810e:	f7fc fa42 	bl	8004596 <turn_Left_90_LR>
        m_stopLR();
 8008112:	f7fd fbb3 	bl	800587c <m_stopLR>
        delay_ms(50);
 8008116:	2032      	movs	r0, #50	@ 0x32
 8008118:	f7f9 f9fa 	bl	8001510 <delay_ms>
        currentTask3SubState = STATE_Detect_Next_Line;
 800811c:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <task3StateHandler+0x528>)
 800811e:	220e      	movs	r2, #14
 8008120:	701a      	strb	r2, [r3, #0]
        break;
 8008122:	e024      	b.n	800816e <task3StateHandler+0x50e>
    case STATE_Detect_Next_Line:
        wall_follow_with_ultrasonic(100, 80, 2.85, 0, 0.02);
 8008124:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 800818c <task3StateHandler+0x52c>
 8008128:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8008190 <task3StateHandler+0x530>
 800812c:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8008194 <task3StateHandler+0x534>
 8008130:	2150      	movs	r1, #80	@ 0x50
 8008132:	2064      	movs	r0, #100	@ 0x64
 8008134:	f7fb faa6 	bl	8003684 <wall_follow_with_ultrasonic>
        resetEncoders();
 8008138:	f7fc fe26 	bl	8004d88 <resetEncoders>
        enc_drive_decel(750, 80, 65);
 800813c:	2241      	movs	r2, #65	@ 0x41
 800813e:	2150      	movs	r1, #80	@ 0x50
 8008140:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8008144:	f7f9 fadc 	bl	8001700 <enc_drive_decel>
        m_stopLR();
 8008148:	f7fd fb98 	bl	800587c <m_stopLR>
        delay_ms(80);
 800814c:	2050      	movs	r0, #80	@ 0x50
 800814e:	f7f9 f9df 	bl	8001510 <delay_ms>
        resetEncoders();
 8008152:	f7fc fe19 	bl	8004d88 <resetEncoders>
        turn_Right_90_LR();
 8008156:	f7fc f8d7 	bl	8004308 <turn_Right_90_LR>
        delay_ms(50);
 800815a:	2032      	movs	r0, #50	@ 0x32
 800815c:	f7f9 f9d8 	bl	8001510 <delay_ms>
        currentMainState = TASK_4;
 8008160:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <task3StateHandler+0x538>)
 8008162:	2203      	movs	r2, #3
 8008164:	701a      	strb	r2, [r3, #0]
        break;
 8008166:	e002      	b.n	800816e <task3StateHandler+0x50e>
        break;
 8008168:	bf00      	nop
 800816a:	e000      	b.n	800816e <task3StateHandler+0x50e>
        break;
 800816c:	bf00      	nop
    }
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000510 	.word	0x20000510
 800817c:	2000050c 	.word	0x2000050c
 8008180:	20000518 	.word	0x20000518
 8008184:	20000514 	.word	0x20000514
 8008188:	20000040 	.word	0x20000040
 800818c:	3ca3d70a 	.word	0x3ca3d70a
 8008190:	00000000 	.word	0x00000000
 8008194:	40366666 	.word	0x40366666
 8008198:	20000472 	.word	0x20000472

0800819c <ultrasonic_start>:
/// @param sonic /
void ultrasonic_start(int sonic)
// 0 left Ultraonic
// 1 right Ultraonic
// 2 front Ultraonic
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
    resetEncoders();
 80081a4:	f7fc fdf0 	bl	8004d88 <resetEncoders>
    for (int i = 0; i < 10; i++)
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e00e      	b.n	80081cc <ultrasonic_start+0x30>
    {
        DIST = Ultrasonic_GetDistance(sonic);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 fe14 	bl	8009de0 <Ultrasonic_GetDistance>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	4b07      	ldr	r3, [pc, #28]	@ (80081dc <ultrasonic_start+0x40>)
 80081be:	601a      	str	r2, [r3, #0]
        delay_ms(20);
 80081c0:	2014      	movs	r0, #20
 80081c2:	f7f9 f9a5 	bl	8001510 <delay_ms>
    for (int i = 0; i < 10; i++)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3301      	adds	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b09      	cmp	r3, #9
 80081d0:	dded      	ble.n	80081ae <ultrasonic_start+0x12>
    }
}
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20000598 	.word	0x20000598

080081e0 <box_detect>:
void box_detect(int sonic, int x, int y)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
    ultrasonic_start(sonic);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff ffd5 	bl	800819c <ultrasonic_start>
    if (DIST < 180)
 80081f2:	4b11      	ldr	r3, [pc, #68]	@ (8008238 <box_detect+0x58>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2bb3      	cmp	r3, #179	@ 0xb3
 80081f8:	dc0d      	bgt.n	8008216 <box_detect+0x36>
    {
        grid[x][y] = 1; // Mark the box as detected
 80081fa:	4910      	ldr	r1, [pc, #64]	@ (800823c <box_detect+0x5c>)
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	4613      	mov	r3, r2
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4413      	add	r3, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	4413      	add	r3, r2
 8008208:	2201      	movs	r2, #1
 800820a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DIST = 0;       // Reset the distance for the next check
 800820e:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <box_detect+0x58>)
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
    else
    {
        grid[x][y] = 0; // Mark the box as not detected
        DIST = 0;       // Reset the distance for the next check
    }
}
 8008214:	e00c      	b.n	8008230 <box_detect+0x50>
        grid[x][y] = 0; // Mark the box as not detected
 8008216:	4909      	ldr	r1, [pc, #36]	@ (800823c <box_detect+0x5c>)
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	4413      	add	r3, r2
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	4413      	add	r3, r2
 8008224:	2200      	movs	r2, #0
 8008226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DIST = 0;       // Reset the distance for the next check
 800822a:	4b03      	ldr	r3, [pc, #12]	@ (8008238 <box_detect+0x58>)
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000598 	.word	0x20000598
 800823c:	2000052c 	.word	0x2000052c

08008240 <box_detect_Custom>:
void box_detect_Custom(int sonic, int x, int y, int length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	603b      	str	r3, [r7, #0]
    ultrasonic_start(sonic);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ffa4 	bl	800819c <ultrasonic_start>
    if (DIST < length)
 8008254:	4b11      	ldr	r3, [pc, #68]	@ (800829c <box_detect_Custom+0x5c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	dd0d      	ble.n	800827a <box_detect_Custom+0x3a>
    {
        grid[x][y] = 1; // Mark the box as detected
 800825e:	4910      	ldr	r1, [pc, #64]	@ (80082a0 <box_detect_Custom+0x60>)
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	4413      	add	r3, r2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	4413      	add	r3, r2
 800826c:	2201      	movs	r2, #1
 800826e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DIST = 0;       // Reset the distance for the next check
 8008272:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <box_detect_Custom+0x5c>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
    else
    {
        grid[x][y] = 0; // Mark the box as not detected
        DIST = 0;       // Reset the distance for the next check
    }
}
 8008278:	e00c      	b.n	8008294 <box_detect_Custom+0x54>
        grid[x][y] = 0; // Mark the box as not detected
 800827a:	4909      	ldr	r1, [pc, #36]	@ (80082a0 <box_detect_Custom+0x60>)
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	4413      	add	r3, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	2200      	movs	r2, #0
 800828a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DIST = 0;       // Reset the distance for the next check
 800828e:	4b03      	ldr	r3, [pc, #12]	@ (800829c <box_detect_Custom+0x5c>)
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20000598 	.word	0x20000598
 80082a0:	2000052c 	.word	0x2000052c

080082a4 <colorScan>:
void colorScan()
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
    setTCAChannel(1);
 80082aa:	2001      	movs	r0, #1
 80082ac:	f7fc fd7c 	bl	8004da8 <setTCAChannel>
    delay_ms(10);
 80082b0:	200a      	movs	r0, #10
 80082b2:	f7f9 f92d 	bl	8001510 <delay_ms>
    for (int i = 0; i < 10; i++)
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
 80082ba:	e007      	b.n	80082cc <colorScan+0x28>
    {
        Top_C_BOX_Sensor();
 80082bc:	f001 fc70 	bl	8009ba0 <Top_C_BOX_Sensor>
        delay_ms(20);
 80082c0:	2014      	movs	r0, #20
 80082c2:	f7f9 f925 	bl	8001510 <delay_ms>
    for (int i = 0; i < 10; i++)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3301      	adds	r3, #1
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	ddf4      	ble.n	80082bc <colorScan+0x18>
    }
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <boxPick>:
void boxPick()
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
    BOX_Gripper_Open();
 80082e0:	f7f8 fffc 	bl	80012dc <BOX_Gripper_Open>
    BOX_Arm_Down();
 80082e4:	f7f8 ff76 	bl	80011d4 <BOX_Arm_Down>
    BOX_Gripper_Close();
 80082e8:	f7f9 f80c 	bl	8001304 <BOX_Gripper_Close>
    BOX_Arm_Up();
 80082ec:	f7f8 ff8a 	bl	8001204 <BOX_Arm_Up>
}
 80082f0:	bf00      	nop
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <boxPlace>:
void boxPlace()
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
    BOX_Arm_Down();
 80082f8:	f7f8 ff6c 	bl	80011d4 <BOX_Arm_Down>
    BOX_Gripper_Open();
 80082fc:	f7f8 ffee 	bl	80012dc <BOX_Gripper_Open>
    BOX_Arm_Up();
 8008300:	f7f8 ff80 	bl	8001204 <BOX_Arm_Up>
    BOX_Gripper_Close();
 8008304:	f7f8 fffe 	bl	8001304 <BOX_Gripper_Close>
}
 8008308:	bf00      	nop
 800830a:	bd80      	pop	{r7, pc}

0800830c <L90>:
//////////////////////////////
void L90()
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
    T4_turn_Left_90_LR();
 8008310:	f7fc fc6e 	bl	8004bf0 <T4_turn_Left_90_LR>
    m_stopLR();
 8008314:	f7fd fab2 	bl	800587c <m_stopLR>
    delay_ms(20);
 8008318:	2014      	movs	r0, #20
 800831a:	f7f9 f8f9 	bl	8001510 <delay_ms>
}
 800831e:	bf00      	nop
 8008320:	bd80      	pop	{r7, pc}

08008322 <R90>:
void R90()
{
 8008322:	b580      	push	{r7, lr}
 8008324:	af00      	add	r7, sp, #0
    T4_turn_Right_90_LR();
 8008326:	f7fc fb1c 	bl	8004962 <T4_turn_Right_90_LR>
    m_stopLR();
 800832a:	f7fd faa7 	bl	800587c <m_stopLR>
    delay_ms(20);
 800832e:	2014      	movs	r0, #20
 8008330:	f7f9 f8ee 	bl	8001510 <delay_ms>
}
 8008334:	bf00      	nop
 8008336:	bd80      	pop	{r7, pc}

08008338 <L180>:
void L180()
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
    T4_turn_Left_180_LR();
 800833c:	f7fc fbb5 	bl	8004aaa <T4_turn_Left_180_LR>
    m_stopLR();
 8008340:	f7fd fa9c 	bl	800587c <m_stopLR>
    delay_ms(20);
 8008344:	2014      	movs	r0, #20
 8008346:	f7f9 f8e3 	bl	8001510 <delay_ms>
}
 800834a:	bf00      	nop
 800834c:	bd80      	pop	{r7, pc}

0800834e <to_firsROW>:
//////////////////////////////
void to_firsROW()
{ // ultrasonic to whls axis 868
 800834e:	b580      	push	{r7, lr}
 8008350:	af00      	add	r7, sp, #0
    resetEncoders();
 8008352:	f7fc fd19 	bl	8004d88 <resetEncoders>
    enc_drive_T(900, 80, 60);
 8008356:	223c      	movs	r2, #60	@ 0x3c
 8008358:	2150      	movs	r1, #80	@ 0x50
 800835a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800835e:	f7f9 fbc7 	bl	8001af0 <enc_drive_T>
    m_stopLR();
 8008362:	f7fd fa8b 	bl	800587c <m_stopLR>
    delay_ms(20);
 8008366:	2014      	movs	r0, #20
 8008368:	f7f9 f8d2 	bl	8001510 <delay_ms>
    resetEncoders();
 800836c:	f7fc fd0c 	bl	8004d88 <resetEncoders>
}
 8008370:	bf00      	nop
 8008372:	bd80      	pop	{r7, pc}

08008374 <ultr_to_whl>:
void ultr_to_whl()
{ // ultrasonic to whls axis 868
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
    resetEncoders();
 8008378:	f7fc fd06 	bl	8004d88 <resetEncoders>
    enc_drive_T(868, 80, 60);
 800837c:	223c      	movs	r2, #60	@ 0x3c
 800837e:	2150      	movs	r1, #80	@ 0x50
 8008380:	f44f 7059 	mov.w	r0, #868	@ 0x364
 8008384:	f7f9 fbb4 	bl	8001af0 <enc_drive_T>
    m_stopLR();
 8008388:	f7fd fa78 	bl	800587c <m_stopLR>
    delay_ms(20);
 800838c:	2014      	movs	r0, #20
 800838e:	f7f9 f8bf 	bl	8001510 <delay_ms>
    resetEncoders();
 8008392:	f7fc fcf9 	bl	8004d88 <resetEncoders>
}
 8008396:	bf00      	nop
 8008398:	bd80      	pop	{r7, pc}

0800839a <box_scan_to_whl>:
void box_scan_to_whl()
{
 800839a:	b580      	push	{r7, lr}
 800839c:	af00      	add	r7, sp, #0
    resetEncoders();
 800839e:	f7fc fcf3 	bl	8004d88 <resetEncoders>
    enc_drive_T(1300, 80, 60);
 80083a2:	223c      	movs	r2, #60	@ 0x3c
 80083a4:	2150      	movs	r1, #80	@ 0x50
 80083a6:	f240 5014 	movw	r0, #1300	@ 0x514
 80083aa:	f7f9 fba1 	bl	8001af0 <enc_drive_T>
    m_stopLR();
 80083ae:	f7fd fa65 	bl	800587c <m_stopLR>
    delay_ms(20);
 80083b2:	2014      	movs	r0, #20
 80083b4:	f7f9 f8ac 	bl	8001510 <delay_ms>
    resetEncoders();
 80083b8:	f7fc fce6 	bl	8004d88 <resetEncoders>
}
 80083bc:	bf00      	nop
 80083be:	bd80      	pop	{r7, pc}

080083c0 <whl_to_box_scan>:
void whl_to_box_scan()
{ // whl axis to box scan lenght 372
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
    resetEncoders();
 80083c4:	f7fc fce0 	bl	8004d88 <resetEncoders>
    enc_drive_T(360, 80, 60);
 80083c8:	223c      	movs	r2, #60	@ 0x3c
 80083ca:	2150      	movs	r1, #80	@ 0x50
 80083cc:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 80083d0:	f7f9 fb8e 	bl	8001af0 <enc_drive_T>
    m_stopLR();
 80083d4:	f7fd fa52 	bl	800587c <m_stopLR>
    delay_ms(20);
 80083d8:	2014      	movs	r0, #20
 80083da:	f7f9 f899 	bl	8001510 <delay_ms>
    resetEncoders();
 80083de:	f7fc fcd3 	bl	8004d88 <resetEncoders>
}
 80083e2:	bf00      	nop
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <whl_to_box_scan_Reverse>:
void whl_to_box_scan_Reverse()
{ // whl axis to box scan lenght 372
 80083e6:	b580      	push	{r7, lr}
 80083e8:	af00      	add	r7, sp, #0
    resetEncoders();
 80083ea:	f7fc fccd 	bl	8004d88 <resetEncoders>
    enc_driveR_T(360, 80, 60);
 80083ee:	223c      	movs	r2, #60	@ 0x3c
 80083f0:	2150      	movs	r1, #80	@ 0x50
 80083f2:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 80083f6:	f7f9 ff33 	bl	8002260 <enc_driveR_T>
    m_stopLR();
 80083fa:	f7fd fa3f 	bl	800587c <m_stopLR>
    delay_ms(20);
 80083fe:	2014      	movs	r0, #20
 8008400:	f7f9 f886 	bl	8001510 <delay_ms>
    resetEncoders();
 8008404:	f7fc fcc0 	bl	8004d88 <resetEncoders>
}
 8008408:	bf00      	nop
 800840a:	bd80      	pop	{r7, pc}

0800840c <whl_to_ultr_cell_Reverse>:
    m_stopLR();
    delay_ms(20);
    resetEncoders();
}
void whl_to_ultr_cell_Reverse()
{ // whl axis to eltr on cell
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
    resetEncoders();
 8008410:	f7fc fcba 	bl	8004d88 <resetEncoders>
    enc_driveR_T(930, 80, 60);
 8008414:	223c      	movs	r2, #60	@ 0x3c
 8008416:	2150      	movs	r1, #80	@ 0x50
 8008418:	f240 30a2 	movw	r0, #930	@ 0x3a2
 800841c:	f7f9 ff20 	bl	8002260 <enc_driveR_T>
    m_stopLR();
 8008420:	f7fd fa2c 	bl	800587c <m_stopLR>
    delay_ms(20);
 8008424:	2014      	movs	r0, #20
 8008426:	f7f9 f873 	bl	8001510 <delay_ms>
    resetEncoders();
 800842a:	f7fc fcad 	bl	8004d88 <resetEncoders>
}
 800842e:	bf00      	nop
 8008430:	bd80      	pop	{r7, pc}

08008432 <whl_to_whl>:
void whl_to_whl()
{
 8008432:	b580      	push	{r7, lr}
 8008434:	af00      	add	r7, sp, #0
    resetEncoders();
 8008436:	f7fc fca7 	bl	8004d88 <resetEncoders>
    enc_drive_T(1755, 80, 60);
 800843a:	223c      	movs	r2, #60	@ 0x3c
 800843c:	2150      	movs	r1, #80	@ 0x50
 800843e:	f240 60db 	movw	r0, #1755	@ 0x6db
 8008442:	f7f9 fb55 	bl	8001af0 <enc_drive_T>
    m_stopLR();
 8008446:	f7fd fa19 	bl	800587c <m_stopLR>
    delay_ms(20);
 800844a:	2014      	movs	r0, #20
 800844c:	f7f9 f860 	bl	8001510 <delay_ms>
    resetEncoders();
 8008450:	f7fc fc9a 	bl	8004d88 <resetEncoders>
}
 8008454:	bf00      	nop
 8008456:	bd80      	pop	{r7, pc}

08008458 <ontoCell_2_1>:
    m_stopLR();
    delay_ms(20);
    resetEncoders();
}
void ontoCell_2_1()
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
    resetEncoders();
 800845c:	f7fc fc94 	bl	8004d88 <resetEncoders>
    enc_driveR_T(1382, 80, 60);
 8008460:	223c      	movs	r2, #60	@ 0x3c
 8008462:	2150      	movs	r1, #80	@ 0x50
 8008464:	f240 5066 	movw	r0, #1382	@ 0x566
 8008468:	f7f9 fefa 	bl	8002260 <enc_driveR_T>
    m_stopLR();
 800846c:	f7fd fa06 	bl	800587c <m_stopLR>
    delay_ms(20);
 8008470:	2014      	movs	r0, #20
 8008472:	f7f9 f84d 	bl	8001510 <delay_ms>
    resetEncoders();
 8008476:	f7fc fc87 	bl	8004d88 <resetEncoders>
}
 800847a:	bf00      	nop
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <to_cell_0_1>:
///////////////////////////////
void to_cell_0_1()
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
    resetEncoders();
 8008484:	f7fc fc80 	bl	8004d88 <resetEncoders>
    ultr_to_whl();
 8008488:	f7ff ff74 	bl	8008374 <ultr_to_whl>
    R90();
 800848c:	f7ff ff49 	bl	8008322 <R90>
    to_firsROW();
 8008490:	f7ff ff5d 	bl	800834e <to_firsROW>
    if (grid[0][0] == 1)
 8008494:	4b33      	ldr	r3, [pc, #204]	@ (8008564 <to_cell_0_1+0xe4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d11d      	bne.n	80084d8 <to_cell_0_1+0x58>
    {
        R90();
 800849c:	f7ff ff41 	bl	8008322 <R90>
        whl_to_box_scan();
 80084a0:	f7ff ff8e 	bl	80083c0 <whl_to_box_scan>
        colorScan();
 80084a4:	f7ff fefe 	bl	80082a4 <colorScan>
        if (boxColor == COLOR_BLUE)
 80084a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008568 <to_cell_0_1+0xe8>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b05      	cmp	r3, #5
 80084ae:	d106      	bne.n	80084be <to_cell_0_1+0x3e>
        {
            BLUE();
 80084b0:	f7fd fdfc 	bl	80060ac <BLUE>
            whl_to_box_scan_Reverse();
 80084b4:	f7ff ff97 	bl	80083e6 <whl_to_box_scan_Reverse>
            L90();
 80084b8:	f7ff ff28 	bl	800830c <L90>
 80084bc:	e00c      	b.n	80084d8 <to_cell_0_1+0x58>
        }
        else
        {
            RED();
 80084be:	f7fd fdb5 	bl	800602c <RED>
            boxPick();
 80084c2:	f7ff ff0b 	bl	80082dc <boxPick>
            red_picked = 1;
 80084c6:	4b29      	ldr	r3, [pc, #164]	@ (800856c <to_cell_0_1+0xec>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	601a      	str	r2, [r3, #0]
            whl_to_box_scan_Reverse();
 80084cc:	f7ff ff8b 	bl	80083e6 <whl_to_box_scan_Reverse>
            R90();
 80084d0:	f7ff ff27 	bl	8008322 <R90>
            whl_to_ultr_cell_Reverse();
 80084d4:	f7ff ff9a 	bl	800840c <whl_to_ultr_cell_Reverse>
        }
    }
    if (red_picked == 0)
 80084d8:	4b24      	ldr	r3, [pc, #144]	@ (800856c <to_cell_0_1+0xec>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d12d      	bne.n	800853c <to_cell_0_1+0xbc>
    {
        L90();
 80084e0:	f7ff ff14 	bl	800830c <L90>
        box_detect(1, 0, 2);
 80084e4:	2202      	movs	r2, #2
 80084e6:	2100      	movs	r1, #0
 80084e8:	2001      	movs	r0, #1
 80084ea:	f7ff fe79 	bl	80081e0 <box_detect>
        if (grid[0][2] == 1)
 80084ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008564 <to_cell_0_1+0xe4>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d11d      	bne.n	8008532 <to_cell_0_1+0xb2>
        {
            whl_to_box_scan();
 80084f6:	f7ff ff63 	bl	80083c0 <whl_to_box_scan>
            colorScan();
 80084fa:	f7ff fed3 	bl	80082a4 <colorScan>
            if (boxColor == COLOR_BLUE)
 80084fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008568 <to_cell_0_1+0xe8>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b05      	cmp	r3, #5
 8008504:	d107      	bne.n	8008516 <to_cell_0_1+0x96>
            {
                whl_to_box_scan_Reverse();
 8008506:	f7ff ff6e 	bl	80083e6 <whl_to_box_scan_Reverse>
                R90();
 800850a:	f7ff ff0a 	bl	8008322 <R90>
                goto_1_ROW = 1;
 800850e:	4b18      	ldr	r3, [pc, #96]	@ (8008570 <to_cell_0_1+0xf0>)
 8008510:	2201      	movs	r2, #1
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	e012      	b.n	800853c <to_cell_0_1+0xbc>
            }
            else
            {
                RED();
 8008516:	f7fd fd89 	bl	800602c <RED>
                boxPick();
 800851a:	f7ff fedf 	bl	80082dc <boxPick>
                red_picked = 1;
 800851e:	4b13      	ldr	r3, [pc, #76]	@ (800856c <to_cell_0_1+0xec>)
 8008520:	2201      	movs	r2, #1
 8008522:	601a      	str	r2, [r3, #0]
                whl_to_box_scan_Reverse();
 8008524:	f7ff ff5f 	bl	80083e6 <whl_to_box_scan_Reverse>
                L90();
 8008528:	f7ff fef0 	bl	800830c <L90>
                whl_to_ultr_cell_Reverse();
 800852c:	f7ff ff6e 	bl	800840c <whl_to_ultr_cell_Reverse>
 8008530:	e004      	b.n	800853c <to_cell_0_1+0xbc>
            }
        }
        else
        {
            R90();
 8008532:	f7ff fef6 	bl	8008322 <R90>
            goto_1_ROW = 1;
 8008536:	4b0e      	ldr	r3, [pc, #56]	@ (8008570 <to_cell_0_1+0xf0>)
 8008538:	2201      	movs	r2, #1
 800853a:	601a      	str	r2, [r3, #0]
        }
    }
    if (red_picked == 1)
 800853c:	4b0b      	ldr	r3, [pc, #44]	@ (800856c <to_cell_0_1+0xec>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d103      	bne.n	800854c <to_cell_0_1+0xcc>
    {
        currentTask4SubState = FinishToline;
 8008544:	4b0b      	ldr	r3, [pc, #44]	@ (8008574 <to_cell_0_1+0xf4>)
 8008546:	220a      	movs	r2, #10
 8008548:	701a      	strb	r2, [r3, #0]
    else if (goto_1_ROW == 1)
    {
        resetEncoders();
        currentTask4SubState = STATE_1_ROW;
    }
}
 800854a:	e008      	b.n	800855e <to_cell_0_1+0xde>
    else if (goto_1_ROW == 1)
 800854c:	4b08      	ldr	r3, [pc, #32]	@ (8008570 <to_cell_0_1+0xf0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d104      	bne.n	800855e <to_cell_0_1+0xde>
        resetEncoders();
 8008554:	f7fc fc18 	bl	8004d88 <resetEncoders>
        currentTask4SubState = STATE_1_ROW;
 8008558:	4b06      	ldr	r3, [pc, #24]	@ (8008574 <to_cell_0_1+0xf4>)
 800855a:	2202      	movs	r2, #2
 800855c:	701a      	strb	r2, [r3, #0]
}
 800855e:	bf00      	nop
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	2000052c 	.word	0x2000052c
 8008568:	200005c9 	.word	0x200005c9
 800856c:	2000059c 	.word	0x2000059c
 8008570:	200005a4 	.word	0x200005a4
 8008574:	200005ac 	.word	0x200005ac

08008578 <to_cell_0_0>:
void to_cell_0_0()
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
    resetEncoders();
 800857c:	f7fc fc04 	bl	8004d88 <resetEncoders>
    enc_driveR_T(825, 80, 60);
 8008580:	223c      	movs	r2, #60	@ 0x3c
 8008582:	2150      	movs	r1, #80	@ 0x50
 8008584:	f240 3039 	movw	r0, #825	@ 0x339
 8008588:	f7f9 fe6a 	bl	8002260 <enc_driveR_T>
    m_stopLR();
 800858c:	f7fd f976 	bl	800587c <m_stopLR>
    delay_ms(20);
 8008590:	2014      	movs	r0, #20
 8008592:	f7f8 ffbd 	bl	8001510 <delay_ms>
    resetEncoders();
 8008596:	f7fc fbf7 	bl	8004d88 <resetEncoders>
    R90();
 800859a:	f7ff fec2 	bl	8008322 <R90>
    to_firsROW();
 800859e:	f7ff fed6 	bl	800834e <to_firsROW>
    L90();
 80085a2:	f7ff feb3 	bl	800830c <L90>
    whl_to_box_scan();
 80085a6:	f7ff ff0b 	bl	80083c0 <whl_to_box_scan>
    colorScan();
 80085aa:	f7ff fe7b 	bl	80082a4 <colorScan>
    if (boxColor == COLOR_BLUE)
 80085ae:	4b3b      	ldr	r3, [pc, #236]	@ (800869c <to_cell_0_0+0x124>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b05      	cmp	r3, #5
 80085b4:	d102      	bne.n	80085bc <to_cell_0_0+0x44>
    {
        BLUE();
 80085b6:	f7fd fd79 	bl	80060ac <BLUE>
 80085ba:	e001      	b.n	80085c0 <to_cell_0_0+0x48>
    }
    else
    {
        RED();
 80085bc:	f7fd fd36 	bl	800602c <RED>
    }
    boxPick();
 80085c0:	f7ff fe8c 	bl	80082dc <boxPick>
    grid[0][1] = 0;
 80085c4:	4b36      	ldr	r3, [pc, #216]	@ (80086a0 <to_cell_0_0+0x128>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
    box_scan_to_whl();
 80085ca:	f7ff fee6 	bl	800839a <box_scan_to_whl>
    box_detect(1, 0, 2);
 80085ce:	2202      	movs	r2, #2
 80085d0:	2100      	movs	r1, #0
 80085d2:	2001      	movs	r0, #1
 80085d4:	f7ff fe04 	bl	80081e0 <box_detect>

    if (boxColor == COLOR_BLUE)
 80085d8:	4b30      	ldr	r3, [pc, #192]	@ (800869c <to_cell_0_0+0x124>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b05      	cmp	r3, #5
 80085de:	d141      	bne.n	8008664 <to_cell_0_0+0xec>
    {
        BLUE();
 80085e0:	f7fd fd64 	bl	80060ac <BLUE>
        L180();
 80085e4:	f7ff fea8 	bl	8008338 <L180>
        whl_to_box_scan();
 80085e8:	f7ff feea 	bl	80083c0 <whl_to_box_scan>
        boxPlace();
 80085ec:	f7ff fe82 	bl	80082f4 <boxPlace>
        grid[0][0] = 1;
 80085f0:	4b2b      	ldr	r3, [pc, #172]	@ (80086a0 <to_cell_0_0+0x128>)
 80085f2:	2201      	movs	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
        visited[0][0] = 1;
 80085f6:	4b2b      	ldr	r3, [pc, #172]	@ (80086a4 <to_cell_0_0+0x12c>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	601a      	str	r2, [r3, #0]
        whl_to_box_scan_Reverse();
 80085fc:	f7ff fef3 	bl	80083e6 <whl_to_box_scan_Reverse>
        L90();
 8008600:	f7ff fe84 	bl	800830c <L90>
        if (grid[0][2] == 1 && red_picked == 0 && visited[0][2] == 0)
 8008604:	4b26      	ldr	r3, [pc, #152]	@ (80086a0 <to_cell_0_0+0x128>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d127      	bne.n	800865c <to_cell_0_0+0xe4>
 800860c:	4b26      	ldr	r3, [pc, #152]	@ (80086a8 <to_cell_0_0+0x130>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d123      	bne.n	800865c <to_cell_0_0+0xe4>
 8008614:	4b23      	ldr	r3, [pc, #140]	@ (80086a4 <to_cell_0_0+0x12c>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d11f      	bne.n	800865c <to_cell_0_0+0xe4>
        {

            L90();
 800861c:	f7ff fe76 	bl	800830c <L90>
            whl_to_box_scan();
 8008620:	f7ff fece 	bl	80083c0 <whl_to_box_scan>
            colorScan();
 8008624:	f7ff fe3e 	bl	80082a4 <colorScan>
            if (boxColor == COLOR_BLUE)
 8008628:	4b1c      	ldr	r3, [pc, #112]	@ (800869c <to_cell_0_0+0x124>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b05      	cmp	r3, #5
 800862e:	d109      	bne.n	8008644 <to_cell_0_0+0xcc>
            {
                BLUE();
 8008630:	f7fd fd3c 	bl	80060ac <BLUE>
                whl_to_box_scan_Reverse();
 8008634:	f7ff fed7 	bl	80083e6 <whl_to_box_scan_Reverse>
                R90();
 8008638:	f7ff fe73 	bl	8008322 <R90>
                goto_1_ROW = 1;
 800863c:	4b1b      	ldr	r3, [pc, #108]	@ (80086ac <to_cell_0_0+0x134>)
 800863e:	2201      	movs	r2, #1
 8008640:	601a      	str	r2, [r3, #0]
            if (boxColor == COLOR_BLUE)
 8008642:	e018      	b.n	8008676 <to_cell_0_0+0xfe>
            }
            else
            {
                RED();
 8008644:	f7fd fcf2 	bl	800602c <RED>
                red_picked = 1;
 8008648:	4b17      	ldr	r3, [pc, #92]	@ (80086a8 <to_cell_0_0+0x130>)
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
                boxPick();
 800864e:	f7ff fe45 	bl	80082dc <boxPick>
                whl_to_box_scan_Reverse();
 8008652:	f7ff fec8 	bl	80083e6 <whl_to_box_scan_Reverse>
                L90();
 8008656:	f7ff fe59 	bl	800830c <L90>
            if (boxColor == COLOR_BLUE)
 800865a:	e00c      	b.n	8008676 <to_cell_0_0+0xfe>
            }
        }
        else
        {
            goto_1_ROW = 1;
 800865c:	4b13      	ldr	r3, [pc, #76]	@ (80086ac <to_cell_0_0+0x134>)
 800865e:	2201      	movs	r2, #1
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	e008      	b.n	8008676 <to_cell_0_0+0xfe>
        }
        ///////////////// go to 0,2 ans scan and and if blue come to 0,1 , if red pick and exit
    }
    else
    {
        RED();
 8008664:	f7fd fce2 	bl	800602c <RED>
        red_picked = 1;
 8008668:	4b0f      	ldr	r3, [pc, #60]	@ (80086a8 <to_cell_0_0+0x130>)
 800866a:	2201      	movs	r2, #1
 800866c:	601a      	str	r2, [r3, #0]
        L90();
 800866e:	f7ff fe4d 	bl	800830c <L90>
        whl_to_ultr_cell_Reverse();
 8008672:	f7ff fecb 	bl	800840c <whl_to_ultr_cell_Reverse>
    }
    if (red_picked == 1)
 8008676:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <to_cell_0_0+0x130>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d103      	bne.n	8008686 <to_cell_0_0+0x10e>
    {
        currentTask4SubState = FinishToline;
 800867e:	4b0c      	ldr	r3, [pc, #48]	@ (80086b0 <to_cell_0_0+0x138>)
 8008680:	220a      	movs	r2, #10
 8008682:	701a      	strb	r2, [r3, #0]
    else if (goto_1_ROW == 1)
    {
        resetEncoders();
        currentTask4SubState = STATE_1_ROW;
    }
}
 8008684:	e008      	b.n	8008698 <to_cell_0_0+0x120>
    else if (goto_1_ROW == 1)
 8008686:	4b09      	ldr	r3, [pc, #36]	@ (80086ac <to_cell_0_0+0x134>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d104      	bne.n	8008698 <to_cell_0_0+0x120>
        resetEncoders();
 800868e:	f7fc fb7b 	bl	8004d88 <resetEncoders>
        currentTask4SubState = STATE_1_ROW;
 8008692:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <to_cell_0_0+0x138>)
 8008694:	2202      	movs	r2, #2
 8008696:	701a      	strb	r2, [r3, #0]
}
 8008698:	bf00      	nop
 800869a:	bd80      	pop	{r7, pc}
 800869c:	200005c9 	.word	0x200005c9
 80086a0:	2000052c 	.word	0x2000052c
 80086a4:	20000550 	.word	0x20000550
 80086a8:	2000059c 	.word	0x2000059c
 80086ac:	200005a4 	.word	0x200005a4
 80086b0:	200005ac 	.word	0x200005ac

080086b4 <to_cell_1_1_noBOX>:
void to_cell_1_1_noBOX()
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
    whl_to_whl();
 80086b8:	f7ff febb 	bl	8008432 <whl_to_whl>
    R90();
 80086bc:	f7ff fe31 	bl	8008322 <R90>
    box_detect(1, 1, 0);
 80086c0:	2200      	movs	r2, #0
 80086c2:	2101      	movs	r1, #1
 80086c4:	2001      	movs	r0, #1
 80086c6:	f7ff fd8b 	bl	80081e0 <box_detect>
    if (grid[1][0] == 1)
 80086ca:	4b32      	ldr	r3, [pc, #200]	@ (8008794 <to_cell_1_1_noBOX+0xe0>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d11a      	bne.n	8008708 <to_cell_1_1_noBOX+0x54>
    {
        whl_to_box_scan();
 80086d2:	f7ff fe75 	bl	80083c0 <whl_to_box_scan>
        colorScan();
 80086d6:	f7ff fde5 	bl	80082a4 <colorScan>
        if (boxColor == COLOR_BLUE)
 80086da:	4b2f      	ldr	r3, [pc, #188]	@ (8008798 <to_cell_1_1_noBOX+0xe4>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d106      	bne.n	80086f0 <to_cell_1_1_noBOX+0x3c>
        {
            BLUE();
 80086e2:	f7fd fce3 	bl	80060ac <BLUE>
            whl_to_box_scan_Reverse();
 80086e6:	f7ff fe7e 	bl	80083e6 <whl_to_box_scan_Reverse>
            L90();
 80086ea:	f7ff fe0f 	bl	800830c <L90>
 80086ee:	e00d      	b.n	800870c <to_cell_1_1_noBOX+0x58>
        }
        else
        {
            RED();
 80086f0:	f7fd fc9c 	bl	800602c <RED>
            boxPick();
 80086f4:	f7ff fdf2 	bl	80082dc <boxPick>
            red_picked = 1;
 80086f8:	4b28      	ldr	r3, [pc, #160]	@ (800879c <to_cell_1_1_noBOX+0xe8>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
            whl_to_box_scan_Reverse();
 80086fe:	f7ff fe72 	bl	80083e6 <whl_to_box_scan_Reverse>
            R90();
 8008702:	f7ff fe0e 	bl	8008322 <R90>
 8008706:	e001      	b.n	800870c <to_cell_1_1_noBOX+0x58>
        }
    }
    else
    {
        L90();
 8008708:	f7ff fe00 	bl	800830c <L90>
    }
    if (red_picked == 0)
 800870c:	4b23      	ldr	r3, [pc, #140]	@ (800879c <to_cell_1_1_noBOX+0xe8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d12b      	bne.n	800876c <to_cell_1_1_noBOX+0xb8>
    {
        L90();
 8008714:	f7ff fdfa 	bl	800830c <L90>
        box_detect(1, 1, 2);
 8008718:	2202      	movs	r2, #2
 800871a:	2101      	movs	r1, #1
 800871c:	2001      	movs	r0, #1
 800871e:	f7ff fd5f 	bl	80081e0 <box_detect>
        if (grid[1][2] == 1)
 8008722:	4b1c      	ldr	r3, [pc, #112]	@ (8008794 <to_cell_1_1_noBOX+0xe0>)
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d11b      	bne.n	8008762 <to_cell_1_1_noBOX+0xae>
        {
            whl_to_box_scan();
 800872a:	f7ff fe49 	bl	80083c0 <whl_to_box_scan>
            colorScan();
 800872e:	f7ff fdb9 	bl	80082a4 <colorScan>
            if (boxColor == COLOR_BLUE)
 8008732:	4b19      	ldr	r3, [pc, #100]	@ (8008798 <to_cell_1_1_noBOX+0xe4>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b05      	cmp	r3, #5
 8008738:	d107      	bne.n	800874a <to_cell_1_1_noBOX+0x96>
            {
                whl_to_box_scan_Reverse();
 800873a:	f7ff fe54 	bl	80083e6 <whl_to_box_scan_Reverse>
                R90();
 800873e:	f7ff fdf0 	bl	8008322 <R90>
                goto_2_ROW = 1;
 8008742:	4b17      	ldr	r3, [pc, #92]	@ (80087a0 <to_cell_1_1_noBOX+0xec>)
 8008744:	2201      	movs	r2, #1
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	e010      	b.n	800876c <to_cell_1_1_noBOX+0xb8>
            }
            else
            {
                RED();
 800874a:	f7fd fc6f 	bl	800602c <RED>
                boxPick();
 800874e:	f7ff fdc5 	bl	80082dc <boxPick>
                red_picked = 1;
 8008752:	4b12      	ldr	r3, [pc, #72]	@ (800879c <to_cell_1_1_noBOX+0xe8>)
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
                whl_to_box_scan_Reverse();
 8008758:	f7ff fe45 	bl	80083e6 <whl_to_box_scan_Reverse>
                L90();
 800875c:	f7ff fdd6 	bl	800830c <L90>
 8008760:	e004      	b.n	800876c <to_cell_1_1_noBOX+0xb8>
            }
        }
        else
        {
            R90();
 8008762:	f7ff fdde 	bl	8008322 <R90>
            goto_2_ROW = 1;
 8008766:	4b0e      	ldr	r3, [pc, #56]	@ (80087a0 <to_cell_1_1_noBOX+0xec>)
 8008768:	2201      	movs	r2, #1
 800876a:	601a      	str	r2, [r3, #0]
        }
    }
    if (red_picked == 1)
 800876c:	4b0b      	ldr	r3, [pc, #44]	@ (800879c <to_cell_1_1_noBOX+0xe8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d103      	bne.n	800877c <to_cell_1_1_noBOX+0xc8>
    {
        currentTask4SubState = FinishToline;
 8008774:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <to_cell_1_1_noBOX+0xf0>)
 8008776:	220a      	movs	r2, #10
 8008778:	701a      	strb	r2, [r3, #0]
    else if (goto_2_ROW == 1)
    {
        resetEncoders();
        currentTask4SubState = STATE_2_ROW;
    }
}
 800877a:	e008      	b.n	800878e <to_cell_1_1_noBOX+0xda>
    else if (goto_2_ROW == 1)
 800877c:	4b08      	ldr	r3, [pc, #32]	@ (80087a0 <to_cell_1_1_noBOX+0xec>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d104      	bne.n	800878e <to_cell_1_1_noBOX+0xda>
        resetEncoders();
 8008784:	f7fc fb00 	bl	8004d88 <resetEncoders>
        currentTask4SubState = STATE_2_ROW;
 8008788:	4b06      	ldr	r3, [pc, #24]	@ (80087a4 <to_cell_1_1_noBOX+0xf0>)
 800878a:	2203      	movs	r2, #3
 800878c:	701a      	strb	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000052c 	.word	0x2000052c
 8008798:	200005c9 	.word	0x200005c9
 800879c:	2000059c 	.word	0x2000059c
 80087a0:	200005a8 	.word	0x200005a8
 80087a4:	200005ac 	.word	0x200005ac

080087a8 <to_cell_1_1_BOX>:
void to_cell_1_1_BOX()
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
    whl_to_box_scan();
 80087ac:	f7ff fe08 	bl	80083c0 <whl_to_box_scan>
    colorScan();
 80087b0:	f7ff fd78 	bl	80082a4 <colorScan>
    if (boxColor == COLOR_BLUE)
 80087b4:	4ba8      	ldr	r3, [pc, #672]	@ (8008a58 <to_cell_1_1_BOX+0x2b0>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b05      	cmp	r3, #5
 80087ba:	f040 812f 	bne.w	8008a1c <to_cell_1_1_BOX+0x274>
    {
        BLUE();
 80087be:	f7fd fc75 	bl	80060ac <BLUE>
        boxPick();
 80087c2:	f7ff fd8b 	bl	80082dc <boxPick>
        grid[1][1] = 0;
 80087c6:	4ba5      	ldr	r3, [pc, #660]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	611a      	str	r2, [r3, #16]
        box_scan_to_whl();
 80087cc:	f7ff fde5 	bl	800839a <box_scan_to_whl>
        R90();
 80087d0:	f7ff fda7 	bl	8008322 <R90>
        box_detect(1, 1, 0);
 80087d4:	2200      	movs	r2, #0
 80087d6:	2101      	movs	r1, #1
 80087d8:	2001      	movs	r0, #1
 80087da:	f7ff fd01 	bl	80081e0 <box_detect>

        if (grid[1][0] == 1)
 80087de:	4b9f      	ldr	r3, [pc, #636]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	f040 80df 	bne.w	80089a6 <to_cell_1_1_BOX+0x1fe>
        {
            whl_to_box_scan();
 80087e8:	f7ff fdea 	bl	80083c0 <whl_to_box_scan>
            colorScan();
 80087ec:	f7ff fd5a 	bl	80082a4 <colorScan>
            if (boxColor == COLOR_RED)
 80087f0:	4b99      	ldr	r3, [pc, #612]	@ (8008a58 <to_cell_1_1_BOX+0x2b0>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d104      	bne.n	8008802 <to_cell_1_1_BOX+0x5a>
            {
                RED();
 80087f8:	f7fd fc18 	bl	800602c <RED>
                red_array[1][0] = 1;
 80087fc:	4b98      	ldr	r3, [pc, #608]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 80087fe:	2201      	movs	r2, #1
 8008800:	60da      	str	r2, [r3, #12]
            }
            whl_to_box_scan_Reverse();
 8008802:	f7ff fdf0 	bl	80083e6 <whl_to_box_scan_Reverse>
            L180();
 8008806:	f7ff fd97 	bl	8008338 <L180>
            box_detect(1, 1, 2);
 800880a:	2202      	movs	r2, #2
 800880c:	2101      	movs	r1, #1
 800880e:	2001      	movs	r0, #1
 8008810:	f7ff fce6 	bl	80081e0 <box_detect>
            if (grid[1][2] == 1)
 8008814:	4b91      	ldr	r3, [pc, #580]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b01      	cmp	r3, #1
 800881a:	f040 80a3 	bne.w	8008964 <to_cell_1_1_BOX+0x1bc>
            {
                whl_to_box_scan();
 800881e:	f7ff fdcf 	bl	80083c0 <whl_to_box_scan>
                colorScan();
 8008822:	f7ff fd3f 	bl	80082a4 <colorScan>
                if (boxColor == COLOR_RED)
 8008826:	4b8c      	ldr	r3, [pc, #560]	@ (8008a58 <to_cell_1_1_BOX+0x2b0>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b03      	cmp	r3, #3
 800882c:	d104      	bne.n	8008838 <to_cell_1_1_BOX+0x90>
                {
                    RED();
 800882e:	f7fd fbfd 	bl	800602c <RED>
                    red_array[1][2] = 1;
 8008832:	4b8b      	ldr	r3, [pc, #556]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 8008834:	2201      	movs	r2, #1
 8008836:	615a      	str	r2, [r3, #20]
                }
                whl_to_box_scan_Reverse();
 8008838:	f7ff fdd5 	bl	80083e6 <whl_to_box_scan_Reverse>
                if (grid[0][0] == 1 && grid[0][2] == 1)
 800883c:	4b87      	ldr	r3, [pc, #540]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d133      	bne.n	80088ac <to_cell_1_1_BOX+0x104>
 8008844:	4b85      	ldr	r3, [pc, #532]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d12f      	bne.n	80088ac <to_cell_1_1_BOX+0x104>
                {
                    R90();
 800884c:	f7ff fd69 	bl	8008322 <R90>
                    whl_to_box_scan();
 8008850:	f7ff fdb6 	bl	80083c0 <whl_to_box_scan>
                    boxPlace();
 8008854:	f7ff fd4e 	bl	80082f4 <boxPlace>
                    grid[2][1] = 1;
 8008858:	4b80      	ldr	r3, [pc, #512]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 800885a:	2201      	movs	r2, #1
 800885c:	61da      	str	r2, [r3, #28]
                    whl_to_box_scan_Reverse();
 800885e:	f7ff fdc2 	bl	80083e6 <whl_to_box_scan_Reverse>
                    if (red_array[1][0] == 1)
 8008862:	4b7f      	ldr	r3, [pc, #508]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d10d      	bne.n	8008886 <to_cell_1_1_BOX+0xde>
                    {
                        R90();
 800886a:	f7ff fd5a 	bl	8008322 <R90>
                        whl_to_box_scan();
 800886e:	f7ff fda7 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008872:	f7ff fd33 	bl	80082dc <boxPick>
                        red_picked = 1;
 8008876:	4b7b      	ldr	r3, [pc, #492]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 800887c:	f7ff fdb3 	bl	80083e6 <whl_to_box_scan_Reverse>
                        R90();
 8008880:	f7ff fd4f 	bl	8008322 <R90>
                    if (red_array[1][0] == 1)
 8008884:	e0d4      	b.n	8008a30 <to_cell_1_1_BOX+0x288>
                    }
                    else if (red_array[1][2] == 1)
 8008886:	4b76      	ldr	r3, [pc, #472]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	2b01      	cmp	r3, #1
 800888c:	f040 80d0 	bne.w	8008a30 <to_cell_1_1_BOX+0x288>
                    {
                        L90();
 8008890:	f7ff fd3c 	bl	800830c <L90>
                        whl_to_box_scan();
 8008894:	f7ff fd94 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008898:	f7ff fd20 	bl	80082dc <boxPick>
                        red_picked = 1;
 800889c:	4b71      	ldr	r3, [pc, #452]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 800889e:	2201      	movs	r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 80088a2:	f7ff fda0 	bl	80083e6 <whl_to_box_scan_Reverse>
                        L90();
 80088a6:	f7ff fd31 	bl	800830c <L90>
                    if (red_array[1][0] == 1)
 80088aa:	e0c1      	b.n	8008a30 <to_cell_1_1_BOX+0x288>
                    }
                }
                else if (grid[0][0] == 0 || grid[0][2] == 0)
 80088ac:	4b6b      	ldr	r3, [pc, #428]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d004      	beq.n	80088be <to_cell_1_1_BOX+0x116>
 80088b4:	4b69      	ldr	r3, [pc, #420]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f040 80ba 	bne.w	8008a32 <to_cell_1_1_BOX+0x28a>
                {
                    L90();
 80088be:	f7ff fd25 	bl	800830c <L90>
                    whl_to_whl();
 80088c2:	f7ff fdb6 	bl	8008432 <whl_to_whl>
                    if (grid[0][0] == 0)
 80088c6:	4b65      	ldr	r3, [pc, #404]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10f      	bne.n	80088ee <to_cell_1_1_BOX+0x146>
                    {
                        L90();
 80088ce:	f7ff fd1d 	bl	800830c <L90>
                        whl_to_box_scan();
 80088d2:	f7ff fd75 	bl	80083c0 <whl_to_box_scan>
                        boxPlace();
 80088d6:	f7ff fd0d 	bl	80082f4 <boxPlace>
                        grid[0][0] = 1;
 80088da:	4b60      	ldr	r3, [pc, #384]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80088dc:	2201      	movs	r2, #1
 80088de:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 80088e0:	f7ff fd81 	bl	80083e6 <whl_to_box_scan_Reverse>
                        L90();
 80088e4:	f7ff fd12 	bl	800830c <L90>
                        whl_to_whl();
 80088e8:	f7ff fda3 	bl	8008432 <whl_to_whl>
 80088ec:	e012      	b.n	8008914 <to_cell_1_1_BOX+0x16c>
                    }
                    else if (grid[0][2] == 0)
 80088ee:	4b5b      	ldr	r3, [pc, #364]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10e      	bne.n	8008914 <to_cell_1_1_BOX+0x16c>
                    {
                        R90();
 80088f6:	f7ff fd14 	bl	8008322 <R90>
                        whl_to_box_scan();
 80088fa:	f7ff fd61 	bl	80083c0 <whl_to_box_scan>
                        boxPlace();
 80088fe:	f7ff fcf9 	bl	80082f4 <boxPlace>
                        grid[0][2] = 1;
 8008902:	4b56      	ldr	r3, [pc, #344]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 8008904:	2201      	movs	r2, #1
 8008906:	609a      	str	r2, [r3, #8]
                        whl_to_box_scan_Reverse();
 8008908:	f7ff fd6d 	bl	80083e6 <whl_to_box_scan_Reverse>
                        R90();
 800890c:	f7ff fd09 	bl	8008322 <R90>
                        whl_to_whl();
 8008910:	f7ff fd8f 	bl	8008432 <whl_to_whl>
                    }
                    if (red_array[1][0] == 1)
 8008914:	4b52      	ldr	r3, [pc, #328]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d10d      	bne.n	8008938 <to_cell_1_1_BOX+0x190>
                    {
                        R90();
 800891c:	f7ff fd01 	bl	8008322 <R90>
                        whl_to_box_scan();
 8008920:	f7ff fd4e 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008924:	f7ff fcda 	bl	80082dc <boxPick>
                        red_picked = 1;
 8008928:	4b4e      	ldr	r3, [pc, #312]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 800892e:	f7ff fd5a 	bl	80083e6 <whl_to_box_scan_Reverse>
                        R90();
 8008932:	f7ff fcf6 	bl	8008322 <R90>
 8008936:	e07c      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                    }
                    else if (red_array[1][2] == 1)
 8008938:	4b49      	ldr	r3, [pc, #292]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d10d      	bne.n	800895c <to_cell_1_1_BOX+0x1b4>
                    {
                        L90();
 8008940:	f7ff fce4 	bl	800830c <L90>
                        whl_to_box_scan();
 8008944:	f7ff fd3c 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008948:	f7ff fcc8 	bl	80082dc <boxPick>
                        red_picked = 1;
 800894c:	4b45      	ldr	r3, [pc, #276]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 800894e:	2201      	movs	r2, #1
 8008950:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 8008952:	f7ff fd48 	bl	80083e6 <whl_to_box_scan_Reverse>
                        L90();
 8008956:	f7ff fcd9 	bl	800830c <L90>
 800895a:	e06a      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                    }
                    else
                    {
                        goto_2_ROW = 1;
 800895c:	4b42      	ldr	r3, [pc, #264]	@ (8008a68 <to_cell_1_1_BOX+0x2c0>)
 800895e:	2201      	movs	r2, #1
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	e066      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                    }
                }
            }
            else
            {
                whl_to_box_scan();
 8008964:	f7ff fd2c 	bl	80083c0 <whl_to_box_scan>
                boxPlace();
 8008968:	f7ff fcc4 	bl	80082f4 <boxPlace>
                grid[1][2] = 1;
 800896c:	4b3b      	ldr	r3, [pc, #236]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 800896e:	2201      	movs	r2, #1
 8008970:	615a      	str	r2, [r3, #20]
                whl_to_box_scan_Reverse();
 8008972:	f7ff fd38 	bl	80083e6 <whl_to_box_scan_Reverse>
                R90();
 8008976:	f7ff fcd4 	bl	8008322 <R90>
                if (red_array[1][0] == 1)
 800897a:	4b39      	ldr	r3, [pc, #228]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d10d      	bne.n	800899e <to_cell_1_1_BOX+0x1f6>
                {
                    R90();
 8008982:	f7ff fcce 	bl	8008322 <R90>
                    whl_to_box_scan();
 8008986:	f7ff fd1b 	bl	80083c0 <whl_to_box_scan>
                    boxPick();
 800898a:	f7ff fca7 	bl	80082dc <boxPick>
                    red_picked = 1;
 800898e:	4b35      	ldr	r3, [pc, #212]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 8008990:	2201      	movs	r2, #1
 8008992:	601a      	str	r2, [r3, #0]
                    whl_to_box_scan_Reverse();
 8008994:	f7ff fd27 	bl	80083e6 <whl_to_box_scan_Reverse>
                    R90();
 8008998:	f7ff fcc3 	bl	8008322 <R90>
 800899c:	e049      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                }
                else
                {
                    goto_2_ROW = 1;
 800899e:	4b32      	ldr	r3, [pc, #200]	@ (8008a68 <to_cell_1_1_BOX+0x2c0>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	e045      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                }
            }
        }
        else
        {
            whl_to_box_scan();
 80089a6:	f7ff fd0b 	bl	80083c0 <whl_to_box_scan>
            boxPlace();
 80089aa:	f7ff fca3 	bl	80082f4 <boxPlace>
            grid[1][0] = 1;
 80089ae:	4b2b      	ldr	r3, [pc, #172]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80089b0:	2201      	movs	r2, #1
 80089b2:	60da      	str	r2, [r3, #12]
            whl_to_box_scan_Reverse();
 80089b4:	f7ff fd17 	bl	80083e6 <whl_to_box_scan_Reverse>
            L180();
 80089b8:	f7ff fcbe 	bl	8008338 <L180>
            box_detect(1, 1, 2);
 80089bc:	2202      	movs	r2, #2
 80089be:	2101      	movs	r1, #1
 80089c0:	2001      	movs	r0, #1
 80089c2:	f7ff fc0d 	bl	80081e0 <box_detect>
            if (grid[1][2] == 1)
 80089c6:	4b25      	ldr	r3, [pc, #148]	@ (8008a5c <to_cell_1_1_BOX+0x2b4>)
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d120      	bne.n	8008a10 <to_cell_1_1_BOX+0x268>
            {
                whl_to_box_scan();
 80089ce:	f7ff fcf7 	bl	80083c0 <whl_to_box_scan>
                colorScan();
 80089d2:	f7ff fc67 	bl	80082a4 <colorScan>
                if (boxColor == COLOR_BLUE)
 80089d6:	4b20      	ldr	r3, [pc, #128]	@ (8008a58 <to_cell_1_1_BOX+0x2b0>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b05      	cmp	r3, #5
 80089dc:	d109      	bne.n	80089f2 <to_cell_1_1_BOX+0x24a>
                {
                    BLUE();
 80089de:	f7fd fb65 	bl	80060ac <BLUE>
                    whl_to_box_scan_Reverse();
 80089e2:	f7ff fd00 	bl	80083e6 <whl_to_box_scan_Reverse>
                    R90();
 80089e6:	f7ff fc9c 	bl	8008322 <R90>
                    goto_2_ROW = 1;
 80089ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008a68 <to_cell_1_1_BOX+0x2c0>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	e01f      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                }
                else
                {
                    RED();
 80089f2:	f7fd fb1b 	bl	800602c <RED>
                    boxPick();
 80089f6:	f7ff fc71 	bl	80082dc <boxPick>
                    red_picked = 1;
 80089fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
                    red_array[1][2] = 1;
 8008a00:	4b17      	ldr	r3, [pc, #92]	@ (8008a60 <to_cell_1_1_BOX+0x2b8>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	615a      	str	r2, [r3, #20]
                    whl_to_box_scan_Reverse();
 8008a06:	f7ff fcee 	bl	80083e6 <whl_to_box_scan_Reverse>
                    L90();
 8008a0a:	f7ff fc7f 	bl	800830c <L90>
 8008a0e:	e010      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                }
            }
            else
            {
                R90();
 8008a10:	f7ff fc87 	bl	8008322 <R90>
                goto_2_ROW = 1;
 8008a14:	4b14      	ldr	r3, [pc, #80]	@ (8008a68 <to_cell_1_1_BOX+0x2c0>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e00a      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
            }
        }
    }
    else
    {
        RED();
 8008a1c:	f7fd fb06 	bl	800602c <RED>
        red_picked = 1;
 8008a20:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
        boxPick();
 8008a26:	f7ff fc59 	bl	80082dc <boxPick>
        L180();
 8008a2a:	f7ff fc85 	bl	8008338 <L180>
 8008a2e:	e000      	b.n	8008a32 <to_cell_1_1_BOX+0x28a>
                    if (red_array[1][0] == 1)
 8008a30:	bf00      	nop
    }
    if (red_picked == 1)
 8008a32:	4b0c      	ldr	r3, [pc, #48]	@ (8008a64 <to_cell_1_1_BOX+0x2bc>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d103      	bne.n	8008a42 <to_cell_1_1_BOX+0x29a>
    {
        currentTask4SubState = FinishToline;
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a6c <to_cell_1_1_BOX+0x2c4>)
 8008a3c:	220a      	movs	r2, #10
 8008a3e:	701a      	strb	r2, [r3, #0]
    else if (goto_2_ROW == 1)
    {
        resetEncoders();
        currentTask4SubState = STATE_2_ROW;
    }
}
 8008a40:	e008      	b.n	8008a54 <to_cell_1_1_BOX+0x2ac>
    else if (goto_2_ROW == 1)
 8008a42:	4b09      	ldr	r3, [pc, #36]	@ (8008a68 <to_cell_1_1_BOX+0x2c0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d104      	bne.n	8008a54 <to_cell_1_1_BOX+0x2ac>
        resetEncoders();
 8008a4a:	f7fc f99d 	bl	8004d88 <resetEncoders>
        currentTask4SubState = STATE_2_ROW;
 8008a4e:	4b07      	ldr	r3, [pc, #28]	@ (8008a6c <to_cell_1_1_BOX+0x2c4>)
 8008a50:	2203      	movs	r2, #3
 8008a52:	701a      	strb	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	200005c9 	.word	0x200005c9
 8008a5c:	2000052c 	.word	0x2000052c
 8008a60:	20000574 	.word	0x20000574
 8008a64:	2000059c 	.word	0x2000059c
 8008a68:	200005a8 	.word	0x200005a8
 8008a6c:	200005ac 	.word	0x200005ac

08008a70 <to_cell_2_1_noBOX>:
void to_cell_2_1_noBOX()
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
    whl_to_box_scan();
 8008a74:	f7ff fca4 	bl	80083c0 <whl_to_box_scan>
    L180();
 8008a78:	f7ff fc5e 	bl	8008338 <L180>
    ontoCell_2_1();
 8008a7c:	f7ff fcec 	bl	8008458 <ontoCell_2_1>
    L90();
 8008a80:	f7ff fc44 	bl	800830c <L90>
    box_detect(1, 2, 0);
 8008a84:	2200      	movs	r2, #0
 8008a86:	2102      	movs	r1, #2
 8008a88:	2001      	movs	r0, #1
 8008a8a:	f7ff fba9 	bl	80081e0 <box_detect>
    if (grid[2][0] == 1)
 8008a8e:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <to_cell_2_1_noBOX+0xbc>)
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d127      	bne.n	8008ae6 <to_cell_2_1_noBOX+0x76>
    {
        whl_to_box_scan();
 8008a96:	f7ff fc93 	bl	80083c0 <whl_to_box_scan>
        colorScan();
 8008a9a:	f7ff fc03 	bl	80082a4 <colorScan>
        if (boxColor == COLOR_BLUE)
 8008a9e:	4b24      	ldr	r3, [pc, #144]	@ (8008b30 <to_cell_2_1_noBOX+0xc0>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d113      	bne.n	8008ace <to_cell_2_1_noBOX+0x5e>
        {
            /*if bot on 2nd row and no
            box on 2,1 and blue box on 2,0 red box
            is defenitely on 2,2*/
            BLUE();
 8008aa6:	f7fd fb01 	bl	80060ac <BLUE>
            whl_to_box_scan_Reverse();
 8008aaa:	f7ff fc9c 	bl	80083e6 <whl_to_box_scan_Reverse>
            R90();
 8008aae:	f7ff fc38 	bl	8008322 <R90>
            R90();
 8008ab2:	f7ff fc36 	bl	8008322 <R90>
            whl_to_box_scan();
 8008ab6:	f7ff fc83 	bl	80083c0 <whl_to_box_scan>
            boxPick();
 8008aba:	f7ff fc0f 	bl	80082dc <boxPick>
            red_picked = 1;
 8008abe:	4b1d      	ldr	r3, [pc, #116]	@ (8008b34 <to_cell_2_1_noBOX+0xc4>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
            whl_to_box_scan_Reverse();
 8008ac4:	f7ff fc8f 	bl	80083e6 <whl_to_box_scan_Reverse>
            L90();
 8008ac8:	f7ff fc20 	bl	800830c <L90>
 8008acc:	e025      	b.n	8008b1a <to_cell_2_1_noBOX+0xaa>
        }
        else
        {
            RED();
 8008ace:	f7fd faad 	bl	800602c <RED>
            boxPick();
 8008ad2:	f7ff fc03 	bl	80082dc <boxPick>
            red_picked = 1;
 8008ad6:	4b17      	ldr	r3, [pc, #92]	@ (8008b34 <to_cell_2_1_noBOX+0xc4>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
            whl_to_box_scan_Reverse();
 8008adc:	f7ff fc83 	bl	80083e6 <whl_to_box_scan_Reverse>
            R90();
 8008ae0:	f7ff fc1f 	bl	8008322 <R90>
 8008ae4:	e019      	b.n	8008b1a <to_cell_2_1_noBOX+0xaa>
    else
    {
        /*if bot on 2nd row and no
        box on 2,1 and no box on 2,0 red box
        is defenitely on2,2*/
        R90();
 8008ae6:	f7ff fc1c 	bl	8008322 <R90>
        R90();
 8008aea:	f7ff fc1a 	bl	8008322 <R90>
        whl_to_box_scan();
 8008aee:	f7ff fc67 	bl	80083c0 <whl_to_box_scan>
        colorScan();
 8008af2:	f7ff fbd7 	bl	80082a4 <colorScan>
        if (boxColor == COLOR_BLUE)
 8008af6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b30 <to_cell_2_1_noBOX+0xc0>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b05      	cmp	r3, #5
 8008afc:	d102      	bne.n	8008b04 <to_cell_2_1_noBOX+0x94>
        {
            BLUE();
 8008afe:	f7fd fad5 	bl	80060ac <BLUE>
 8008b02:	e001      	b.n	8008b08 <to_cell_2_1_noBOX+0x98>
        }
        else
        {
            RED();
 8008b04:	f7fd fa92 	bl	800602c <RED>
        }
        boxPick();
 8008b08:	f7ff fbe8 	bl	80082dc <boxPick>
        red_picked = 1;
 8008b0c:	4b09      	ldr	r3, [pc, #36]	@ (8008b34 <to_cell_2_1_noBOX+0xc4>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
        whl_to_box_scan_Reverse();
 8008b12:	f7ff fc68 	bl	80083e6 <whl_to_box_scan_Reverse>
        L90();
 8008b16:	f7ff fbf9 	bl	800830c <L90>
    }
    if (red_picked == 1)
 8008b1a:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <to_cell_2_1_noBOX+0xc4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d102      	bne.n	8008b28 <to_cell_2_1_noBOX+0xb8>
    {
        currentTask4SubState = FinishToline;
 8008b22:	4b05      	ldr	r3, [pc, #20]	@ (8008b38 <to_cell_2_1_noBOX+0xc8>)
 8008b24:	220a      	movs	r2, #10
 8008b26:	701a      	strb	r2, [r3, #0]
    }
}
 8008b28:	bf00      	nop
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	2000052c 	.word	0x2000052c
 8008b30:	200005c9 	.word	0x200005c9
 8008b34:	2000059c 	.word	0x2000059c
 8008b38:	200005ac 	.word	0x200005ac

08008b3c <to_cell_2_1_BOX>:
void to_cell_2_1_BOX()
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
    whl_to_box_scan();
 8008b40:	f7ff fc3e 	bl	80083c0 <whl_to_box_scan>
    colorScan();
 8008b44:	f7ff fbae 	bl	80082a4 <colorScan>
    boxPick();
 8008b48:	f7ff fbc8 	bl	80082dc <boxPick>
    grid[2][1] = 0;
 8008b4c:	4bc1      	ldr	r3, [pc, #772]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	61da      	str	r2, [r3, #28]
    L180();
 8008b52:	f7ff fbf1 	bl	8008338 <L180>
    if (boxColor == COLOR_RED)
 8008b56:	4bc0      	ldr	r3, [pc, #768]	@ (8008e58 <to_cell_2_1_BOX+0x31c>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d108      	bne.n	8008b70 <to_cell_2_1_BOX+0x34>
    {
        RED();
 8008b5e:	f7fd fa65 	bl	800602c <RED>
        red_array[2][1] = 1;
 8008b62:	4bbe      	ldr	r3, [pc, #760]	@ (8008e5c <to_cell_2_1_BOX+0x320>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	61da      	str	r2, [r3, #28]
        red_picked = 1;
 8008b68:	4bbd      	ldr	r3, [pc, #756]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	e1b4      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
    }
    else
    { // Blue box on hand
        ontoCell_2_1();
 8008b70:	f7ff fc72 	bl	8008458 <ontoCell_2_1>
        L90();
 8008b74:	f7ff fbca 	bl	800830c <L90>
        box_detect(1, 2, 0);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2102      	movs	r1, #2
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f7ff fb2f 	bl	80081e0 <box_detect>
        if (grid[2][0] == 1)
 8008b82:	4bb4      	ldr	r3, [pc, #720]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	f040 818f 	bne.w	8008eaa <to_cell_2_1_BOX+0x36e>
        {
            whl_to_box_scan();
 8008b8c:	f7ff fc18 	bl	80083c0 <whl_to_box_scan>
            colorScan();
 8008b90:	f7ff fb88 	bl	80082a4 <colorScan>
            if (boxColor == COLOR_BLUE)
 8008b94:	4bb0      	ldr	r3, [pc, #704]	@ (8008e58 <to_cell_2_1_BOX+0x31c>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b05      	cmp	r3, #5
 8008b9a:	f040 80ae 	bne.w	8008cfa <to_cell_2_1_BOX+0x1be>
            {
                /*if blue box on 2,0 then
                RED box definitely on 2,2*/
                BLUE();
 8008b9e:	f7fd fa85 	bl	80060ac <BLUE>
                whl_to_box_scan_Reverse();
 8008ba2:	f7ff fc20 	bl	80083e6 <whl_to_box_scan_Reverse>
                red_array[2][2] = 1;
 8008ba6:	4bad      	ldr	r3, [pc, #692]	@ (8008e5c <to_cell_2_1_BOX+0x320>)
 8008ba8:	2201      	movs	r2, #1
 8008baa:	621a      	str	r2, [r3, #32]
                grid[2][2] = 1;
 8008bac:	4ba9      	ldr	r3, [pc, #676]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	621a      	str	r2, [r3, #32]
                R90();
 8008bb2:	f7ff fbb6 	bl	8008322 <R90>
                whl_to_whl();
 8008bb6:	f7ff fc3c 	bl	8008432 <whl_to_whl>
                if (grid[1][0] == 0)
 8008bba:	4ba6      	ldr	r3, [pc, #664]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d120      	bne.n	8008c04 <to_cell_2_1_BOX+0xc8>
                {
                    L90();
 8008bc2:	f7ff fba3 	bl	800830c <L90>
                    whl_to_box_scan();
 8008bc6:	f7ff fbfb 	bl	80083c0 <whl_to_box_scan>
                    boxPlace();
 8008bca:	f7ff fb93 	bl	80082f4 <boxPlace>
                    grid[1][0] = 1;
 8008bce:	4ba1      	ldr	r3, [pc, #644]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	60da      	str	r2, [r3, #12]
                    whl_to_box_scan_Reverse();
 8008bd4:	f7ff fc07 	bl	80083e6 <whl_to_box_scan_Reverse>
                    L90();
 8008bd8:	f7ff fb98 	bl	800830c <L90>
                    whl_to_box_scan();
 8008bdc:	f7ff fbf0 	bl	80083c0 <whl_to_box_scan>
                    L180();
 8008be0:	f7ff fbaa 	bl	8008338 <L180>
                    ontoCell_2_1();
 8008be4:	f7ff fc38 	bl	8008458 <ontoCell_2_1>
                    R90();
 8008be8:	f7ff fb9b 	bl	8008322 <R90>
                    whl_to_box_scan();
 8008bec:	f7ff fbe8 	bl	80083c0 <whl_to_box_scan>
                    boxPick();
 8008bf0:	f7ff fb74 	bl	80082dc <boxPick>
                    red_picked = 1;
 8008bf4:	4b9a      	ldr	r3, [pc, #616]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]
                    whl_to_box_scan_Reverse();
 8008bfa:	f7ff fbf4 	bl	80083e6 <whl_to_box_scan_Reverse>
                    L90();
 8008bfe:	f7ff fb85 	bl	800830c <L90>
 8008c02:	e16a      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                }
                else if (grid[1][2] == 0)
 8008c04:	4b93      	ldr	r3, [pc, #588]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d120      	bne.n	8008c4e <to_cell_2_1_BOX+0x112>
                {
                    R90();
 8008c0c:	f7ff fb89 	bl	8008322 <R90>
                    whl_to_box_scan();
 8008c10:	f7ff fbd6 	bl	80083c0 <whl_to_box_scan>
                    boxPlace();
 8008c14:	f7ff fb6e 	bl	80082f4 <boxPlace>
                    grid[1][2] = 1;
 8008c18:	4b8e      	ldr	r3, [pc, #568]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	615a      	str	r2, [r3, #20]
                    whl_to_box_scan_Reverse();
 8008c1e:	f7ff fbe2 	bl	80083e6 <whl_to_box_scan_Reverse>
                    R90();
 8008c22:	f7ff fb7e 	bl	8008322 <R90>
                    whl_to_box_scan();
 8008c26:	f7ff fbcb 	bl	80083c0 <whl_to_box_scan>
                    L180();
 8008c2a:	f7ff fb85 	bl	8008338 <L180>
                    ontoCell_2_1();
 8008c2e:	f7ff fc13 	bl	8008458 <ontoCell_2_1>
                    R90();
 8008c32:	f7ff fb76 	bl	8008322 <R90>
                    whl_to_box_scan();
 8008c36:	f7ff fbc3 	bl	80083c0 <whl_to_box_scan>
                    boxPick();
 8008c3a:	f7ff fb4f 	bl	80082dc <boxPick>
                    red_picked = 1;
 8008c3e:	4b88      	ldr	r3, [pc, #544]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
                    whl_to_box_scan_Reverse();
 8008c44:	f7ff fbcf 	bl	80083e6 <whl_to_box_scan_Reverse>
                    L90();
 8008c48:	f7ff fb60 	bl	800830c <L90>
 8008c4c:	e145      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                }
                else if (grid[1][2] == 1 && grid[1][0] == 1)
 8008c4e:	4b81      	ldr	r3, [pc, #516]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	f040 8141 	bne.w	8008eda <to_cell_2_1_BOX+0x39e>
 8008c58:	4b7e      	ldr	r3, [pc, #504]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	f040 813c 	bne.w	8008eda <to_cell_2_1_BOX+0x39e>
                {
                    whl_to_whl();
 8008c62:	f7ff fbe6 	bl	8008432 <whl_to_whl>
                    if (grid[0][0] == 0)
 8008c66:	4b7b      	ldr	r3, [pc, #492]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d122      	bne.n	8008cb4 <to_cell_2_1_BOX+0x178>
                    {
                        L90();
 8008c6e:	f7ff fb4d 	bl	800830c <L90>
                        whl_to_box_scan();
 8008c72:	f7ff fba5 	bl	80083c0 <whl_to_box_scan>
                        boxPlace();
 8008c76:	f7ff fb3d 	bl	80082f4 <boxPlace>
                        grid[0][0] = 1;
 8008c7a:	4b76      	ldr	r3, [pc, #472]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 8008c80:	f7ff fbb1 	bl	80083e6 <whl_to_box_scan_Reverse>
                        L90();
 8008c84:	f7ff fb42 	bl	800830c <L90>
                        whl_to_whl();
 8008c88:	f7ff fbd3 	bl	8008432 <whl_to_whl>
                        whl_to_box_scan();
 8008c8c:	f7ff fb98 	bl	80083c0 <whl_to_box_scan>
                        L180();
 8008c90:	f7ff fb52 	bl	8008338 <L180>
                        ontoCell_2_1();
 8008c94:	f7ff fbe0 	bl	8008458 <ontoCell_2_1>
                        R90();
 8008c98:	f7ff fb43 	bl	8008322 <R90>
                        whl_to_box_scan();
 8008c9c:	f7ff fb90 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008ca0:	f7ff fb1c 	bl	80082dc <boxPick>
                        red_picked = 1;
 8008ca4:	4b6e      	ldr	r3, [pc, #440]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 8008caa:	f7ff fb9c 	bl	80083e6 <whl_to_box_scan_Reverse>
                        L90();
 8008cae:	f7ff fb2d 	bl	800830c <L90>
 8008cb2:	e112      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                    }
                    else
                    {
                        R90();
 8008cb4:	f7ff fb35 	bl	8008322 <R90>
                        whl_to_box_scan();
 8008cb8:	f7ff fb82 	bl	80083c0 <whl_to_box_scan>
                        boxPlace();
 8008cbc:	f7ff fb1a 	bl	80082f4 <boxPlace>
                        grid[0][2] = 1;
 8008cc0:	4b64      	ldr	r3, [pc, #400]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	609a      	str	r2, [r3, #8]
                        whl_to_box_scan_Reverse();
 8008cc6:	f7ff fb8e 	bl	80083e6 <whl_to_box_scan_Reverse>
                        R90();
 8008cca:	f7ff fb2a 	bl	8008322 <R90>
                        whl_to_whl();
 8008cce:	f7ff fbb0 	bl	8008432 <whl_to_whl>
                        whl_to_box_scan();
 8008cd2:	f7ff fb75 	bl	80083c0 <whl_to_box_scan>
                        L180();
 8008cd6:	f7ff fb2f 	bl	8008338 <L180>
                        ontoCell_2_1();
 8008cda:	f7ff fbbd 	bl	8008458 <ontoCell_2_1>
                        R90();
 8008cde:	f7ff fb20 	bl	8008322 <R90>
                        whl_to_box_scan();
 8008ce2:	f7ff fb6d 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008ce6:	f7ff faf9 	bl	80082dc <boxPick>
                        red_picked = 1;
 8008cea:	4b5d      	ldr	r3, [pc, #372]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008cec:	2201      	movs	r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 8008cf0:	f7ff fb79 	bl	80083e6 <whl_to_box_scan_Reverse>
                        L90();
 8008cf4:	f7ff fb0a 	bl	800830c <L90>
 8008cf8:	e0ef      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                    }
                }
            }
            else
            {
                RED();
 8008cfa:	f7fd f997 	bl	800602c <RED>
                red_array[2][0] = 1;
 8008cfe:	4b57      	ldr	r3, [pc, #348]	@ (8008e5c <to_cell_2_1_BOX+0x320>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	619a      	str	r2, [r3, #24]
                whl_to_box_scan_Reverse();
 8008d04:	f7ff fb6f 	bl	80083e6 <whl_to_box_scan_Reverse>
                grid[2][0] = 1;
 8008d08:	4b52      	ldr	r3, [pc, #328]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	619a      	str	r2, [r3, #24]
                R90();
 8008d0e:	f7ff fb08 	bl	8008322 <R90>
                R90();
 8008d12:	f7ff fb06 	bl	8008322 <R90>
                box_detect(1, 2, 2);
 8008d16:	2202      	movs	r2, #2
 8008d18:	2102      	movs	r1, #2
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	f7ff fa60 	bl	80081e0 <box_detect>
                if (grid[2][2] == 0)
 8008d20:	4b4c      	ldr	r3, [pc, #304]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d116      	bne.n	8008d56 <to_cell_2_1_BOX+0x21a>
                {
                    whl_to_box_scan();
 8008d28:	f7ff fb4a 	bl	80083c0 <whl_to_box_scan>
                    boxPlace();
 8008d2c:	f7ff fae2 	bl	80082f4 <boxPlace>
                    grid[2][2] = 1;
 8008d30:	4b48      	ldr	r3, [pc, #288]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	621a      	str	r2, [r3, #32]
                    whl_to_box_scan_Reverse();
 8008d36:	f7ff fb56 	bl	80083e6 <whl_to_box_scan_Reverse>
                    L180();
 8008d3a:	f7ff fafd 	bl	8008338 <L180>
                    whl_to_box_scan();
 8008d3e:	f7ff fb3f 	bl	80083c0 <whl_to_box_scan>
                    boxPick();
 8008d42:	f7ff facb 	bl	80082dc <boxPick>
                    red_picked = 1;
 8008d46:	4b46      	ldr	r3, [pc, #280]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]
                    whl_to_box_scan_Reverse();
 8008d4c:	f7ff fb4b 	bl	80083e6 <whl_to_box_scan_Reverse>
                    R90();
 8008d50:	f7ff fae7 	bl	8008322 <R90>
 8008d54:	e0c1      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                }
                else
                {
                    /*Now the grid[2][2] == 1 cant place the
                    picked box on 3rd ROW*/
                    L90();
 8008d56:	f7ff fad9 	bl	800830c <L90>
                    whl_to_whl();
 8008d5a:	f7ff fb6a 	bl	8008432 <whl_to_whl>
                    if (grid[1][0] == 0)
 8008d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d120      	bne.n	8008da8 <to_cell_2_1_BOX+0x26c>
                    {
                        L90();
 8008d66:	f7ff fad1 	bl	800830c <L90>
                        whl_to_box_scan();
 8008d6a:	f7ff fb29 	bl	80083c0 <whl_to_box_scan>
                        boxPlace();
 8008d6e:	f7ff fac1 	bl	80082f4 <boxPlace>
                        grid[1][0] = 1;
 8008d72:	4b38      	ldr	r3, [pc, #224]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008d74:	2201      	movs	r2, #1
 8008d76:	60da      	str	r2, [r3, #12]
                        whl_to_box_scan_Reverse();
 8008d78:	f7ff fb35 	bl	80083e6 <whl_to_box_scan_Reverse>
                        L90();
 8008d7c:	f7ff fac6 	bl	800830c <L90>
                        whl_to_box_scan();
 8008d80:	f7ff fb1e 	bl	80083c0 <whl_to_box_scan>
                        L180();
 8008d84:	f7ff fad8 	bl	8008338 <L180>
                        ontoCell_2_1();
 8008d88:	f7ff fb66 	bl	8008458 <ontoCell_2_1>
                        L90();
 8008d8c:	f7ff fabe 	bl	800830c <L90>
                        whl_to_box_scan();
 8008d90:	f7ff fb16 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008d94:	f7ff faa2 	bl	80082dc <boxPick>
                        red_picked = 1;
 8008d98:	4b31      	ldr	r3, [pc, #196]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 8008d9e:	f7ff fb22 	bl	80083e6 <whl_to_box_scan_Reverse>
                        R90();
 8008da2:	f7ff fabe 	bl	8008322 <R90>
 8008da6:	e098      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                    }
                    else if (grid[1][2] == 0)
 8008da8:	4b2a      	ldr	r3, [pc, #168]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d120      	bne.n	8008df2 <to_cell_2_1_BOX+0x2b6>
                    {
                        R90();
 8008db0:	f7ff fab7 	bl	8008322 <R90>
                        whl_to_box_scan();
 8008db4:	f7ff fb04 	bl	80083c0 <whl_to_box_scan>
                        boxPlace();
 8008db8:	f7ff fa9c 	bl	80082f4 <boxPlace>
                        grid[1][2] = 1;
 8008dbc:	4b25      	ldr	r3, [pc, #148]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	615a      	str	r2, [r3, #20]
                        whl_to_box_scan_Reverse();
 8008dc2:	f7ff fb10 	bl	80083e6 <whl_to_box_scan_Reverse>
                        R90();
 8008dc6:	f7ff faac 	bl	8008322 <R90>
                        whl_to_box_scan();
 8008dca:	f7ff faf9 	bl	80083c0 <whl_to_box_scan>
                        L180();
 8008dce:	f7ff fab3 	bl	8008338 <L180>
                        ontoCell_2_1();
 8008dd2:	f7ff fb41 	bl	8008458 <ontoCell_2_1>
                        L90();
 8008dd6:	f7ff fa99 	bl	800830c <L90>
                        whl_to_box_scan();
 8008dda:	f7ff faf1 	bl	80083c0 <whl_to_box_scan>
                        boxPick();
 8008dde:	f7ff fa7d 	bl	80082dc <boxPick>
                        red_picked = 1;
 8008de2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
                        whl_to_box_scan_Reverse();
 8008de8:	f7ff fafd 	bl	80083e6 <whl_to_box_scan_Reverse>
                        R90();
 8008dec:	f7ff fa99 	bl	8008322 <R90>
 8008df0:	e073      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                    }
                    else if (grid[1][2] == 1 && grid[1][0] == 1)
 8008df2:	4b18      	ldr	r3, [pc, #96]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d16f      	bne.n	8008eda <to_cell_2_1_BOX+0x39e>
 8008dfa:	4b16      	ldr	r3, [pc, #88]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d16b      	bne.n	8008eda <to_cell_2_1_BOX+0x39e>
                    {
                        whl_to_whl();
 8008e02:	f7ff fb16 	bl	8008432 <whl_to_whl>
                        if (grid[0][0] == 0)
 8008e06:	4b13      	ldr	r3, [pc, #76]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d12a      	bne.n	8008e64 <to_cell_2_1_BOX+0x328>
                        {
                            L90();
 8008e0e:	f7ff fa7d 	bl	800830c <L90>
                            whl_to_box_scan();
 8008e12:	f7ff fad5 	bl	80083c0 <whl_to_box_scan>
                            boxPlace();
 8008e16:	f7ff fa6d 	bl	80082f4 <boxPlace>
                            grid[0][0] = 1;
 8008e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e54 <to_cell_2_1_BOX+0x318>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
                            whl_to_box_scan_Reverse();
 8008e20:	f7ff fae1 	bl	80083e6 <whl_to_box_scan_Reverse>
                            L90();
 8008e24:	f7ff fa72 	bl	800830c <L90>
                            whl_to_whl();
 8008e28:	f7ff fb03 	bl	8008432 <whl_to_whl>
                            whl_to_box_scan();
 8008e2c:	f7ff fac8 	bl	80083c0 <whl_to_box_scan>
                            L180();
 8008e30:	f7ff fa82 	bl	8008338 <L180>
                            ontoCell_2_1();
 8008e34:	f7ff fb10 	bl	8008458 <ontoCell_2_1>
                            L90();
 8008e38:	f7ff fa68 	bl	800830c <L90>
                            whl_to_box_scan();
 8008e3c:	f7ff fac0 	bl	80083c0 <whl_to_box_scan>
                            boxPick();
 8008e40:	f7ff fa4c 	bl	80082dc <boxPick>
                            red_picked = 1;
 8008e44:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <to_cell_2_1_BOX+0x324>)
 8008e46:	2201      	movs	r2, #1
 8008e48:	601a      	str	r2, [r3, #0]
                            whl_to_box_scan_Reverse();
 8008e4a:	f7ff facc 	bl	80083e6 <whl_to_box_scan_Reverse>
                            R90();
 8008e4e:	f7ff fa68 	bl	8008322 <R90>
 8008e52:	e042      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
 8008e54:	2000052c 	.word	0x2000052c
 8008e58:	200005c9 	.word	0x200005c9
 8008e5c:	20000574 	.word	0x20000574
 8008e60:	2000059c 	.word	0x2000059c
                        }
                        else
                        {
                            R90();
 8008e64:	f7ff fa5d 	bl	8008322 <R90>
                            whl_to_box_scan();
 8008e68:	f7ff faaa 	bl	80083c0 <whl_to_box_scan>
                            boxPlace();
 8008e6c:	f7ff fa42 	bl	80082f4 <boxPlace>
                            grid[0][2] = 1;
 8008e70:	4b1e      	ldr	r3, [pc, #120]	@ (8008eec <to_cell_2_1_BOX+0x3b0>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	609a      	str	r2, [r3, #8]
                            whl_to_box_scan_Reverse();
 8008e76:	f7ff fab6 	bl	80083e6 <whl_to_box_scan_Reverse>
                            R90();
 8008e7a:	f7ff fa52 	bl	8008322 <R90>
                            whl_to_whl();
 8008e7e:	f7ff fad8 	bl	8008432 <whl_to_whl>
                            whl_to_box_scan();
 8008e82:	f7ff fa9d 	bl	80083c0 <whl_to_box_scan>
                            L180();
 8008e86:	f7ff fa57 	bl	8008338 <L180>
                            ontoCell_2_1();
 8008e8a:	f7ff fae5 	bl	8008458 <ontoCell_2_1>
                            L90();
 8008e8e:	f7ff fa3d 	bl	800830c <L90>
                            whl_to_box_scan();
 8008e92:	f7ff fa95 	bl	80083c0 <whl_to_box_scan>
                            boxPick();
 8008e96:	f7ff fa21 	bl	80082dc <boxPick>
                            red_picked = 1;
 8008e9a:	4b15      	ldr	r3, [pc, #84]	@ (8008ef0 <to_cell_2_1_BOX+0x3b4>)
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
                            whl_to_box_scan_Reverse();
 8008ea0:	f7ff faa1 	bl	80083e6 <whl_to_box_scan_Reverse>
                            R90();
 8008ea4:	f7ff fa3d 	bl	8008322 <R90>
 8008ea8:	e017      	b.n	8008eda <to_cell_2_1_BOX+0x39e>
                }
            }
        }
        else
        {
            whl_to_box_scan();
 8008eaa:	f7ff fa89 	bl	80083c0 <whl_to_box_scan>
            boxPlace();
 8008eae:	f7ff fa21 	bl	80082f4 <boxPlace>
            grid[2][0] = 1;
 8008eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008eec <to_cell_2_1_BOX+0x3b0>)
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	619a      	str	r2, [r3, #24]
            whl_to_box_scan_Reverse();
 8008eb8:	f7ff fa95 	bl	80083e6 <whl_to_box_scan_Reverse>
            R90();
 8008ebc:	f7ff fa31 	bl	8008322 <R90>
            R90();
 8008ec0:	f7ff fa2f 	bl	8008322 <R90>
            whl_to_box_scan();
 8008ec4:	f7ff fa7c 	bl	80083c0 <whl_to_box_scan>
            boxPick();
 8008ec8:	f7ff fa08 	bl	80082dc <boxPick>
            red_picked = 1;
 8008ecc:	4b08      	ldr	r3, [pc, #32]	@ (8008ef0 <to_cell_2_1_BOX+0x3b4>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]
            whl_to_box_scan_Reverse();
 8008ed2:	f7ff fa88 	bl	80083e6 <whl_to_box_scan_Reverse>
            L90();
 8008ed6:	f7ff fa19 	bl	800830c <L90>
        }
    }
    if (red_picked == 1)
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <to_cell_2_1_BOX+0x3b4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d102      	bne.n	8008ee8 <to_cell_2_1_BOX+0x3ac>
    {
        currentTask4SubState = FinishToline;
 8008ee2:	4b04      	ldr	r3, [pc, #16]	@ (8008ef4 <to_cell_2_1_BOX+0x3b8>)
 8008ee4:	220a      	movs	r2, #10
 8008ee6:	701a      	strb	r2, [r3, #0]
    }
}
 8008ee8:	bf00      	nop
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000052c 	.word	0x2000052c
 8008ef0:	2000059c 	.word	0x2000059c
 8008ef4:	200005ac 	.word	0x200005ac

08008ef8 <task4StateHandler>:
///////////
void task4StateHandler()
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
    switch (currentTask4SubState)
 8008efc:	4b52      	ldr	r3, [pc, #328]	@ (8009048 <task4StateHandler+0x150>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b0a      	cmp	r3, #10
 8008f02:	f200 809f 	bhi.w	8009044 <task4StateHandler+0x14c>
 8008f06:	a201      	add	r2, pc, #4	@ (adr r2, 8008f0c <task4StateHandler+0x14>)
 8008f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0c:	08008f39 	.word	0x08008f39
 8008f10:	08008f6f 	.word	0x08008f6f
 8008f14:	08008fa7 	.word	0x08008fa7
 8008f18:	08008fc5 	.word	0x08008fc5
 8008f1c:	08009035 	.word	0x08009035
 8008f20:	08009045 	.word	0x08009045
 8008f24:	08009045 	.word	0x08009045
 8008f28:	08009045 	.word	0x08009045
 8008f2c:	08009045 	.word	0x08009045
 8008f30:	08008fef 	.word	0x08008fef
 8008f34:	08009023 	.word	0x08009023
    {
    case STATE_linefollow:
        display_TASK(4);
 8008f38:	2004      	movs	r0, #4
 8008f3a:	f7fc fecb 	bl	8005cd4 <display_TASK>
        while (IR[7] == 0)
 8008f3e:	e001      	b.n	8008f44 <task4StateHandler+0x4c>
        {
            line_follow_NoJunctions();
 8008f40:	f7f9 fe52 	bl	8002be8 <line_follow_NoJunctions>
        while (IR[7] == 0)
 8008f44:	4b41      	ldr	r3, [pc, #260]	@ (800904c <task4StateHandler+0x154>)
 8008f46:	79db      	ldrb	r3, [r3, #7]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f9      	beq.n	8008f40 <task4StateHandler+0x48>
        }
        resetEncoders();
 8008f4c:	f7fb ff1c 	bl	8004d88 <resetEncoders>
        enc_drive_decel(750, 80, 65);
 8008f50:	2241      	movs	r2, #65	@ 0x41
 8008f52:	2150      	movs	r1, #80	@ 0x50
 8008f54:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8008f58:	f7f8 fbd2 	bl	8001700 <enc_drive_decel>
        m_stopLR();
 8008f5c:	f7fc fc8e 	bl	800587c <m_stopLR>
        delay_ms(20);
 8008f60:	2014      	movs	r0, #20
 8008f62:	f7f8 fad5 	bl	8001510 <delay_ms>
        currentTask4SubState = STATE_0_ROW;
 8008f66:	4b38      	ldr	r3, [pc, #224]	@ (8009048 <task4StateHandler+0x150>)
 8008f68:	2201      	movs	r2, #1
 8008f6a:	701a      	strb	r2, [r3, #0]
        break;
 8008f6c:	e06a      	b.n	8009044 <task4StateHandler+0x14c>
    case STATE_0_ROW:
        box_detect_Custom(2, 0, 0, 200);
 8008f6e:	23c8      	movs	r3, #200	@ 0xc8
 8008f70:	2200      	movs	r2, #0
 8008f72:	2100      	movs	r1, #0
 8008f74:	2002      	movs	r0, #2
 8008f76:	f7ff f963 	bl	8008240 <box_detect_Custom>
        line_follow_to_target(1736, 80, 60);
 8008f7a:	223c      	movs	r2, #60	@ 0x3c
 8008f7c:	2150      	movs	r1, #80	@ 0x50
 8008f7e:	f44f 60d9 	mov.w	r0, #1736	@ 0x6c8
 8008f82:	f7f9 fb6d 	bl	8002660 <line_follow_to_target>
        box_detect_Custom(2, 0, 1, 200);
 8008f86:	23c8      	movs	r3, #200	@ 0xc8
 8008f88:	2201      	movs	r2, #1
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	2002      	movs	r0, #2
 8008f8e:	f7ff f957 	bl	8008240 <box_detect_Custom>

        if (grid[0][1] == 0)
 8008f92:	4b2f      	ldr	r3, [pc, #188]	@ (8009050 <task4StateHandler+0x158>)
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <task4StateHandler+0xa8>
        {
            to_cell_0_1();
 8008f9a:	f7ff fa71 	bl	8008480 <to_cell_0_1>
        }
        else
        {
            to_cell_0_0();
        }
        break;
 8008f9e:	e051      	b.n	8009044 <task4StateHandler+0x14c>
            to_cell_0_0();
 8008fa0:	f7ff faea 	bl	8008578 <to_cell_0_0>
        break;
 8008fa4:	e04e      	b.n	8009044 <task4StateHandler+0x14c>
    case STATE_1_ROW:
        box_detect(1, 1, 1);
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	2101      	movs	r1, #1
 8008faa:	2001      	movs	r0, #1
 8008fac:	f7ff f918 	bl	80081e0 <box_detect>
        if (grid[1][1] == 1)
 8008fb0:	4b27      	ldr	r3, [pc, #156]	@ (8009050 <task4StateHandler+0x158>)
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d102      	bne.n	8008fbe <task4StateHandler+0xc6>
        {
            to_cell_1_1_BOX();
 8008fb8:	f7ff fbf6 	bl	80087a8 <to_cell_1_1_BOX>
        }
        else
        {
            to_cell_1_1_noBOX();
        }
        break;
 8008fbc:	e042      	b.n	8009044 <task4StateHandler+0x14c>
            to_cell_1_1_noBOX();
 8008fbe:	f7ff fb79 	bl	80086b4 <to_cell_1_1_noBOX>
        break;
 8008fc2:	e03f      	b.n	8009044 <task4StateHandler+0x14c>
    case STATE_2_ROW:
        box_detect(1, 2, 1);
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	2001      	movs	r0, #1
 8008fca:	f7ff f909 	bl	80081e0 <box_detect>
        if (grid[2][1] == 1)
 8008fce:	4b20      	ldr	r3, [pc, #128]	@ (8009050 <task4StateHandler+0x158>)
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d105      	bne.n	8008fe2 <task4StateHandler+0xea>
        {
            imon10 = 1;
 8008fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8009054 <task4StateHandler+0x15c>)
 8008fd8:	2201      	movs	r2, #1
 8008fda:	601a      	str	r2, [r3, #0]
            to_cell_2_1_BOX();
 8008fdc:	f7ff fdae 	bl	8008b3c <to_cell_2_1_BOX>
        else
        {
            imon10 = 11;
            to_cell_2_1_noBOX();
        }
        break;
 8008fe0:	e030      	b.n	8009044 <task4StateHandler+0x14c>
            imon10 = 11;
 8008fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8009054 <task4StateHandler+0x15c>)
 8008fe4:	220b      	movs	r2, #11
 8008fe6:	601a      	str	r2, [r3, #0]
            to_cell_2_1_noBOX();
 8008fe8:	f7ff fd42 	bl	8008a70 <to_cell_2_1_noBOX>
        break;
 8008fec:	e02a      	b.n	8009044 <task4StateHandler+0x14c>
    case FinishTASK4:
        enc_drive2(130);
 8008fee:	2082      	movs	r0, #130	@ 0x82
 8008ff0:	f7f8 ffda 	bl	8001fa8 <enc_drive2>
        if (IR[7] == 1 && IR[8] == 1)
 8008ff4:	4b15      	ldr	r3, [pc, #84]	@ (800904c <task4StateHandler+0x154>)
 8008ff6:	79db      	ldrb	r3, [r3, #7]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d122      	bne.n	8009042 <task4StateHandler+0x14a>
 8008ffc:	4b13      	ldr	r3, [pc, #76]	@ (800904c <task4StateHandler+0x154>)
 8008ffe:	7a1b      	ldrb	r3, [r3, #8]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d11e      	bne.n	8009042 <task4StateHandler+0x14a>
        {
            enc_drive_decel(2350, 130, 55);
 8009004:	2237      	movs	r2, #55	@ 0x37
 8009006:	2182      	movs	r1, #130	@ 0x82
 8009008:	f640 102e 	movw	r0, #2350	@ 0x92e
 800900c:	f7f8 fb78 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 8009010:	f7fc fc34 	bl	800587c <m_stopLR>
            delay_ms(50); //*****tsk done*******/
 8009014:	2032      	movs	r0, #50	@ 0x32
 8009016:	f7f8 fa7b 	bl	8001510 <delay_ms>
            currentMainState = TASK_5;
 800901a:	4b0f      	ldr	r3, [pc, #60]	@ (8009058 <task4StateHandler+0x160>)
 800901c:	2204      	movs	r2, #4
 800901e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009020:	e00f      	b.n	8009042 <task4StateHandler+0x14a>
    case FinishToline:
        delay_ms(20);
 8009022:	2014      	movs	r0, #20
 8009024:	f7f8 fa74 	bl	8001510 <delay_ms>
        resetEncoders();
 8009028:	f7fb feae 	bl	8004d88 <resetEncoders>
        currentTask4SubState = FinishTASK4;
 800902c:	4b06      	ldr	r3, [pc, #24]	@ (8009048 <task4StateHandler+0x150>)
 800902e:	2209      	movs	r2, #9
 8009030:	701a      	strb	r2, [r3, #0]
        break;
 8009032:	e007      	b.n	8009044 <task4StateHandler+0x14c>
    case STATE_TASK4:
        boxPick();
 8009034:	f7ff f952 	bl	80082dc <boxPick>
        delay_ms(6000);
 8009038:	f241 7070 	movw	r0, #6000	@ 0x1770
 800903c:	f7f8 fa68 	bl	8001510 <delay_ms>
        // to_cell_2_1();
        break;
 8009040:	e000      	b.n	8009044 <task4StateHandler+0x14c>
        break;
 8009042:	bf00      	nop
        // Implementation of task 4 state handling logic goes here
    }
}
 8009044:	bf00      	nop
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200005ac 	.word	0x200005ac
 800904c:	20000468 	.word	0x20000468
 8009050:	2000052c 	.word	0x2000052c
 8009054:	200005a0 	.word	0x200005a0
 8009058:	20000472 	.word	0x20000472

0800905c <boxPlaceTS5>:
        DIST5 = Ultrasonic_GetDistance(n);
        delay_ms(20);
    }
}
void boxPlaceTS5()
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
    BOX_Arm_Down();
 8009060:	f7f8 f8b8 	bl	80011d4 <BOX_Arm_Down>
    BOX_Gripper_Open();
 8009064:	f7f8 f93a 	bl	80012dc <BOX_Gripper_Open>
    BOX_Arm_Up();
 8009068:	f7f8 f8cc 	bl	8001204 <BOX_Arm_Up>
    BOX_Gripper_Close();
 800906c:	f7f8 f94a 	bl	8001304 <BOX_Gripper_Close>
}
 8009070:	bf00      	nop
 8009072:	bd80      	pop	{r7, pc}

08009074 <task5StateHandler>:

void task5StateHandler()
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
    switch (currentTask5SubState)
 800907a:	4b8a      	ldr	r3, [pc, #552]	@ (80092a4 <task5StateHandler+0x230>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b05      	cmp	r3, #5
 8009080:	f200 810c 	bhi.w	800929c <task5StateHandler+0x228>
 8009084:	a201      	add	r2, pc, #4	@ (adr r2, 800908c <task5StateHandler+0x18>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	080090a5 	.word	0x080090a5
 8009090:	080090b3 	.word	0x080090b3
 8009094:	080090e7 	.word	0x080090e7
 8009098:	080091b3 	.word	0x080091b3
 800909c:	080091ed 	.word	0x080091ed
 80090a0:	0800924d 	.word	0x0800924d
    {
    case STATE_display:
        display_TASK(5);
 80090a4:	2005      	movs	r0, #5
 80090a6:	f7fc fe15 	bl	8005cd4 <display_TASK>
        currentTask5SubState = STATE_Line_Detect;
 80090aa:	4b7e      	ldr	r3, [pc, #504]	@ (80092a4 <task5StateHandler+0x230>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	701a      	strb	r2, [r3, #0]
        break;
 80090b0:	e0f4      	b.n	800929c <task5StateHandler+0x228>
    case STATE_Line_Detect:
        line_follow();
 80090b2:	f7f9 fc25 	bl	8002900 <line_follow>
        if (IR[7] == 1)
 80090b6:	4b7c      	ldr	r3, [pc, #496]	@ (80092a8 <task5StateHandler+0x234>)
 80090b8:	79db      	ldrb	r3, [r3, #7]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	f040 80e5 	bne.w	800928a <task5StateHandler+0x216>
        {
            enc_drive_decel(750, 80, 65);
 80090c0:	2241      	movs	r2, #65	@ 0x41
 80090c2:	2150      	movs	r1, #80	@ 0x50
 80090c4:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80090c8:	f7f8 fb1a 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 80090cc:	f7fc fbd6 	bl	800587c <m_stopLR>
            delay_ms(80);
 80090d0:	2050      	movs	r0, #80	@ 0x50
 80090d2:	f7f8 fa1d 	bl	8001510 <delay_ms>
            resetEncoders();
 80090d6:	f7fb fe57 	bl	8004d88 <resetEncoders>
            turn_Right_90_LR();
 80090da:	f7fb f915 	bl	8004308 <turn_Right_90_LR>
            currentTask5SubState = STATE_right;
 80090de:	4b71      	ldr	r3, [pc, #452]	@ (80092a4 <task5StateHandler+0x230>)
 80090e0:	2202      	movs	r2, #2
 80090e2:	701a      	strb	r2, [r3, #0]
        }
        break;
 80090e4:	e0d1      	b.n	800928a <task5StateHandler+0x216>
    case STATE_right:
        line_follow();
 80090e6:	f7f9 fc0b 	bl	8002900 <line_follow>
        if (IR[0] == 1 && IR[1] == 1 && IR[2] == 1 && IR[3] == 1 && IR[4] == 1 && IR[5] == 1 && IR[6] == 1)
 80090ea:	4b6f      	ldr	r3, [pc, #444]	@ (80092a8 <task5StateHandler+0x234>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	f040 80cd 	bne.w	800928e <task5StateHandler+0x21a>
 80090f4:	4b6c      	ldr	r3, [pc, #432]	@ (80092a8 <task5StateHandler+0x234>)
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	f040 80c8 	bne.w	800928e <task5StateHandler+0x21a>
 80090fe:	4b6a      	ldr	r3, [pc, #424]	@ (80092a8 <task5StateHandler+0x234>)
 8009100:	789b      	ldrb	r3, [r3, #2]
 8009102:	2b01      	cmp	r3, #1
 8009104:	f040 80c3 	bne.w	800928e <task5StateHandler+0x21a>
 8009108:	4b67      	ldr	r3, [pc, #412]	@ (80092a8 <task5StateHandler+0x234>)
 800910a:	78db      	ldrb	r3, [r3, #3]
 800910c:	2b01      	cmp	r3, #1
 800910e:	f040 80be 	bne.w	800928e <task5StateHandler+0x21a>
 8009112:	4b65      	ldr	r3, [pc, #404]	@ (80092a8 <task5StateHandler+0x234>)
 8009114:	791b      	ldrb	r3, [r3, #4]
 8009116:	2b01      	cmp	r3, #1
 8009118:	f040 80b9 	bne.w	800928e <task5StateHandler+0x21a>
 800911c:	4b62      	ldr	r3, [pc, #392]	@ (80092a8 <task5StateHandler+0x234>)
 800911e:	795b      	ldrb	r3, [r3, #5]
 8009120:	2b01      	cmp	r3, #1
 8009122:	f040 80b4 	bne.w	800928e <task5StateHandler+0x21a>
 8009126:	4b60      	ldr	r3, [pc, #384]	@ (80092a8 <task5StateHandler+0x234>)
 8009128:	799b      	ldrb	r3, [r3, #6]
 800912a:	2b01      	cmp	r3, #1
 800912c:	f040 80af 	bne.w	800928e <task5StateHandler+0x21a>

        {
            enc_drive_decel(62, 85, 60);
 8009130:	223c      	movs	r2, #60	@ 0x3c
 8009132:	2155      	movs	r1, #85	@ 0x55
 8009134:	203e      	movs	r0, #62	@ 0x3e
 8009136:	f7f8 fae3 	bl	8001700 <enc_drive_decel>
            setTCAChannel(0);
 800913a:	2000      	movs	r0, #0
 800913c:	f7fb fe34 	bl	8004da8 <setTCAChannel>
            delay_ms(10);
 8009140:	200a      	movs	r0, #10
 8009142:	f7f8 f9e5 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	e007      	b.n	800915c <task5StateHandler+0xe8>
            {
                Bottom_C_PAD_Sensor();
 800914c:	f000 fd60 	bl	8009c10 <Bottom_C_PAD_Sensor>
                delay_ms(20);
 8009150:	2014      	movs	r0, #20
 8009152:	f7f8 f9dd 	bl	8001510 <delay_ms>
            for (int i = 0; i < 10; i++)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3301      	adds	r3, #1
 800915a:	607b      	str	r3, [r7, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b09      	cmp	r3, #9
 8009160:	ddf4      	ble.n	800914c <task5StateHandler+0xd8>
            }
            if (bottomColor == COLOR_RED)
 8009162:	4b52      	ldr	r3, [pc, #328]	@ (80092ac <task5StateHandler+0x238>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b03      	cmp	r3, #3
 8009168:	d112      	bne.n	8009190 <task5StateHandler+0x11c>
            {
                enc_driveR_T(250, 80, 60);
 800916a:	223c      	movs	r2, #60	@ 0x3c
 800916c:	2150      	movs	r1, #80	@ 0x50
 800916e:	20fa      	movs	r0, #250	@ 0xfa
 8009170:	f7f9 f876 	bl	8002260 <enc_driveR_T>
                boxPlaceTS5();
 8009174:	f7ff ff72 	bl	800905c <boxPlaceTS5>
                turn_Right_180_LR();
 8009178:	f7fb f822 	bl	80041c0 <turn_Right_180_LR>
                line_follow_to_target(1000, 80, 60);
 800917c:	223c      	movs	r2, #60	@ 0x3c
 800917e:	2150      	movs	r1, #80	@ 0x50
 8009180:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009184:	f7f9 fa6c 	bl	8002660 <line_follow_to_target>
                task5 = 1; // Task 5 completed
 8009188:	4b49      	ldr	r3, [pc, #292]	@ (80092b0 <task5StateHandler+0x23c>)
 800918a:	2201      	movs	r2, #1
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e004      	b.n	800919a <task5StateHandler+0x126>
            }
            else
            {
                turn_Right_180_LR();
 8009190:	f7fb f816 	bl	80041c0 <turn_Right_180_LR>
                task5 = 0;
 8009194:	4b46      	ldr	r3, [pc, #280]	@ (80092b0 <task5StateHandler+0x23c>)
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]
            }
            if (task5 == 1)
 800919a:	4b45      	ldr	r3, [pc, #276]	@ (80092b0 <task5StateHandler+0x23c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d103      	bne.n	80091aa <task5StateHandler+0x136>
            {
                currentMainState = TASK_6;
 80091a2:	4b44      	ldr	r3, [pc, #272]	@ (80092b4 <task5StateHandler+0x240>)
 80091a4:	2205      	movs	r2, #5
 80091a6:	701a      	strb	r2, [r3, #0]
            else
            {
                currentTask5SubState = STATE_left;
            }
        }
        break;
 80091a8:	e071      	b.n	800928e <task5StateHandler+0x21a>
                currentTask5SubState = STATE_left;
 80091aa:	4b3e      	ldr	r3, [pc, #248]	@ (80092a4 <task5StateHandler+0x230>)
 80091ac:	2203      	movs	r2, #3
 80091ae:	701a      	strb	r2, [r3, #0]
        break;
 80091b0:	e06d      	b.n	800928e <task5StateHandler+0x21a>
    case STATE_left:
        line_follow();
 80091b2:	f7f9 fba5 	bl	8002900 <line_follow>
        if (IR[7] == 1 && IR[8] == 1)
 80091b6:	4b3c      	ldr	r3, [pc, #240]	@ (80092a8 <task5StateHandler+0x234>)
 80091b8:	79db      	ldrb	r3, [r3, #7]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d169      	bne.n	8009292 <task5StateHandler+0x21e>
 80091be:	4b3a      	ldr	r3, [pc, #232]	@ (80092a8 <task5StateHandler+0x234>)
 80091c0:	7a1b      	ldrb	r3, [r3, #8]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d165      	bne.n	8009292 <task5StateHandler+0x21e>
        {
            enc_drive_decel(750, 80, 65);
 80091c6:	2241      	movs	r2, #65	@ 0x41
 80091c8:	2150      	movs	r1, #80	@ 0x50
 80091ca:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80091ce:	f7f8 fa97 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 80091d2:	f7fc fb53 	bl	800587c <m_stopLR>
            delay_ms(80);
 80091d6:	2050      	movs	r0, #80	@ 0x50
 80091d8:	f7f8 f99a 	bl	8001510 <delay_ms>
            resetEncoders();
 80091dc:	f7fb fdd4 	bl	8004d88 <resetEncoders>
            turn_Right_90_LR();
 80091e0:	f7fb f892 	bl	8004308 <turn_Right_90_LR>
            currentTask5SubState = STATE_pad2;
 80091e4:	4b2f      	ldr	r3, [pc, #188]	@ (80092a4 <task5StateHandler+0x230>)
 80091e6:	2204      	movs	r2, #4
 80091e8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80091ea:	e052      	b.n	8009292 <task5StateHandler+0x21e>
    case STATE_pad2:
        line_follow();
 80091ec:	f7f9 fb88 	bl	8002900 <line_follow>
         if (IR[0] == 1 && IR[1] == 1 && IR[2] == 1 && IR[3] == 1 && IR[4] == 1 && IR[5] == 1 && IR[6] == 1)
 80091f0:	4b2d      	ldr	r3, [pc, #180]	@ (80092a8 <task5StateHandler+0x234>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d14e      	bne.n	8009296 <task5StateHandler+0x222>
 80091f8:	4b2b      	ldr	r3, [pc, #172]	@ (80092a8 <task5StateHandler+0x234>)
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d14a      	bne.n	8009296 <task5StateHandler+0x222>
 8009200:	4b29      	ldr	r3, [pc, #164]	@ (80092a8 <task5StateHandler+0x234>)
 8009202:	789b      	ldrb	r3, [r3, #2]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d146      	bne.n	8009296 <task5StateHandler+0x222>
 8009208:	4b27      	ldr	r3, [pc, #156]	@ (80092a8 <task5StateHandler+0x234>)
 800920a:	78db      	ldrb	r3, [r3, #3]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d142      	bne.n	8009296 <task5StateHandler+0x222>
 8009210:	4b25      	ldr	r3, [pc, #148]	@ (80092a8 <task5StateHandler+0x234>)
 8009212:	791b      	ldrb	r3, [r3, #4]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d13e      	bne.n	8009296 <task5StateHandler+0x222>
 8009218:	4b23      	ldr	r3, [pc, #140]	@ (80092a8 <task5StateHandler+0x234>)
 800921a:	795b      	ldrb	r3, [r3, #5]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d13a      	bne.n	8009296 <task5StateHandler+0x222>
 8009220:	4b21      	ldr	r3, [pc, #132]	@ (80092a8 <task5StateHandler+0x234>)
 8009222:	799b      	ldrb	r3, [r3, #6]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d136      	bne.n	8009296 <task5StateHandler+0x222>

        {
            enc_drive_decel(62, 85, 60);
 8009228:	223c      	movs	r2, #60	@ 0x3c
 800922a:	2155      	movs	r1, #85	@ 0x55
 800922c:	203e      	movs	r0, #62	@ 0x3e
 800922e:	f7f8 fa67 	bl	8001700 <enc_drive_decel>
            enc_driveR_T(250, 80, 60);
 8009232:	223c      	movs	r2, #60	@ 0x3c
 8009234:	2150      	movs	r1, #80	@ 0x50
 8009236:	20fa      	movs	r0, #250	@ 0xfa
 8009238:	f7f9 f812 	bl	8002260 <enc_driveR_T>
            boxPlaceTS5();
 800923c:	f7ff ff0e 	bl	800905c <boxPlaceTS5>
            turn_Right_180_LR();
 8009240:	f7fa ffbe 	bl	80041c0 <turn_Right_180_LR>
            currentTask5SubState = STATE_3;
 8009244:	4b17      	ldr	r3, [pc, #92]	@ (80092a4 <task5StateHandler+0x230>)
 8009246:	2205      	movs	r2, #5
 8009248:	701a      	strb	r2, [r3, #0]
        }
        break;
 800924a:	e024      	b.n	8009296 <task5StateHandler+0x222>
    case STATE_3:
        line_follow();
 800924c:	f7f9 fb58 	bl	8002900 <line_follow>
        if (IR[8] == 1)
 8009250:	4b15      	ldr	r3, [pc, #84]	@ (80092a8 <task5StateHandler+0x234>)
 8009252:	7a1b      	ldrb	r3, [r3, #8]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d120      	bne.n	800929a <task5StateHandler+0x226>
        {
            enc_drive_decel(750, 80, 65);
 8009258:	2241      	movs	r2, #65	@ 0x41
 800925a:	2150      	movs	r1, #80	@ 0x50
 800925c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8009260:	f7f8 fa4e 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 8009264:	f7fc fb0a 	bl	800587c <m_stopLR>
            delay_ms(80);
 8009268:	2050      	movs	r0, #80	@ 0x50
 800926a:	f7f8 f951 	bl	8001510 <delay_ms>
            resetEncoders();
 800926e:	f7fb fd8b 	bl	8004d88 <resetEncoders>
            turn_Right_90_LR();
 8009272:	f7fb f849 	bl	8004308 <turn_Right_90_LR>
            line_follow_to_target(1000, 80, 60);
 8009276:	223c      	movs	r2, #60	@ 0x3c
 8009278:	2150      	movs	r1, #80	@ 0x50
 800927a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800927e:	f7f9 f9ef 	bl	8002660 <line_follow_to_target>
            currentMainState = TASK_6;
 8009282:	4b0c      	ldr	r3, [pc, #48]	@ (80092b4 <task5StateHandler+0x240>)
 8009284:	2205      	movs	r2, #5
 8009286:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009288:	e007      	b.n	800929a <task5StateHandler+0x226>
        break;
 800928a:	bf00      	nop
 800928c:	e006      	b.n	800929c <task5StateHandler+0x228>
        break;
 800928e:	bf00      	nop
 8009290:	e004      	b.n	800929c <task5StateHandler+0x228>
        break;
 8009292:	bf00      	nop
 8009294:	e002      	b.n	800929c <task5StateHandler+0x228>
        break;
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <task5StateHandler+0x228>
        break;
 800929a:	bf00      	nop
    }
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200005ad 	.word	0x200005ad
 80092a8:	20000468 	.word	0x20000468
 80092ac:	200005ca 	.word	0x200005ca
 80092b0:	200005b0 	.word	0x200005b0
 80092b4:	20000472 	.word	0x20000472

080092b8 <task6StateHandler>:
        DIST = Ultrasonic_GetDistance(sonic);
        delay_ms(20);
    }
}
void task6StateHandler()
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
    switch (currentTask6SubState)
 80092bc:	4bb5      	ldr	r3, [pc, #724]	@ (8009594 <task6StateHandler+0x2dc>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b0b      	cmp	r3, #11
 80092c2:	f200 824b 	bhi.w	800975c <task6StateHandler+0x4a4>
 80092c6:	a201      	add	r2, pc, #4	@ (adr r2, 80092cc <task6StateHandler+0x14>)
 80092c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092cc:	080092fd 	.word	0x080092fd
 80092d0:	0800930b 	.word	0x0800930b
 80092d4:	08009371 	.word	0x08009371
 80092d8:	080093bd 	.word	0x080093bd
 80092dc:	0800975d 	.word	0x0800975d
 80092e0:	08009405 	.word	0x08009405
 80092e4:	08009477 	.word	0x08009477
 80092e8:	0800975d 	.word	0x0800975d
 80092ec:	08009507 	.word	0x08009507
 80092f0:	0800960d 	.word	0x0800960d
 80092f4:	08009631 	.word	0x08009631
 80092f8:	08009669 	.word	0x08009669
    {
    case STATE_Display:
        display_TASK(6);
 80092fc:	2006      	movs	r0, #6
 80092fe:	f7fc fce9 	bl	8005cd4 <display_TASK>
        currentTask6SubState = STATE_entering;
 8009302:	4ba4      	ldr	r3, [pc, #656]	@ (8009594 <task6StateHandler+0x2dc>)
 8009304:	2201      	movs	r2, #1
 8009306:	701a      	strb	r2, [r3, #0]

        break;
 8009308:	e228      	b.n	800975c <task6StateHandler+0x4a4>
    case STATE_entering:
        enc_drive();
 800930a:	f7f8 fd01 	bl	8001d10 <enc_drive>
        if (IR[7] == 1 && IR[8] == 1)
 800930e:	4ba2      	ldr	r3, [pc, #648]	@ (8009598 <task6StateHandler+0x2e0>)
 8009310:	79db      	ldrb	r3, [r3, #7]
 8009312:	2b01      	cmp	r3, #1
 8009314:	f040 821d 	bne.w	8009752 <task6StateHandler+0x49a>
 8009318:	4b9f      	ldr	r3, [pc, #636]	@ (8009598 <task6StateHandler+0x2e0>)
 800931a:	7a1b      	ldrb	r3, [r3, #8]
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 8218 	bne.w	8009752 <task6StateHandler+0x49a>
        {
            enc_drive_decel(730, 80, 65);
 8009322:	2241      	movs	r2, #65	@ 0x41
 8009324:	2150      	movs	r1, #80	@ 0x50
 8009326:	f240 20da 	movw	r0, #730	@ 0x2da
 800932a:	f7f8 f9e9 	bl	8001700 <enc_drive_decel>
            enc_drive_T(1660, 80, 75);
 800932e:	224b      	movs	r2, #75	@ 0x4b
 8009330:	2150      	movs	r1, #80	@ 0x50
 8009332:	f240 607c 	movw	r0, #1660	@ 0x67c
 8009336:	f7f8 fbdb 	bl	8001af0 <enc_drive_T>
            delay_ms(20);
 800933a:	2014      	movs	r0, #20
 800933c:	f7f8 f8e8 	bl	8001510 <delay_ms>
            turn_Left_90_LR();
 8009340:	f7fb f929 	bl	8004596 <turn_Left_90_LR>
            delay_ms(20);
 8009344:	2014      	movs	r0, #20
 8009346:	f7f8 f8e3 	bl	8001510 <delay_ms>
            enc_drive_T(1464, 80, 75);
 800934a:	224b      	movs	r2, #75	@ 0x4b
 800934c:	2150      	movs	r1, #80	@ 0x50
 800934e:	f44f 60b7 	mov.w	r0, #1464	@ 0x5b8
 8009352:	f7f8 fbcd 	bl	8001af0 <enc_drive_T>
            turn_Right_90_LR_Controlled(850, 80, 70);
 8009356:	2246      	movs	r2, #70	@ 0x46
 8009358:	2150      	movs	r1, #80	@ 0x50
 800935a:	f240 3052 	movw	r0, #850	@ 0x352
 800935e:	f7fb fa5f 	bl	8004820 <turn_Right_90_LR_Controlled>

            delay_ms(20);
 8009362:	2014      	movs	r0, #20
 8009364:	f7f8 f8d4 	bl	8001510 <delay_ms>
            currentTask6SubState = STATE_Plant_line_detection;
 8009368:	4b8a      	ldr	r3, [pc, #552]	@ (8009594 <task6StateHandler+0x2dc>)
 800936a:	2202      	movs	r2, #2
 800936c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800936e:	e1f0      	b.n	8009752 <task6StateHandler+0x49a>
    case STATE_Plant_line_detection:
        enc_drive();
 8009370:	f7f8 fcce 	bl	8001d10 <enc_drive>
        if (IR[8] == 1)
 8009374:	4b88      	ldr	r3, [pc, #544]	@ (8009598 <task6StateHandler+0x2e0>)
 8009376:	7a1b      	ldrb	r3, [r3, #8]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d11c      	bne.n	80093b6 <task6StateHandler+0xfe>
        {
            enc_drive_decel(730, 80, 65);
 800937c:	2241      	movs	r2, #65	@ 0x41
 800937e:	2150      	movs	r1, #80	@ 0x50
 8009380:	f240 20da 	movw	r0, #730	@ 0x2da
 8009384:	f7f8 f9bc 	bl	8001700 <enc_drive_decel>
            plant_line_detected++;
 8009388:	4b84      	ldr	r3, [pc, #528]	@ (800959c <task6StateHandler+0x2e4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3301      	adds	r3, #1
 800938e:	4a83      	ldr	r2, [pc, #524]	@ (800959c <task6StateHandler+0x2e4>)
 8009390:	6013      	str	r3, [r2, #0]

            if (plant_line_detected == 2)
 8009392:	4b82      	ldr	r3, [pc, #520]	@ (800959c <task6StateHandler+0x2e4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b02      	cmp	r3, #2
 8009398:	f040 81dd 	bne.w	8009756 <task6StateHandler+0x49e>
            {

                turn_Right_90_LR_Controlled(830, 80, 70);
 800939c:	2246      	movs	r2, #70	@ 0x46
 800939e:	2150      	movs	r1, #80	@ 0x50
 80093a0:	f240 303e 	movw	r0, #830	@ 0x33e
 80093a4:	f7fb fa3c 	bl	8004820 <turn_Right_90_LR_Controlled>
                delay_ms(20);
 80093a8:	2014      	movs	r0, #20
 80093aa:	f7f8 f8b1 	bl	8001510 <delay_ms>
                currentTask6SubState = STATE_2ndplant_line_detected;
 80093ae:	4b79      	ldr	r3, [pc, #484]	@ (8009594 <task6StateHandler+0x2dc>)
 80093b0:	2203      	movs	r2, #3
 80093b2:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            enc_drive();
        }
        break;
 80093b4:	e1cf      	b.n	8009756 <task6StateHandler+0x49e>
            enc_drive();
 80093b6:	f7f8 fcab 	bl	8001d10 <enc_drive>
        break;
 80093ba:	e1cc      	b.n	8009756 <task6StateHandler+0x49e>
    case STATE_2ndplant_line_detected:
        enc_drive();
 80093bc:	f7f8 fca8 	bl	8001d10 <enc_drive>
        if (IR[3] == 1)
 80093c0:	4b75      	ldr	r3, [pc, #468]	@ (8009598 <task6StateHandler+0x2e0>)
 80093c2:	78db      	ldrb	r3, [r3, #3]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	f040 81c8 	bne.w	800975a <task6StateHandler+0x4a2>
        {
            enc_drive_decel(62, 80, 65);
 80093ca:	2241      	movs	r2, #65	@ 0x41
 80093cc:	2150      	movs	r1, #80	@ 0x50
 80093ce:	203e      	movs	r0, #62	@ 0x3e
 80093d0:	f7f8 f996 	bl	8001700 <enc_drive_decel>
            turn_90_degreesR1_reverse(800);
 80093d4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80093d8:	f7fa fb0e 	bl	80039f8 <turn_90_degreesR1_reverse>
            enc_drive_T(1400, 80, 65);
 80093dc:	2241      	movs	r2, #65	@ 0x41
 80093de:	2150      	movs	r1, #80	@ 0x50
 80093e0:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80093e4:	f7f8 fb84 	bl	8001af0 <enc_drive_T>
            turn_90_degreesR1_reverse(850);
 80093e8:	f240 3052 	movw	r0, #850	@ 0x352
 80093ec:	f7fa fb04 	bl	80039f8 <turn_90_degreesR1_reverse>
            enc_driveR_T(1200, 80, 65);
 80093f0:	2241      	movs	r2, #65	@ 0x41
 80093f2:	2150      	movs	r1, #80	@ 0x50
 80093f4:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80093f8:	f7f8 ff32 	bl	8002260 <enc_driveR_T>
            currentTask6SubState = STATE_TeST;
 80093fc:	4b65      	ldr	r3, [pc, #404]	@ (8009594 <task6StateHandler+0x2dc>)
 80093fe:	220a      	movs	r2, #10
 8009400:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009402:	e1aa      	b.n	800975a <task6StateHandler+0x4a2>
    case STATE_PlantTLine_detection:
        enc_drive();
 8009404:	f7f8 fc84 	bl	8001d10 <enc_drive>
        if (IR[0] == 1 || IR[1] == 1 || IR[2] == 1 || IR[3] == 1 || IR[4] == 1 || IR[5] == 1 || IR[6] == 1 || IR[7] == 1 || IR[8] == 1)
 8009408:	4b63      	ldr	r3, [pc, #396]	@ (8009598 <task6StateHandler+0x2e0>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d01f      	beq.n	8009450 <task6StateHandler+0x198>
 8009410:	4b61      	ldr	r3, [pc, #388]	@ (8009598 <task6StateHandler+0x2e0>)
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d01b      	beq.n	8009450 <task6StateHandler+0x198>
 8009418:	4b5f      	ldr	r3, [pc, #380]	@ (8009598 <task6StateHandler+0x2e0>)
 800941a:	789b      	ldrb	r3, [r3, #2]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d017      	beq.n	8009450 <task6StateHandler+0x198>
 8009420:	4b5d      	ldr	r3, [pc, #372]	@ (8009598 <task6StateHandler+0x2e0>)
 8009422:	78db      	ldrb	r3, [r3, #3]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d013      	beq.n	8009450 <task6StateHandler+0x198>
 8009428:	4b5b      	ldr	r3, [pc, #364]	@ (8009598 <task6StateHandler+0x2e0>)
 800942a:	791b      	ldrb	r3, [r3, #4]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d00f      	beq.n	8009450 <task6StateHandler+0x198>
 8009430:	4b59      	ldr	r3, [pc, #356]	@ (8009598 <task6StateHandler+0x2e0>)
 8009432:	795b      	ldrb	r3, [r3, #5]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d00b      	beq.n	8009450 <task6StateHandler+0x198>
 8009438:	4b57      	ldr	r3, [pc, #348]	@ (8009598 <task6StateHandler+0x2e0>)
 800943a:	799b      	ldrb	r3, [r3, #6]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d007      	beq.n	8009450 <task6StateHandler+0x198>
 8009440:	4b55      	ldr	r3, [pc, #340]	@ (8009598 <task6StateHandler+0x2e0>)
 8009442:	79db      	ldrb	r3, [r3, #7]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d003      	beq.n	8009450 <task6StateHandler+0x198>
 8009448:	4b53      	ldr	r3, [pc, #332]	@ (8009598 <task6StateHandler+0x2e0>)
 800944a:	7a1b      	ldrb	r3, [r3, #8]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d10f      	bne.n	8009470 <task6StateHandler+0x1b8>
        {
            enc_drive_decel(124, 80, 65);
 8009450:	2241      	movs	r2, #65	@ 0x41
 8009452:	2150      	movs	r1, #80	@ 0x50
 8009454:	207c      	movs	r0, #124	@ 0x7c
 8009456:	f7f8 f953 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 800945a:	f7fc fa0f 	bl	800587c <m_stopLR>
            delay_ms(20);
 800945e:	2014      	movs	r0, #20
 8009460:	f7f8 f856 	bl	8001510 <delay_ms>
            resetEncoders();
 8009464:	f7fb fc90 	bl	8004d88 <resetEncoders>
            currentTask6SubState = STATE_Plant_T_detection;
 8009468:	4b4a      	ldr	r3, [pc, #296]	@ (8009594 <task6StateHandler+0x2dc>)
 800946a:	2206      	movs	r2, #6
 800946c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            enc_drive();
        }
        break;
 800946e:	e175      	b.n	800975c <task6StateHandler+0x4a4>
            enc_drive();
 8009470:	f7f8 fc4e 	bl	8001d10 <enc_drive>
        break;
 8009474:	e172      	b.n	800975c <task6StateHandler+0x4a4>
    case STATE_Plant_T_detection:
        line_follow();
 8009476:	f7f9 fa43 	bl	8002900 <line_follow>
        if (IR[0] == 1 && IR[1] == 1 && IR[2] == 1 && IR[3] == 1 && IR[4] == 1)
 800947a:	4b47      	ldr	r3, [pc, #284]	@ (8009598 <task6StateHandler+0x2e0>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d13e      	bne.n	8009500 <task6StateHandler+0x248>
 8009482:	4b45      	ldr	r3, [pc, #276]	@ (8009598 <task6StateHandler+0x2e0>)
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d13a      	bne.n	8009500 <task6StateHandler+0x248>
 800948a:	4b43      	ldr	r3, [pc, #268]	@ (8009598 <task6StateHandler+0x2e0>)
 800948c:	789b      	ldrb	r3, [r3, #2]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d136      	bne.n	8009500 <task6StateHandler+0x248>
 8009492:	4b41      	ldr	r3, [pc, #260]	@ (8009598 <task6StateHandler+0x2e0>)
 8009494:	78db      	ldrb	r3, [r3, #3]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d132      	bne.n	8009500 <task6StateHandler+0x248>
 800949a:	4b3f      	ldr	r3, [pc, #252]	@ (8009598 <task6StateHandler+0x2e0>)
 800949c:	791b      	ldrb	r3, [r3, #4]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d12e      	bne.n	8009500 <task6StateHandler+0x248>
        {
            enc_drive_decel(62, 80, 65);
 80094a2:	2241      	movs	r2, #65	@ 0x41
 80094a4:	2150      	movs	r1, #80	@ 0x50
 80094a6:	203e      	movs	r0, #62	@ 0x3e
 80094a8:	f7f8 f92a 	bl	8001700 <enc_drive_decel>
            m_stopLR();
 80094ac:	f7fc f9e6 	bl	800587c <m_stopLR>
            delay_ms(20);
 80094b0:	2014      	movs	r0, #20
 80094b2:	f7f8 f82d 	bl	8001510 <delay_ms>
            resetEncoders();
 80094b6:	f7fb fc67 	bl	8004d88 <resetEncoders>
            m_stopLR();
 80094ba:	f7fc f9df 	bl	800587c <m_stopLR>

            turn_90_degreesR1_reverse(800);
 80094be:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80094c2:	f7fa fa99 	bl	80039f8 <turn_90_degreesR1_reverse>
            enc_drive_T(1400, 80, 65);
 80094c6:	2241      	movs	r2, #65	@ 0x41
 80094c8:	2150      	movs	r1, #80	@ 0x50
 80094ca:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80094ce:	f7f8 fb0f 	bl	8001af0 <enc_drive_T>
            turn_90_degreesR1_reverse(850);
 80094d2:	f240 3052 	movw	r0, #850	@ 0x352
 80094d6:	f7fa fa8f 	bl	80039f8 <turn_90_degreesR1_reverse>
            enc_driveR_T(900, 80, 65);
 80094da:	2241      	movs	r2, #65	@ 0x41
 80094dc:	2150      	movs	r1, #80	@ 0x50
 80094de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80094e2:	f7f8 febd 	bl	8002260 <enc_driveR_T>
            delay_ms(20);
 80094e6:	2014      	movs	r0, #20
 80094e8:	f7f8 f812 	bl	8001510 <delay_ms>
            water_pump_mid_to_down();
 80094ec:	f7f7 ff36 	bl	800135c <water_pump_mid_to_down>
            delay_ms(1000);
 80094f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80094f4:	f7f8 f80c 	bl	8001510 <delay_ms>

            currentTask6SubState = STATE_Plant_Check;
 80094f8:	4b26      	ldr	r3, [pc, #152]	@ (8009594 <task6StateHandler+0x2dc>)
 80094fa:	2208      	movs	r2, #8
 80094fc:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            line_follow();
        }
        break;
 80094fe:	e12d      	b.n	800975c <task6StateHandler+0x4a4>
            line_follow();
 8009500:	f7f9 f9fe 	bl	8002900 <line_follow>
        break;
 8009504:	e12a      	b.n	800975c <task6StateHandler+0x4a4>
    case STATE_Plant_Check:
        if (IR[9] == 0)
 8009506:	4b24      	ldr	r3, [pc, #144]	@ (8009598 <task6StateHandler+0x2e0>)
 8009508:	7a5b      	ldrb	r3, [r3, #9]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d115      	bne.n	800953a <task6StateHandler+0x282>
        {
            pump_1_on();
 800950e:	f7f7 ff55 	bl	80013bc <pump_1_on>
            delay_ms(6000);
 8009512:	f241 7070 	movw	r0, #6000	@ 0x1770
 8009516:	f7f7 fffb 	bl	8001510 <delay_ms>
            pump_1_off();
 800951a:	f7f7 ff5b 	bl	80013d4 <pump_1_off>
            delay_ms(800);
 800951e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8009522:	f7f7 fff5 	bl	8001510 <delay_ms>
            water_pump_down_to_mid();
 8009526:	f7f7 ff31 	bl	800138c <water_pump_down_to_mid>
            delay_ms(1000);
 800952a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800952e:	f7f7 ffef 	bl	8001510 <delay_ms>
            currentTask6SubState = STATE_Done;
 8009532:	4b18      	ldr	r3, [pc, #96]	@ (8009594 <task6StateHandler+0x2dc>)
 8009534:	2209      	movs	r2, #9
 8009536:	701a      	strb	r2, [r3, #0]
                    currentTask6SubState = STATE_Done;
                }
            }
        }

        break;
 8009538:	e110      	b.n	800975c <task6StateHandler+0x4a4>
            water_pump_down_to_mid();
 800953a:	f7f7 ff27 	bl	800138c <water_pump_down_to_mid>
            delay_ms(1000);
 800953e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009542:	f7f7 ffe5 	bl	8001510 <delay_ms>
            enc_driveR_T(2420, 80, 65);
 8009546:	2241      	movs	r2, #65	@ 0x41
 8009548:	2150      	movs	r1, #80	@ 0x50
 800954a:	f640 1074 	movw	r0, #2420	@ 0x974
 800954e:	f7f8 fe87 	bl	8002260 <enc_driveR_T>
            delay_ms(1000);
 8009552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009556:	f7f7 ffdb 	bl	8001510 <delay_ms>
            water_pump_mid_to_down();
 800955a:	f7f7 feff 	bl	800135c <water_pump_mid_to_down>
            delay_ms(1000);
 800955e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009562:	f7f7 ffd5 	bl	8001510 <delay_ms>
            if (IR[9] == 0)
 8009566:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <task6StateHandler+0x2e0>)
 8009568:	7a5b      	ldrb	r3, [r3, #9]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d118      	bne.n	80095a0 <task6StateHandler+0x2e8>
                pump_1_on();
 800956e:	f7f7 ff25 	bl	80013bc <pump_1_on>
                delay_ms(6000);
 8009572:	f241 7070 	movw	r0, #6000	@ 0x1770
 8009576:	f7f7 ffcb 	bl	8001510 <delay_ms>
                pump_1_off();
 800957a:	f7f7 ff2b 	bl	80013d4 <pump_1_off>
                water_pump_down_to_mid();
 800957e:	f7f7 ff05 	bl	800138c <water_pump_down_to_mid>
                delay_ms(1000);
 8009582:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009586:	f7f7 ffc3 	bl	8001510 <delay_ms>
                currentTask6SubState = STATE_Done;
 800958a:	4b02      	ldr	r3, [pc, #8]	@ (8009594 <task6StateHandler+0x2dc>)
 800958c:	2209      	movs	r2, #9
 800958e:	701a      	strb	r2, [r3, #0]
        break;
 8009590:	e0e4      	b.n	800975c <task6StateHandler+0x4a4>
 8009592:	bf00      	nop
 8009594:	200005b8 	.word	0x200005b8
 8009598:	20000468 	.word	0x20000468
 800959c:	200005b4 	.word	0x200005b4
                water_pump_down_to_mid();
 80095a0:	f7f7 fef4 	bl	800138c <water_pump_down_to_mid>
                delay_ms(1000);
 80095a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80095a8:	f7f7 ffb2 	bl	8001510 <delay_ms>
                enc_drive_T(4500, 80, 65);
 80095ac:	2241      	movs	r2, #65	@ 0x41
 80095ae:	2150      	movs	r1, #80	@ 0x50
 80095b0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80095b4:	f7f8 fa9c 	bl	8001af0 <enc_drive_T>
                delay_ms(1000);
 80095b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80095bc:	f7f7 ffa8 	bl	8001510 <delay_ms>
                water_pump_mid_to_down();
 80095c0:	f7f7 fecc 	bl	800135c <water_pump_mid_to_down>
                delay_ms(1000);
 80095c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80095c8:	f7f7 ffa2 	bl	8001510 <delay_ms>
                if (IR[9] == 0)
 80095cc:	4b64      	ldr	r3, [pc, #400]	@ (8009760 <task6StateHandler+0x4a8>)
 80095ce:	7a5b      	ldrb	r3, [r3, #9]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d111      	bne.n	80095f8 <task6StateHandler+0x340>
                    pump_1_on();
 80095d4:	f7f7 fef2 	bl	80013bc <pump_1_on>
                    delay_ms(6000);
 80095d8:	f241 7070 	movw	r0, #6000	@ 0x1770
 80095dc:	f7f7 ff98 	bl	8001510 <delay_ms>
                    pump_1_off();
 80095e0:	f7f7 fef8 	bl	80013d4 <pump_1_off>
                    water_pump_down_to_mid();
 80095e4:	f7f7 fed2 	bl	800138c <water_pump_down_to_mid>
                    delay_ms(1000);
 80095e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80095ec:	f7f7 ff90 	bl	8001510 <delay_ms>
                    currentTask6SubState = STATE_Done;
 80095f0:	4b5c      	ldr	r3, [pc, #368]	@ (8009764 <task6StateHandler+0x4ac>)
 80095f2:	2209      	movs	r2, #9
 80095f4:	701a      	strb	r2, [r3, #0]
        break;
 80095f6:	e0b1      	b.n	800975c <task6StateHandler+0x4a4>
                    water_pump_down_to_mid();
 80095f8:	f7f7 fec8 	bl	800138c <water_pump_down_to_mid>
                    delay_ms(1000);
 80095fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009600:	f7f7 ff86 	bl	8001510 <delay_ms>
                    currentTask6SubState = STATE_Done;
 8009604:	4b57      	ldr	r3, [pc, #348]	@ (8009764 <task6StateHandler+0x4ac>)
 8009606:	2209      	movs	r2, #9
 8009608:	701a      	strb	r2, [r3, #0]
        break;
 800960a:	e0a7      	b.n	800975c <task6StateHandler+0x4a4>
    case STATE_Done:
        turn_Right_90_LR();
 800960c:	f7fa fe7c 	bl	8004308 <turn_Right_90_LR>
        delay_ms(20);
 8009610:	2014      	movs	r0, #20
 8009612:	f7f7 ff7d 	bl	8001510 <delay_ms>
        enc_drive_T(1800, 80, 65);
 8009616:	2241      	movs	r2, #65	@ 0x41
 8009618:	2150      	movs	r1, #80	@ 0x50
 800961a:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800961e:	f7f8 fa67 	bl	8001af0 <enc_drive_T>
        alldone();
 8009622:	f7fc fc0b 	bl	8005e3c <alldone>
        delay_ms(20000);
 8009626:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800962a:	f7f7 ff71 	bl	8001510 <delay_ms>

        break;
 800962e:	e095      	b.n	800975c <task6StateHandler+0x4a4>
    case STATE_TeST:
        setTCAChannel(2);
 8009630:	2002      	movs	r0, #2
 8009632:	f7fb fbb9 	bl	8004da8 <setTCAChannel>
        delay_ms(1000);
 8009636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800963a:	f7f7 ff69 	bl	8001510 <delay_ms>
        PCA9685_SetServoAngle(14, 109);
 800963e:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8009768 <task6StateHandler+0x4b0>
 8009642:	200e      	movs	r0, #14
 8009644:	f7fc fe40 	bl	80062c8 <PCA9685_SetServoAngle>
        pump_2_on();
 8009648:	f7f7 fed0 	bl	80013ec <pump_2_on>
        delay_ms(4000);
 800964c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8009650:	f7f7 ff5e 	bl	8001510 <delay_ms>
        pump_2_off();
 8009654:	f7f7 fed6 	bl	8001404 <pump_2_off>
        delay_ms(1000);
 8009658:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800965c:	f7f7 ff58 	bl	8001510 <delay_ms>
        currentTask6SubState = STATE_Arm_Down;
 8009660:	4b40      	ldr	r3, [pc, #256]	@ (8009764 <task6StateHandler+0x4ac>)
 8009662:	220b      	movs	r2, #11
 8009664:	701a      	strb	r2, [r3, #0]
        break;
 8009666:	e079      	b.n	800975c <task6StateHandler+0x4a4>
    case STATE_Arm_Down:
        setTCAChannel(2);
 8009668:	2002      	movs	r0, #2
 800966a:	f7fb fb9d 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 800966e:	2032      	movs	r0, #50	@ 0x32
 8009670:	f7fc fde4 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 8009674:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800976c <task6StateHandler+0x4b4>
 8009678:	200e      	movs	r0, #14
 800967a:	f7fc fe25 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 800967e:	2002      	movs	r0, #2
 8009680:	f7fb fb92 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 8009684:	2032      	movs	r0, #50	@ 0x32
 8009686:	f7fc fdd9 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 800968a:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800976c <task6StateHandler+0x4b4>
 800968e:	200e      	movs	r0, #14
 8009690:	f7fc fe1a 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 8009694:	2002      	movs	r0, #2
 8009696:	f7fb fb87 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 800969a:	2032      	movs	r0, #50	@ 0x32
 800969c:	f7fc fdce 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 80096a0:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800976c <task6StateHandler+0x4b4>
 80096a4:	200e      	movs	r0, #14
 80096a6:	f7fc fe0f 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 80096aa:	2002      	movs	r0, #2
 80096ac:	f7fb fb7c 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 80096b0:	2032      	movs	r0, #50	@ 0x32
 80096b2:	f7fc fdc3 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 80096b6:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800976c <task6StateHandler+0x4b4>
 80096ba:	200e      	movs	r0, #14
 80096bc:	f7fc fe04 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 80096c0:	2002      	movs	r0, #2
 80096c2:	f7fb fb71 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 80096c6:	2032      	movs	r0, #50	@ 0x32
 80096c8:	f7fc fdb8 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 80096cc:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 800976c <task6StateHandler+0x4b4>
 80096d0:	200e      	movs	r0, #14
 80096d2:	f7fc fdf9 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 80096d6:	2002      	movs	r0, #2
 80096d8:	f7fb fb66 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 80096dc:	2032      	movs	r0, #50	@ 0x32
 80096de:	f7fc fdad 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 80096e2:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800976c <task6StateHandler+0x4b4>
 80096e6:	200e      	movs	r0, #14
 80096e8:	f7fc fdee 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 80096ec:	2002      	movs	r0, #2
 80096ee:	f7fb fb5b 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 80096f2:	2032      	movs	r0, #50	@ 0x32
 80096f4:	f7fc fda2 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 80096f8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800976c <task6StateHandler+0x4b4>
 80096fc:	200e      	movs	r0, #14
 80096fe:	f7fc fde3 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 8009702:	2002      	movs	r0, #2
 8009704:	f7fb fb50 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 8009708:	2032      	movs	r0, #50	@ 0x32
 800970a:	f7fc fd97 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 800970e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800976c <task6StateHandler+0x4b4>
 8009712:	200e      	movs	r0, #14
 8009714:	f7fc fdd8 	bl	80062c8 <PCA9685_SetServoAngle>
        setTCAChannel(2);
 8009718:	2002      	movs	r0, #2
 800971a:	f7fb fb45 	bl	8004da8 <setTCAChannel>
        PCA9685_Init(50);
 800971e:	2032      	movs	r0, #50	@ 0x32
 8009720:	f7fc fd8c 	bl	800623c <PCA9685_Init>
        PCA9685_SetServoAngle(14, 0); // 170
 8009724:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800976c <task6StateHandler+0x4b4>
 8009728:	200e      	movs	r0, #14
 800972a:	f7fc fdcd 	bl	80062c8 <PCA9685_SetServoAngle>
        water_pump_mid();
 800972e:	f7f7 fe01 	bl	8001334 <water_pump_mid>

        delay_ms(1000);
 8009732:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009736:	f7f7 feeb 	bl	8001510 <delay_ms>
        enc_drive_T(750, 80, 65);
 800973a:	2241      	movs	r2, #65	@ 0x41
 800973c:	2150      	movs	r1, #80	@ 0x50
 800973e:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8009742:	f7f8 f9d5 	bl	8001af0 <enc_drive_T>
        turn_Right_90_LR();
 8009746:	f7fa fddf 	bl	8004308 <turn_Right_90_LR>
        currentTask6SubState = STATE_PlantTLine_detection;
 800974a:	4b06      	ldr	r3, [pc, #24]	@ (8009764 <task6StateHandler+0x4ac>)
 800974c:	2205      	movs	r2, #5
 800974e:	701a      	strb	r2, [r3, #0]
        break;
 8009750:	e004      	b.n	800975c <task6StateHandler+0x4a4>
        break;
 8009752:	bf00      	nop
 8009754:	e002      	b.n	800975c <task6StateHandler+0x4a4>
        break;
 8009756:	bf00      	nop
 8009758:	e000      	b.n	800975c <task6StateHandler+0x4a4>
        break;
 800975a:	bf00      	nop
    }
}
 800975c:	bf00      	nop
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000468 	.word	0x20000468
 8009764:	200005b8 	.word	0x200005b8
 8009768:	42da0000 	.word	0x42da0000
 800976c:	00000000 	.word	0x00000000

08009770 <write8>:
float R, G, B;
ColorType topColor, boxColor, bottomColor;

/* Writes a register and an 8 bit value over I2C */
void write8(uint8_t reg, uint32_t value)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af02      	add	r7, sp, #8
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009782:	b2db      	uxtb	r3, r3
 8009784:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
 800978c:	f107 020c 	add.w	r2, r7, #12
 8009790:	2364      	movs	r3, #100	@ 0x64
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2302      	movs	r3, #2
 8009796:	2152      	movs	r1, #82	@ 0x52
 8009798:	4803      	ldr	r0, [pc, #12]	@ (80097a8 <write8+0x38>)
 800979a:	f003 ff7d 	bl	800d698 <HAL_I2C_Master_Transmit>
}
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20000200 	.word	0x20000200

080097ac <read8>:

/* Reads an 8 bit value over I2C */
uint8_t read8(uint8_t reg)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	4603      	mov	r3, r0
 80097b4:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[1];
    buffer[0] = (TCS34725_COMMAND_BIT | reg);
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
 80097c0:	f107 020c 	add.w	r2, r7, #12
 80097c4:	2364      	movs	r3, #100	@ 0x64
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	2301      	movs	r3, #1
 80097ca:	2152      	movs	r1, #82	@ 0x52
 80097cc:	4808      	ldr	r0, [pc, #32]	@ (80097f0 <read8+0x44>)
 80097ce:	f003 ff63 	bl	800d698 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
 80097d2:	f107 020c 	add.w	r2, r7, #12
 80097d6:	2364      	movs	r3, #100	@ 0x64
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	2301      	movs	r3, #1
 80097dc:	2152      	movs	r1, #82	@ 0x52
 80097de:	4804      	ldr	r0, [pc, #16]	@ (80097f0 <read8+0x44>)
 80097e0:	f004 f858 	bl	800d894 <HAL_I2C_Master_Receive>
    return buffer[0];
 80097e4:	7b3b      	ldrb	r3, [r7, #12]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000200 	.word	0x20000200

080097f4 <read16>:

/* Reads a 16 bit values over I2C */
uint16_t read16(uint8_t reg)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	4603      	mov	r3, r0
 80097fc:	71fb      	strb	r3, [r7, #7]
    uint16_t ret;
    uint8_t txBuffer[1], rxBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009804:	b2db      	uxtb	r3, r3
 8009806:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 1, 100);
 8009808:	f107 020c 	add.w	r2, r7, #12
 800980c:	2364      	movs	r3, #100	@ 0x64
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	2301      	movs	r3, #1
 8009812:	2152      	movs	r1, #82	@ 0x52
 8009814:	480d      	ldr	r0, [pc, #52]	@ (800984c <read16+0x58>)
 8009816:	f003 ff3f 	bl	800d698 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, rxBuffer, 2, 100);
 800981a:	f107 0208 	add.w	r2, r7, #8
 800981e:	2364      	movs	r3, #100	@ 0x64
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	2302      	movs	r3, #2
 8009824:	2152      	movs	r1, #82	@ 0x52
 8009826:	4809      	ldr	r0, [pc, #36]	@ (800984c <read16+0x58>)
 8009828:	f004 f834 	bl	800d894 <HAL_I2C_Master_Receive>
    ret = rxBuffer[1];
 800982c:	7a7b      	ldrb	r3, [r7, #9]
 800982e:	81fb      	strh	r3, [r7, #14]
    ret <<= 8;
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	81fb      	strh	r3, [r7, #14]
    ret |= rxBuffer[0] & 0xFF;
 8009836:	7a3b      	ldrb	r3, [r7, #8]
 8009838:	461a      	mov	r2, r3
 800983a:	89fb      	ldrh	r3, [r7, #14]
 800983c:	4313      	orrs	r3, r2
 800983e:	81fb      	strh	r3, [r7, #14]
    return ret;
 8009840:	89fb      	ldrh	r3, [r7, #14]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000200 	.word	0x20000200

08009850 <enable>:

void enable(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
    write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8009854:	2101      	movs	r1, #1
 8009856:	2000      	movs	r0, #0
 8009858:	f7ff ff8a 	bl	8009770 <write8>
    delay_ms(3);
 800985c:	2003      	movs	r0, #3
 800985e:	f7f7 fe57 	bl	8001510 <delay_ms>
    write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8009862:	2103      	movs	r1, #3
 8009864:	2000      	movs	r0, #0
 8009866:	f7ff ff83 	bl	8009770 <write8>
    delay_ms(50);
 800986a:	2032      	movs	r0, #50	@ 0x32
 800986c:	f7f7 fe50 	bl	8001510 <delay_ms>
}
 8009870:	bf00      	nop
 8009872:	bd80      	pop	{r7, pc}

08009874 <setIntegrationTime>:
    reg = read8(TCS34725_ENABLE);
    write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}

void setIntegrationTime(uint8_t itime)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]
    if (_tcs34725Initialised == 0)
 800987e:	4b07      	ldr	r3, [pc, #28]	@ (800989c <setIntegrationTime+0x28>)
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <setIntegrationTime+0x16>
        tcs3272_init();
 8009886:	f000 f821 	bl	80098cc <tcs3272_init>
    write8(TCS34725_ATIME, itime);
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	4619      	mov	r1, r3
 800988e:	2001      	movs	r0, #1
 8009890:	f7ff ff6e 	bl	8009770 <write8>
}
 8009894:	bf00      	nop
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	200005b9 	.word	0x200005b9

080098a0 <setGain>:

void setGain(uint8_t gain)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	71fb      	strb	r3, [r7, #7]
    if (_tcs34725Initialised == 0)
 80098aa:	4b07      	ldr	r3, [pc, #28]	@ (80098c8 <setGain+0x28>)
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <setGain+0x16>
        tcs3272_init();
 80098b2:	f000 f80b 	bl	80098cc <tcs3272_init>
    write8(TCS34725_CONTROL, gain);
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	4619      	mov	r1, r3
 80098ba:	200f      	movs	r0, #15
 80098bc:	f7ff ff58 	bl	8009770 <write8>
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	200005b9 	.word	0x200005b9

080098cc <tcs3272_init>:

void tcs3272_init(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
    /* Make sure we're actually connected */
    uint8_t readValue = read8(TCS34725_ID);
 80098d2:	2012      	movs	r0, #18
 80098d4:	f7ff ff6a 	bl	80097ac <read8>
 80098d8:	4603      	mov	r3, r0
 80098da:	71fb      	strb	r3, [r7, #7]

    _tcs34725Initialised = 1;
 80098dc:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <tcs3272_init+0x30>)
 80098de:	2201      	movs	r2, #1
 80098e0:	701a      	strb	r2, [r3, #0]
    /* Set default integration time and gain */
    setIntegrationTime(TCS34725_INTEGRATIONTIME_50MS);
 80098e2:	20eb      	movs	r0, #235	@ 0xeb
 80098e4:	f7ff ffc6 	bl	8009874 <setIntegrationTime>
    setGain(TCS34725_GAIN_4X);
 80098e8:	2001      	movs	r0, #1
 80098ea:	f7ff ffd9 	bl	80098a0 <setGain>
    /* Note: by default, the device is in power down mode on bootup */
    enable();
 80098ee:	f7ff ffaf 	bl	8009850 <enable>
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	200005b9 	.word	0x200005b9

08009900 <getRawData>:

/* Get raw data */
void getRawData(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
    if (_tcs34725Initialised == 0)
 800990e:	4b14      	ldr	r3, [pc, #80]	@ (8009960 <getRawData+0x60>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <getRawData+0x1a>
        tcs3272_init();
 8009916:	f7ff ffd9 	bl	80098cc <tcs3272_init>

    *c = read16(TCS34725_CDATAL);
 800991a:	2014      	movs	r0, #20
 800991c:	f7ff ff6a 	bl	80097f4 <read16>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	801a      	strh	r2, [r3, #0]
    *r = read16(TCS34725_RDATAL);
 8009928:	2016      	movs	r0, #22
 800992a:	f7ff ff63 	bl	80097f4 <read16>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	801a      	strh	r2, [r3, #0]
    *g = read16(TCS34725_GDATAL);
 8009936:	2018      	movs	r0, #24
 8009938:	f7ff ff5c 	bl	80097f4 <read16>
 800993c:	4603      	mov	r3, r0
 800993e:	461a      	mov	r2, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	801a      	strh	r2, [r3, #0]
    *b = read16(TCS34725_BDATAL);
 8009944:	201a      	movs	r0, #26
 8009946:	f7ff ff55 	bl	80097f4 <read16>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	801a      	strh	r2, [r3, #0]
    /* Delay time is from page no 16/26 from the datasheet  (256 − ATIME)* 2.4ms */
    delay_ms(50); // Set delay for (256 − 0xEB)* 2.4ms = 50ms
 8009952:	2032      	movs	r0, #50	@ 0x32
 8009954:	f7f7 fddc 	bl	8001510 <delay_ms>
}
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	200005b9 	.word	0x200005b9

08009964 <normalizeRGB>:

/* Get Red, Green and Blue color from Raw Data */
void normalizeRGB(float *R, float *G, float *B, uint16_t rawRed, uint16_t rawGreen, uint16_t rawBlue, uint16_t rawClear)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	807b      	strh	r3, [r7, #2]
    if (rawClear == 0)
 8009972:	8c3b      	ldrh	r3, [r7, #32]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10c      	bne.n	8009992 <normalizeRGB+0x2e>
    {
        *R = 0;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f04f 0200 	mov.w	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
        *G = 0;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	601a      	str	r2, [r3, #0]
        *B = 0;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f04f 0200 	mov.w	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
    {
        *R = (float)rawRed / rawClear;
        *G = (float)rawGreen / rawClear;
        *B = (float)rawBlue / rawClear;
    }
}
 8009990:	e02c      	b.n	80099ec <normalizeRGB+0x88>
        *R = (float)rawRed / rawClear;
 8009992:	887b      	ldrh	r3, [r7, #2]
 8009994:	ee07 3a90 	vmov	s15, r3
 8009998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999c:	8c3b      	ldrh	r3, [r7, #32]
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	edc3 7a00 	vstr	s15, [r3]
        *G = (float)rawGreen / rawClear;
 80099b0:	8b3b      	ldrh	r3, [r7, #24]
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ba:	8c3b      	ldrh	r3, [r7, #32]
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	edc3 7a00 	vstr	s15, [r3]
        *B = (float)rawBlue / rawClear;
 80099ce:	8bbb      	ldrh	r3, [r7, #28]
 80099d0:	ee07 3a90 	vmov	s15, r3
 80099d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d8:	8c3b      	ldrh	r3, [r7, #32]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	edc3 7a00 	vstr	s15, [r3]
}
 80099ec:	bf00      	nop
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <identify_Ball_O_W>:
ColorType identify_Ball_O_W(float R, float G, float B)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a02:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a06:	ed87 1a01 	vstr	s2, [r7, #4]
    // Determine the dominant color
    if (R > B)
 8009a0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1a:	dd01      	ble.n	8009a20 <identify_Ball_O_W+0x28>
    {
        return COLOR_ORANGE;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e014      	b.n	8009a4a <identify_Ball_O_W+0x52>
    }
    else if (B > R || R == B)
 8009a20:	ed97 7a01 	vldr	s14, [r7, #4]
 8009a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a30:	dc08      	bgt.n	8009a44 <identify_Ball_O_W+0x4c>
 8009a32:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a36:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8009a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a42:	d101      	bne.n	8009a48 <identify_Ball_O_W+0x50>
    {
        return COLOR_WHITE; // Green is dominant
 8009a44:	2301      	movs	r3, #1
 8009a46:	e000      	b.n	8009a4a <identify_Ball_O_W+0x52>
    }
    else
    {
        // If no clear dominant color, return unknown
        return COLOR_UNKNOWN;
 8009a48:	2300      	movs	r3, #0
    }
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <identify_BOXES>:
ColorType identify_BOXES(float R, float G, float B)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a60:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a64:	ed87 1a01 	vstr	s2, [r7, #4]
    // Determine the dominant color
    if (R > G && R > B)
 8009a68:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a78:	dd0a      	ble.n	8009a90 <identify_BOXES+0x3a>
 8009a7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8a:	dd01      	ble.n	8009a90 <identify_BOXES+0x3a>
    {
        return COLOR_RED; // Red is dominant
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e000      	b.n	8009a92 <identify_BOXES+0x3c>
    }
    else 
    {
        return COLOR_BLUE; // Blue is dominant
 8009a90:	2305      	movs	r3, #5
    }
    
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
	...

08009aa0 <identify_PADS>:

ColorType identify_PADS(float R, float G, float B)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	ed87 0a03 	vstr	s0, [r7, #12]
 8009aaa:	edc7 0a02 	vstr	s1, [r7, #8]
 8009aae:	ed87 1a01 	vstr	s2, [r7, #4]
    // Determine the dominant color
    if (R > G && R > B)
 8009ab2:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ab6:	edd7 7a02 	vldr	s15, [r7, #8]
 8009aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac2:	dd0a      	ble.n	8009ada <identify_PADS+0x3a>
 8009ac4:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8009acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad4:	dd01      	ble.n	8009ada <identify_PADS+0x3a>
    {
        return COLOR_RED; // Red is dominant
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e021      	b.n	8009b1e <identify_PADS+0x7e>
    }
    else if (G > 0.45)
 8009ada:	68b8      	ldr	r0, [r7, #8]
 8009adc:	f7f6 fd34 	bl	8000548 <__aeabi_f2d>
 8009ae0:	a311      	add	r3, pc, #68	@ (adr r3, 8009b28 <identify_PADS+0x88>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f7 f817 	bl	8000b18 <__aeabi_dcmpgt>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <identify_PADS+0x54>
    {
        return COLOR_GREEN; // Green is dominant
 8009af0:	2304      	movs	r3, #4
 8009af2:	e014      	b.n	8009b1e <identify_PADS+0x7e>
    }
    else if (B > R && B > G)
 8009af4:	ed97 7a01 	vldr	s14, [r7, #4]
 8009af8:	edd7 7a03 	vldr	s15, [r7, #12]
 8009afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b04:	dd0a      	ble.n	8009b1c <identify_PADS+0x7c>
 8009b06:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b16:	dd01      	ble.n	8009b1c <identify_PADS+0x7c>
    {
        return COLOR_BLUE; // Blue is dominant
 8009b18:	2305      	movs	r3, #5
 8009b1a:	e000      	b.n	8009b1e <identify_PADS+0x7e>
    }
    else
    {
        // If no clear dominant color, return unknown
        return COLOR_UNKNOWN;
 8009b1c:	2300      	movs	r3, #0
    }
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	cccccccd 	.word	0xcccccccd
 8009b2c:	3fdccccc 	.word	0x3fdccccc

08009b30 <Top_C_BALL_Sensor>:

void Top_C_BALL_Sensor()
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af04      	add	r7, sp, #16
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8009b36:	463b      	mov	r3, r7
 8009b38:	1cba      	adds	r2, r7, #2
 8009b3a:	1d39      	adds	r1, r7, #4
 8009b3c:	1db8      	adds	r0, r7, #6
 8009b3e:	f7ff fedf 	bl	8009900 <getRawData>

    normalizeRGB(&R, &G, &B, rawRed, rawGreen, rawBlue, rawClear);
 8009b42:	88f8      	ldrh	r0, [r7, #6]
 8009b44:	88bb      	ldrh	r3, [r7, #4]
 8009b46:	887a      	ldrh	r2, [r7, #2]
 8009b48:	8839      	ldrh	r1, [r7, #0]
 8009b4a:	9102      	str	r1, [sp, #8]
 8009b4c:	9201      	str	r2, [sp, #4]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4603      	mov	r3, r0
 8009b52:	4a0f      	ldr	r2, [pc, #60]	@ (8009b90 <Top_C_BALL_Sensor+0x60>)
 8009b54:	490f      	ldr	r1, [pc, #60]	@ (8009b94 <Top_C_BALL_Sensor+0x64>)
 8009b56:	4810      	ldr	r0, [pc, #64]	@ (8009b98 <Top_C_BALL_Sensor+0x68>)
 8009b58:	f7ff ff04 	bl	8009964 <normalizeRGB>
    topColor = identify_Ball_O_W(R, G, B);
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b98 <Top_C_BALL_Sensor+0x68>)
 8009b5e:	edd3 7a00 	vldr	s15, [r3]
 8009b62:	4b0c      	ldr	r3, [pc, #48]	@ (8009b94 <Top_C_BALL_Sensor+0x64>)
 8009b64:	ed93 7a00 	vldr	s14, [r3]
 8009b68:	4b09      	ldr	r3, [pc, #36]	@ (8009b90 <Top_C_BALL_Sensor+0x60>)
 8009b6a:	edd3 6a00 	vldr	s13, [r3]
 8009b6e:	eeb0 1a66 	vmov.f32	s2, s13
 8009b72:	eef0 0a47 	vmov.f32	s1, s14
 8009b76:	eeb0 0a67 	vmov.f32	s0, s15
 8009b7a:	f7ff ff3d 	bl	80099f8 <identify_Ball_O_W>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	4b06      	ldr	r3, [pc, #24]	@ (8009b9c <Top_C_BALL_Sensor+0x6c>)
 8009b84:	701a      	strb	r2, [r3, #0]
    // Handle the identified color (e.g., print or store it)
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	200005c4 	.word	0x200005c4
 8009b94:	200005c0 	.word	0x200005c0
 8009b98:	200005bc 	.word	0x200005bc
 8009b9c:	200005c8 	.word	0x200005c8

08009ba0 <Top_C_BOX_Sensor>:
void Top_C_BOX_Sensor()
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af04      	add	r7, sp, #16
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	1cba      	adds	r2, r7, #2
 8009baa:	1d39      	adds	r1, r7, #4
 8009bac:	1db8      	adds	r0, r7, #6
 8009bae:	f7ff fea7 	bl	8009900 <getRawData>

    normalizeRGB(&R, &G, &B, rawRed, rawGreen, rawBlue, rawClear);
 8009bb2:	88f8      	ldrh	r0, [r7, #6]
 8009bb4:	88bb      	ldrh	r3, [r7, #4]
 8009bb6:	887a      	ldrh	r2, [r7, #2]
 8009bb8:	8839      	ldrh	r1, [r7, #0]
 8009bba:	9102      	str	r1, [sp, #8]
 8009bbc:	9201      	str	r2, [sp, #4]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8009c00 <Top_C_BOX_Sensor+0x60>)
 8009bc4:	490f      	ldr	r1, [pc, #60]	@ (8009c04 <Top_C_BOX_Sensor+0x64>)
 8009bc6:	4810      	ldr	r0, [pc, #64]	@ (8009c08 <Top_C_BOX_Sensor+0x68>)
 8009bc8:	f7ff fecc 	bl	8009964 <normalizeRGB>
    boxColor = identify_BOXES(R, G, B);
 8009bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8009c08 <Top_C_BOX_Sensor+0x68>)
 8009bce:	edd3 7a00 	vldr	s15, [r3]
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <Top_C_BOX_Sensor+0x64>)
 8009bd4:	ed93 7a00 	vldr	s14, [r3]
 8009bd8:	4b09      	ldr	r3, [pc, #36]	@ (8009c00 <Top_C_BOX_Sensor+0x60>)
 8009bda:	edd3 6a00 	vldr	s13, [r3]
 8009bde:	eeb0 1a66 	vmov.f32	s2, s13
 8009be2:	eef0 0a47 	vmov.f32	s1, s14
 8009be6:	eeb0 0a67 	vmov.f32	s0, s15
 8009bea:	f7ff ff34 	bl	8009a56 <identify_BOXES>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <Top_C_BOX_Sensor+0x6c>)
 8009bf4:	701a      	strb	r2, [r3, #0]
    // Handle the identified color (e.g., print or store it)
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	200005c4 	.word	0x200005c4
 8009c04:	200005c0 	.word	0x200005c0
 8009c08:	200005bc 	.word	0x200005bc
 8009c0c:	200005c9 	.word	0x200005c9

08009c10 <Bottom_C_PAD_Sensor>:

void Bottom_C_PAD_Sensor()
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af04      	add	r7, sp, #16
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8009c16:	463b      	mov	r3, r7
 8009c18:	1cba      	adds	r2, r7, #2
 8009c1a:	1d39      	adds	r1, r7, #4
 8009c1c:	1db8      	adds	r0, r7, #6
 8009c1e:	f7ff fe6f 	bl	8009900 <getRawData>

    normalizeRGB(&R, &G, &B, rawRed, rawGreen, rawBlue, rawClear);
 8009c22:	88f8      	ldrh	r0, [r7, #6]
 8009c24:	88bb      	ldrh	r3, [r7, #4]
 8009c26:	887a      	ldrh	r2, [r7, #2]
 8009c28:	8839      	ldrh	r1, [r7, #0]
 8009c2a:	9102      	str	r1, [sp, #8]
 8009c2c:	9201      	str	r2, [sp, #4]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4603      	mov	r3, r0
 8009c32:	4a0f      	ldr	r2, [pc, #60]	@ (8009c70 <Bottom_C_PAD_Sensor+0x60>)
 8009c34:	490f      	ldr	r1, [pc, #60]	@ (8009c74 <Bottom_C_PAD_Sensor+0x64>)
 8009c36:	4810      	ldr	r0, [pc, #64]	@ (8009c78 <Bottom_C_PAD_Sensor+0x68>)
 8009c38:	f7ff fe94 	bl	8009964 <normalizeRGB>
    bottomColor = identify_PADS(R, G, B);
 8009c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c78 <Bottom_C_PAD_Sensor+0x68>)
 8009c3e:	edd3 7a00 	vldr	s15, [r3]
 8009c42:	4b0c      	ldr	r3, [pc, #48]	@ (8009c74 <Bottom_C_PAD_Sensor+0x64>)
 8009c44:	ed93 7a00 	vldr	s14, [r3]
 8009c48:	4b09      	ldr	r3, [pc, #36]	@ (8009c70 <Bottom_C_PAD_Sensor+0x60>)
 8009c4a:	edd3 6a00 	vldr	s13, [r3]
 8009c4e:	eeb0 1a66 	vmov.f32	s2, s13
 8009c52:	eef0 0a47 	vmov.f32	s1, s14
 8009c56:	eeb0 0a67 	vmov.f32	s0, s15
 8009c5a:	f7ff ff21 	bl	8009aa0 <identify_PADS>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	4b06      	ldr	r3, [pc, #24]	@ (8009c7c <Bottom_C_PAD_Sensor+0x6c>)
 8009c64:	701a      	strb	r2, [r3, #0]
    // Handle the identified color (e.g., print or store it)
}
 8009c66:	bf00      	nop
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200005c4 	.word	0x200005c4
 8009c74:	200005c0 	.word	0x200005c0
 8009c78:	200005bc 	.word	0x200005bc
 8009c7c:	200005ca 	.word	0x200005ca

08009c80 <kalman>:
extern TIM_HandleTypeDef htim5;

static uint32_t timeout_us = 50000;  // 10 ms timeout in microseconds
static uint32_t elapsed_time = 0;

double kalman(double U) {
 8009c80:	b5b0      	push	{r4, r5, r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	ed87 0b00 	vstr	d0, [r7]
    static double Q = 10;             // Process noise covariance
    static double P = 0;              // Estimation error covariance
    static double U_hat = 0;          // Estimated state
    static double K = 0;              // Kalman gain

    K = P * H / (H * P * H + R);     // Calculate Kalman gain
 8009c8a:	4b44      	ldr	r3, [pc, #272]	@ (8009d9c <kalman+0x11c>)
 8009c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c90:	4b43      	ldr	r3, [pc, #268]	@ (8009da0 <kalman+0x120>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f7f6 fcaf 	bl	80005f8 <__aeabi_dmul>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	461d      	mov	r5, r3
 8009ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8009da0 <kalman+0x120>)
 8009ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8009d9c <kalman+0x11c>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4b39      	ldr	r3, [pc, #228]	@ (8009da0 <kalman+0x120>)
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4b35      	ldr	r3, [pc, #212]	@ (8009da4 <kalman+0x124>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fadb 	bl	800028c <__adddf3>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7f6 fdb5 	bl	800084c <__aeabi_ddiv>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4930      	ldr	r1, [pc, #192]	@ (8009da8 <kalman+0x128>)
 8009ce8:	e9c1 2300 	strd	r2, r3, [r1]
    U_hat += K * (U - H * U_hat);     // Update estimate
 8009cec:	4b2c      	ldr	r3, [pc, #176]	@ (8009da0 <kalman+0x120>)
 8009cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8009dac <kalman+0x12c>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fc7e 	bl	80005f8 <__aeabi_dmul>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d04:	f7f6 fac0 	bl	8000288 <__aeabi_dsub>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4b25      	ldr	r3, [pc, #148]	@ (8009da8 <kalman+0x128>)
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fc6f 	bl	80005f8 <__aeabi_dmul>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	4b22      	ldr	r3, [pc, #136]	@ (8009dac <kalman+0x12c>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fab0 	bl	800028c <__adddf3>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	491e      	ldr	r1, [pc, #120]	@ (8009dac <kalman+0x12c>)
 8009d32:	e9c1 2300 	strd	r2, r3, [r1]
    P = (1 - K * H) * P + Q;         // Update estimation error covariance
 8009d36:	4b1c      	ldr	r3, [pc, #112]	@ (8009da8 <kalman+0x128>)
 8009d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d3c:	4b18      	ldr	r3, [pc, #96]	@ (8009da0 <kalman+0x120>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fc59 	bl	80005f8 <__aeabi_dmul>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	f04f 0000 	mov.w	r0, #0
 8009d4e:	4918      	ldr	r1, [pc, #96]	@ (8009db0 <kalman+0x130>)
 8009d50:	f7f6 fa9a 	bl	8000288 <__aeabi_dsub>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d9c <kalman+0x11c>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fc49 	bl	80005f8 <__aeabi_dmul>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4b11      	ldr	r3, [pc, #68]	@ (8009db4 <kalman+0x134>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa8a 	bl	800028c <__adddf3>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4907      	ldr	r1, [pc, #28]	@ (8009d9c <kalman+0x11c>)
 8009d7e:	e9c1 2300 	strd	r2, r3, [r1]

    return U_hat;                     // Return filtered value
 8009d82:	4b0a      	ldr	r3, [pc, #40]	@ (8009dac <kalman+0x12c>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	ec43 2b17 	vmov	d7, r2, r3
}
 8009d8c:	eeb0 0a47 	vmov.f32	s0, s14
 8009d90:	eef0 0a67 	vmov.f32	s1, s15
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bdb0      	pop	{r4, r5, r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200005d0 	.word	0x200005d0
 8009da0:	080112e8 	.word	0x080112e8
 8009da4:	080112f0 	.word	0x080112f0
 8009da8:	200005d8 	.word	0x200005d8
 8009dac:	200005e0 	.word	0x200005e0
 8009db0:	3ff00000 	.word	0x3ff00000
 8009db4:	20000048 	.word	0x20000048

08009db8 <Ultrasonic_Init>:

void Ultrasonic_Init(void) {
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 8009dbc:	4805      	ldr	r0, [pc, #20]	@ (8009dd4 <Ultrasonic_Init+0x1c>)
 8009dbe:	f005 fc5f 	bl	800f680 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009dc8:	4803      	ldr	r0, [pc, #12]	@ (8009dd8 <Ultrasonic_Init+0x20>)
 8009dca:	f003 faef 	bl	800d3ac <HAL_GPIO_WritePin>
}
 8009dce:	bf00      	nop
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000032c 	.word	0x2000032c
 8009dd8:	40020400 	.word	0x40020400
 8009ddc:	00000000 	.word	0x00000000

08009de0 <Ultrasonic_GetDistance>:


uint32_t Ultrasonic_GetDistance(uint8_t sensor) {
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
    uint32_t Value1 = 0, Value2 = 0, Distance = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	61bb      	str	r3, [r7, #24]
 8009dee:	2300      	movs	r3, #0
 8009df0:	617b      	str	r3, [r7, #20]
 8009df2:	2300      	movs	r3, #0
 8009df4:	613b      	str	r3, [r7, #16]
    uint16_t echo_pin;

    switch (sensor) {
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d00d      	beq.n	8009e18 <Ultrasonic_GetDistance+0x38>
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	dc0f      	bgt.n	8009e20 <Ultrasonic_GetDistance+0x40>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <Ultrasonic_GetDistance+0x2a>
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d003      	beq.n	8009e10 <Ultrasonic_GetDistance+0x30>
 8009e08:	e00a      	b.n	8009e20 <Ultrasonic_GetDistance+0x40>
        case 0:
            echo_pin = GPIO_PIN_2;
 8009e0a:	2304      	movs	r3, #4
 8009e0c:	83fb      	strh	r3, [r7, #30]
            break;
 8009e0e:	e009      	b.n	8009e24 <Ultrasonic_GetDistance+0x44>
        case 1:
            echo_pin = GPIO_PIN_12;
 8009e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e14:	83fb      	strh	r3, [r7, #30]
            break;
 8009e16:	e005      	b.n	8009e24 <Ultrasonic_GetDistance+0x44>
        case 2:
            echo_pin = GPIO_PIN_13;
 8009e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e1c:	83fb      	strh	r3, [r7, #30]
            break;
 8009e1e:	e001      	b.n	8009e24 <Ultrasonic_GetDistance+0x44>
        default:
            return 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	e077      	b.n	8009f14 <Ultrasonic_GetDistance+0x134>
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // Pull the TRIG pin HIGH
 8009e24:	2201      	movs	r2, #1
 8009e26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009e2a:	483f      	ldr	r0, [pc, #252]	@ (8009f28 <Ultrasonic_GetDistance+0x148>)
 8009e2c:	f003 fabe 	bl	800d3ac <HAL_GPIO_WritePin>
    delay_us(10);
 8009e30:	200a      	movs	r0, #10
 8009e32:	f7f7 fb53 	bl	80014dc <delay_us>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8009e36:	2200      	movs	r2, #0
 8009e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009e3c:	483a      	ldr	r0, [pc, #232]	@ (8009f28 <Ultrasonic_GetDistance+0x148>)
 8009e3e:	f003 fab5 	bl	800d3ac <HAL_GPIO_WritePin>
    
    // Wait for the echo pin to go HIGH
    elapsed_time = 0;
 8009e42:	4b3a      	ldr	r3, [pc, #232]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
    while (!(HAL_GPIO_ReadPin(GPIOB, echo_pin)) && (elapsed_time < timeout_us)) {
 8009e48:	e007      	b.n	8009e5a <Ultrasonic_GetDistance+0x7a>
        delay_us(1);
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	f7f7 fb46 	bl	80014dc <delay_us>
        elapsed_time++;
 8009e50:	4b36      	ldr	r3, [pc, #216]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	4a35      	ldr	r2, [pc, #212]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009e58:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin(GPIOB, echo_pin)) && (elapsed_time < timeout_us)) {
 8009e5a:	8bfb      	ldrh	r3, [r7, #30]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4832      	ldr	r0, [pc, #200]	@ (8009f28 <Ultrasonic_GetDistance+0x148>)
 8009e60:	f003 fa8c 	bl	800d37c <HAL_GPIO_ReadPin>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <Ultrasonic_GetDistance+0x96>
 8009e6a:	4b30      	ldr	r3, [pc, #192]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4b30      	ldr	r3, [pc, #192]	@ (8009f30 <Ultrasonic_GetDistance+0x150>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d3e9      	bcc.n	8009e4a <Ultrasonic_GetDistance+0x6a>
    }
    Value1 = __HAL_TIM_GET_COUNTER(&htim5);
 8009e76:	4b2f      	ldr	r3, [pc, #188]	@ (8009f34 <Ultrasonic_GetDistance+0x154>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7c:	61bb      	str	r3, [r7, #24]

    // Wait for the echo pin to go LOW
    elapsed_time = 0;
 8009e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
    while ((HAL_GPIO_ReadPin(GPIOB, echo_pin)) && (elapsed_time < timeout_us)) {
 8009e84:	e007      	b.n	8009e96 <Ultrasonic_GetDistance+0xb6>
        delay_us(1);
 8009e86:	2001      	movs	r0, #1
 8009e88:	f7f7 fb28 	bl	80014dc <delay_us>
        elapsed_time++;
 8009e8c:	4b27      	ldr	r3, [pc, #156]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3301      	adds	r3, #1
 8009e92:	4a26      	ldr	r2, [pc, #152]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009e94:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(GPIOB, echo_pin)) && (elapsed_time < timeout_us)) {
 8009e96:	8bfb      	ldrh	r3, [r7, #30]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4823      	ldr	r0, [pc, #140]	@ (8009f28 <Ultrasonic_GetDistance+0x148>)
 8009e9c:	f003 fa6e 	bl	800d37c <HAL_GPIO_ReadPin>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d005      	beq.n	8009eb2 <Ultrasonic_GetDistance+0xd2>
 8009ea6:	4b21      	ldr	r3, [pc, #132]	@ (8009f2c <Ultrasonic_GetDistance+0x14c>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b21      	ldr	r3, [pc, #132]	@ (8009f30 <Ultrasonic_GetDistance+0x150>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d3e9      	bcc.n	8009e86 <Ultrasonic_GetDistance+0xa6>
    }
    Value2 = __HAL_TIM_GET_COUNTER(&htim5);
 8009eb2:	4b20      	ldr	r3, [pc, #128]	@ (8009f34 <Ultrasonic_GetDistance+0x154>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	617b      	str	r3, [r7, #20]
    Distance = (Value2 - Value1) * 0.34 / 2; // Calculate distance in cm
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7f6 fb1f 	bl	8000504 <__aeabi_ui2d>
 8009ec6:	a316      	add	r3, pc, #88	@ (adr r3, 8009f20 <Ultrasonic_GetDistance+0x140>)
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f7f6 fb94 	bl	80005f8 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	f04f 0200 	mov.w	r2, #0
 8009edc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ee0:	f7f6 fcb4 	bl	800084c <__aeabi_ddiv>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4619      	mov	r1, r3
 8009eec:	f7f6 fe46 	bl	8000b7c <__aeabi_d2uiz>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	613b      	str	r3, [r7, #16]
    double filtered_distance = kalman((double)Distance);
 8009ef4:	6938      	ldr	r0, [r7, #16]
 8009ef6:	f7f6 fb05 	bl	8000504 <__aeabi_ui2d>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	ec43 2b10 	vmov	d0, r2, r3
 8009f02:	f7ff febd 	bl	8009c80 <kalman>
 8009f06:	ed87 0b02 	vstr	d0, [r7, #8]

    return (uint32_t)filtered_distance; // Return the filtered distance
 8009f0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f0e:	f7f6 fe35 	bl	8000b7c <__aeabi_d2uiz>
 8009f12:	4603      	mov	r3, r0
    return Distance;
 8009f14:	4618      	mov	r0, r3
 8009f16:	3720      	adds	r7, #32
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	f3af 8000 	nop.w
 8009f20:	5c28f5c3 	.word	0x5c28f5c3
 8009f24:	3fd5c28f 	.word	0x3fd5c28f
 8009f28:	40020400 	.word	0x40020400
 8009f2c:	200005cc 	.word	0x200005cc
 8009f30:	20000044 	.word	0x20000044
 8009f34:	2000032c 	.word	0x2000032c

08009f38 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af02      	add	r7, sp, #8
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	461a      	mov	r2, r3
 8009f66:	4603      	mov	r3, r0
 8009f68:	817b      	strh	r3, [r7, #10]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	813b      	strh	r3, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8009f78:	74fb      	strb	r3, [r7, #19]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8009f7a:	7cfb      	ldrb	r3, [r7, #19]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bf0c      	ite	eq
 8009f80:	2301      	moveq	r3, #1
 8009f82:	2300      	movne	r3, #0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	74bb      	strb	r3, [r7, #18]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8009f88:	897a      	ldrh	r2, [r7, #10]
 8009f8a:	88fb      	ldrh	r3, [r7, #6]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	b298      	uxth	r0, r3
 8009f90:	893b      	ldrh	r3, [r7, #8]
 8009f92:	3301      	adds	r3, #1
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	893a      	ldrh	r2, [r7, #8]
 8009f98:	8979      	ldrh	r1, [r7, #10]
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f001 f8c5 	bl	800b12e <u8g2_IsIntersection>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d062      	beq.n	800a070 <u8g2_DrawHXBM+0x118>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8009faa:	2301      	movs	r3, #1
 8009fac:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8009fae:	e057      	b.n	800a060 <u8g2_DrawHXBM+0x108>
    uint8_t current_bit = (*b) & mask;
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	781a      	ldrb	r2, [r3, #0]
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	747b      	strb	r3, [r7, #17]
      mask = 1;
      b++;
    }
    len--;
#else
    u8g2_uint_t run_length = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	82bb      	strh	r3, [r7, #20]
    // Determine the run length of consecutive bits with the same color
    while (len > 0 && (current_bit == 0 ? (((*b) & mask) == 0) : (((*b) & mask) != 0 )  ))
 8009fbe:	e013      	b.n	8009fe8 <u8g2_DrawHXBM+0x90>
    {
        run_length++;
 8009fc0:	8abb      	ldrh	r3, [r7, #20]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	82bb      	strh	r3, [r7, #20]
        x++;
 8009fc6:	897b      	ldrh	r3, [r7, #10]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	817b      	strh	r3, [r7, #10]
        mask <<= 1;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	75fb      	strb	r3, [r7, #23]
        if (mask == 0)
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d104      	bne.n	8009fe2 <u8g2_DrawHXBM+0x8a>
        {
            mask = 1;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
            b++;
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	623b      	str	r3, [r7, #32]
        }
        len--;
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	80fb      	strh	r3, [r7, #6]
    while (len > 0 && (current_bit == 0 ? (((*b) & mask) == 0) : (((*b) & mask) != 0 )  ))
 8009fe8:	88fb      	ldrh	r3, [r7, #6]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d011      	beq.n	800a012 <u8g2_DrawHXBM+0xba>
 8009fee:	7c7b      	ldrb	r3, [r7, #17]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d107      	bne.n	800a004 <u8g2_DrawHXBM+0xac>
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0de      	beq.n	8009fc0 <u8g2_DrawHXBM+0x68>
 800a002:	e006      	b.n	800a012 <u8g2_DrawHXBM+0xba>
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	4013      	ands	r3, r2
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1d6      	bne.n	8009fc0 <u8g2_DrawHXBM+0x68>
    }
    if (current_bit)
 800a012:	7c7b      	ldrb	r3, [r7, #17]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00f      	beq.n	800a038 <u8g2_DrawHXBM+0xe0>
    {
        u8g2->draw_color = color;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	7cfa      	ldrb	r2, [r7, #19]
 800a01c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 800a020:	897a      	ldrh	r2, [r7, #10]
 800a022:	8abb      	ldrh	r3, [r7, #20]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	b299      	uxth	r1, r3
 800a028:	8abb      	ldrh	r3, [r7, #20]
 800a02a:	893a      	ldrh	r2, [r7, #8]
 800a02c:	2000      	movs	r0, #0
 800a02e:	9000      	str	r0, [sp, #0]
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 ff74 	bl	800af1e <u8g2_DrawHVLine>
 800a036:	e013      	b.n	800a060 <u8g2_DrawHXBM+0x108>
    }
    else if (u8g2->bitmap_transparency == 0)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10e      	bne.n	800a060 <u8g2_DrawHXBM+0x108>
    {
        u8g2->draw_color = ncolor;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	7cba      	ldrb	r2, [r7, #18]
 800a046:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 800a04a:	897a      	ldrh	r2, [r7, #10]
 800a04c:	8abb      	ldrh	r3, [r7, #20]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	b299      	uxth	r1, r3
 800a052:	8abb      	ldrh	r3, [r7, #20]
 800a054:	893a      	ldrh	r2, [r7, #8]
 800a056:	2000      	movs	r0, #0
 800a058:	9000      	str	r0, [sp, #0]
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 ff5f 	bl	800af1e <u8g2_DrawHVLine>
  while(len > 0) {
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1a4      	bne.n	8009fb0 <u8g2_DrawHXBM+0x58>
    }
#endif
  }
  u8g2->draw_color = color;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	7cfa      	ldrb	r2, [r7, #19]
 800a06a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 800a06e:	e000      	b.n	800a072 <u8g2_DrawHXBM+0x11a>
    return;
 800a070:	bf00      	nop
}
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	4608      	mov	r0, r1
 800a082:	4611      	mov	r1, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4603      	mov	r3, r0
 800a088:	817b      	strh	r3, [r7, #10]
 800a08a:	460b      	mov	r3, r1
 800a08c:	813b      	strh	r3, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 800a096:	8afb      	ldrh	r3, [r7, #22]
 800a098:	3307      	adds	r3, #7
 800a09a:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 800a09c:	8afb      	ldrh	r3, [r7, #22]
 800a09e:	08db      	lsrs	r3, r3, #3
 800a0a0:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800a0a2:	897a      	ldrh	r2, [r7, #10]
 800a0a4:	88fb      	ldrh	r3, [r7, #6]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	b298      	uxth	r0, r3
 800a0aa:	893a      	ldrh	r2, [r7, #8]
 800a0ac:	8c3b      	ldrh	r3, [r7, #32]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	893a      	ldrh	r2, [r7, #8]
 800a0b4:	8979      	ldrh	r1, [r7, #10]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f001 f837 	bl	800b12e <u8g2_IsIntersection>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d017      	beq.n	800a0f6 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800a0c6:	e012      	b.n	800a0ee <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800a0c8:	88f8      	ldrh	r0, [r7, #6]
 800a0ca:	893a      	ldrh	r2, [r7, #8]
 800a0cc:	8979      	ldrh	r1, [r7, #10]
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7ff ff3f 	bl	8009f58 <u8g2_DrawHXBM>
    bitmap += blen;
 800a0da:	8afb      	ldrh	r3, [r7, #22]
 800a0dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0de:	4413      	add	r3, r2
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 800a0e2:	893b      	ldrh	r3, [r7, #8]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	813b      	strh	r3, [r7, #8]
    h--;
 800a0e8:	8c3b      	ldrh	r3, [r7, #32]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800a0ee:	8c3b      	ldrh	r3, [r7, #32]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e9      	bne.n	800a0c8 <u8g2_DrawXBM+0x50>
 800a0f4:	e000      	b.n	800a0f8 <u8g2_DrawXBM+0x80>
    return;
 800a0f6:	bf00      	nop
  }
}
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b086      	sub	sp, #24
 800a102:	af02      	add	r7, sp, #8
 800a104:	60f8      	str	r0, [r7, #12]
 800a106:	4608      	mov	r0, r1
 800a108:	4611      	mov	r1, r2
 800a10a:	461a      	mov	r2, r3
 800a10c:	4603      	mov	r3, r0
 800a10e:	817b      	strh	r3, [r7, #10]
 800a110:	460b      	mov	r3, r1
 800a112:	813b      	strh	r3, [r7, #8]
 800a114:	4613      	mov	r3, r2
 800a116:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800a118:	897a      	ldrh	r2, [r7, #10]
 800a11a:	88fb      	ldrh	r3, [r7, #6]
 800a11c:	4413      	add	r3, r2
 800a11e:	b298      	uxth	r0, r3
 800a120:	893a      	ldrh	r2, [r7, #8]
 800a122:	8b3b      	ldrh	r3, [r7, #24]
 800a124:	4413      	add	r3, r2
 800a126:	b29b      	uxth	r3, r3
 800a128:	893a      	ldrh	r2, [r7, #8]
 800a12a:	8979      	ldrh	r1, [r7, #10]
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	4603      	mov	r3, r0
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 fffc 	bl	800b12e <u8g2_IsIntersection>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d012      	beq.n	800a162 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800a13c:	e00d      	b.n	800a15a <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	893a      	ldrh	r2, [r7, #8]
 800a142:	8979      	ldrh	r1, [r7, #10]
 800a144:	2000      	movs	r0, #0
 800a146:	9000      	str	r0, [sp, #0]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fee8 	bl	800af1e <u8g2_DrawHVLine>
    y++;    
 800a14e:	893b      	ldrh	r3, [r7, #8]
 800a150:	3301      	adds	r3, #1
 800a152:	813b      	strh	r3, [r7, #8]
    h--;
 800a154:	8b3b      	ldrh	r3, [r7, #24]
 800a156:	3b01      	subs	r3, #1
 800a158:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 800a15a:	8b3b      	ldrh	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1ee      	bne.n	800a13e <u8g2_DrawBox+0x40>
 800a160:	e000      	b.n	800a164 <u8g2_DrawBox+0x66>
    return;
 800a162:	bf00      	nop
  }
}
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	7c1b      	ldrb	r3, [r3, #16]
 800a178:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a180:	461a      	mov	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	fb02 f303 	mul.w	r3, r2, r3
 800a188:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f006 fb95 	bl	80108c8 <memset>
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af02      	add	r7, sp, #8
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	7c1b      	ldrb	r3, [r3, #16]
 800a1bc:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c6:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	89ba      	ldrh	r2, [r7, #12]
 800a1ce:	fb12 f303 	smulbb	r3, r2, r3
 800a1d2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800a1d4:	89bb      	ldrh	r3, [r7, #12]
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800a1da:	89bb      	ldrh	r3, [r7, #12]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	4413      	add	r3, r2
 800a1e0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800a1e2:	7bf9      	ldrb	r1, [r7, #15]
 800a1e4:	78ba      	ldrb	r2, [r7, #2]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f001 fd47 	bl	800bc82 <u8x8_DrawTile>
}
 800a1f4:	bf00      	nop
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a20e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a216:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	7c5b      	ldrb	r3, [r3, #17]
 800a21e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800a220:	7bba      	ldrb	r2, [r7, #14]
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff ffbd 	bl	800a1a6 <u8g2_send_tile_row>
    src_row++;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	3301      	adds	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	3301      	adds	r3, #1
 800a236:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800a238:	7bfa      	ldrb	r2, [r7, #15]
 800a23a:	7b7b      	ldrb	r3, [r7, #13]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d203      	bcs.n	800a248 <u8g2_send_buffer+0x4c>
 800a240:	7bba      	ldrb	r2, [r7, #14]
 800a242:	7b3b      	ldrb	r3, [r7, #12]
 800a244:	429a      	cmp	r2, r3
 800a246:	d3eb      	bcc.n	800a220 <u8g2_send_buffer+0x24>
}
 800a248:	bf00      	nop
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ffcf 	bl	800a1fc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 fd60 	bl	800bd24 <u8x8_RefreshDisplay>
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2208      	movs	r2, #8
 800a278:	701a      	strb	r2, [r3, #0]
  return buf;
 800a27a:	4b03      	ldr	r3, [pc, #12]	@ (800a288 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	200005e8 	.word	0x200005e8

0800a28c <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af02      	add	r7, sp, #8
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a0b      	ldr	r2, [pc, #44]	@ (800a2d0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 800a2a2:	490c      	ldr	r1, [pc, #48]	@ (800a2d4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f001 fd9d 	bl	800bde4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800a2aa:	f107 0313 	add.w	r3, r7, #19
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff ffdc 	bl	800a26c <u8g2_m_16_8_f>
 800a2b4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800a2b6:	7cfa      	ldrb	r2, [r7, #19]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	4b06      	ldr	r3, [pc, #24]	@ (800a2d8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 800a2be:	6979      	ldr	r1, [r7, #20]
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f001 f8b8 	bl	800b436 <u8g2_SetupBuffer>
}
 800a2c6:	bf00      	nop
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800b921 	.word	0x0800b921
 800a2d4:	0800bb7d 	.word	0x0800bb7d
 800a2d8:	0800b2b9 	.word	0x0800b2b9

0800a2dc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800a2e8:	78fb      	ldrb	r3, [r7, #3]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	4413      	add	r3, r2
 800a312:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	81fb      	strh	r3, [r7, #14]
    font++;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3301      	adds	r3, #1
 800a31e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800a320:	89fb      	ldrh	r3, [r7, #14]
 800a322:	021b      	lsls	r3, r3, #8
 800a324:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	89fb      	ldrh	r3, [r7, #14]
 800a32e:	4413      	add	r3, r2
 800a330:	81fb      	strh	r3, [r7, #14]
    return pos;
 800a332:	89fb      	ldrh	r3, [r7, #14]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800a34a:	2100      	movs	r1, #0
 800a34c:	6838      	ldr	r0, [r7, #0]
 800a34e:	f7ff ffc5 	bl	800a2dc <u8g2_font_get_byte>
 800a352:	4603      	mov	r3, r0
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800a35a:	2101      	movs	r1, #1
 800a35c:	6838      	ldr	r0, [r7, #0]
 800a35e:	f7ff ffbd 	bl	800a2dc <u8g2_font_get_byte>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800a36a:	2102      	movs	r1, #2
 800a36c:	6838      	ldr	r0, [r7, #0]
 800a36e:	f7ff ffb5 	bl	800a2dc <u8g2_font_get_byte>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800a37a:	2103      	movs	r1, #3
 800a37c:	6838      	ldr	r0, [r7, #0]
 800a37e:	f7ff ffad 	bl	800a2dc <u8g2_font_get_byte>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800a38a:	2104      	movs	r1, #4
 800a38c:	6838      	ldr	r0, [r7, #0]
 800a38e:	f7ff ffa5 	bl	800a2dc <u8g2_font_get_byte>
 800a392:	4603      	mov	r3, r0
 800a394:	461a      	mov	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800a39a:	2105      	movs	r1, #5
 800a39c:	6838      	ldr	r0, [r7, #0]
 800a39e:	f7ff ff9d 	bl	800a2dc <u8g2_font_get_byte>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800a3aa:	2106      	movs	r1, #6
 800a3ac:	6838      	ldr	r0, [r7, #0]
 800a3ae:	f7ff ff95 	bl	800a2dc <u8g2_font_get_byte>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800a3ba:	2107      	movs	r1, #7
 800a3bc:	6838      	ldr	r0, [r7, #0]
 800a3be:	f7ff ff8d 	bl	800a2dc <u8g2_font_get_byte>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800a3ca:	2108      	movs	r1, #8
 800a3cc:	6838      	ldr	r0, [r7, #0]
 800a3ce:	f7ff ff85 	bl	800a2dc <u8g2_font_get_byte>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800a3da:	2109      	movs	r1, #9
 800a3dc:	6838      	ldr	r0, [r7, #0]
 800a3de:	f7ff ff7d 	bl	800a2dc <u8g2_font_get_byte>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	b25a      	sxtb	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800a3ea:	210a      	movs	r1, #10
 800a3ec:	6838      	ldr	r0, [r7, #0]
 800a3ee:	f7ff ff75 	bl	800a2dc <u8g2_font_get_byte>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	b25a      	sxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800a3fa:	210b      	movs	r1, #11
 800a3fc:	6838      	ldr	r0, [r7, #0]
 800a3fe:	f7ff ff6d 	bl	800a2dc <u8g2_font_get_byte>
 800a402:	4603      	mov	r3, r0
 800a404:	b25a      	sxtb	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800a40a:	210c      	movs	r1, #12
 800a40c:	6838      	ldr	r0, [r7, #0]
 800a40e:	f7ff ff65 	bl	800a2dc <u8g2_font_get_byte>
 800a412:	4603      	mov	r3, r0
 800a414:	b25a      	sxtb	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800a41a:	210d      	movs	r1, #13
 800a41c:	6838      	ldr	r0, [r7, #0]
 800a41e:	f7ff ff5d 	bl	800a2dc <u8g2_font_get_byte>
 800a422:	4603      	mov	r3, r0
 800a424:	b25a      	sxtb	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800a42a:	210e      	movs	r1, #14
 800a42c:	6838      	ldr	r0, [r7, #0]
 800a42e:	f7ff ff55 	bl	800a2dc <u8g2_font_get_byte>
 800a432:	4603      	mov	r3, r0
 800a434:	b25a      	sxtb	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800a43a:	210f      	movs	r1, #15
 800a43c:	6838      	ldr	r0, [r7, #0]
 800a43e:	f7ff ff4d 	bl	800a2dc <u8g2_font_get_byte>
 800a442:	4603      	mov	r3, r0
 800a444:	b25a      	sxtb	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800a44a:	2110      	movs	r1, #16
 800a44c:	6838      	ldr	r0, [r7, #0]
 800a44e:	f7ff ff45 	bl	800a2dc <u8g2_font_get_byte>
 800a452:	4603      	mov	r3, r0
 800a454:	b25a      	sxtb	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800a45a:	2111      	movs	r1, #17
 800a45c:	6838      	ldr	r0, [r7, #0]
 800a45e:	f7ff ff4f 	bl	800a300 <u8g2_font_get_word>
 800a462:	4603      	mov	r3, r0
 800a464:	461a      	mov	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800a46a:	2113      	movs	r1, #19
 800a46c:	6838      	ldr	r0, [r7, #0]
 800a46e:	f7ff ff47 	bl	800a300 <u8g2_font_get_word>
 800a472:	4603      	mov	r3, r0
 800a474:	461a      	mov	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800a47a:	2115      	movs	r1, #21
 800a47c:	6838      	ldr	r0, [r7, #0]
 800a47e:	f7ff ff3f 	bl	800a300 <u8g2_font_get_word>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	82da      	strh	r2, [r3, #22]
#endif
}
 800a48a:	bf00      	nop
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800a492:	b480      	push	{r7}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	7b1b      	ldrb	r3, [r3, #12]
 800a4a2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800a4ac:	7bfa      	ldrb	r2, [r7, #15]
 800a4ae:	7b7b      	ldrb	r3, [r7, #13]
 800a4b0:	fa42 f303 	asr.w	r3, r2, r3
 800a4b4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800a4b6:	7b7b      	ldrb	r3, [r7, #13]
 800a4b8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800a4ba:	7bba      	ldrb	r2, [r7, #14]
 800a4bc:	78fb      	ldrb	r3, [r7, #3]
 800a4be:	4413      	add	r3, r2
 800a4c0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	2b07      	cmp	r3, #7
 800a4c6:	d91a      	bls.n	800a4fe <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800a4cc:	7b3a      	ldrb	r2, [r7, #12]
 800a4ce:	7b7b      	ldrb	r3, [r7, #13]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	7b3b      	ldrb	r3, [r7, #12]
 800a4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ec:	b25a      	sxtb	r2, r3
 800a4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	b25b      	sxtb	r3, r3
 800a4f6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	3b08      	subs	r3, #8
 800a4fc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	f04f 32ff 	mov.w	r2, #4294967295
 800a504:	fa02 f303 	lsl.w	r3, r2, r3
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	43db      	mvns	r3, r3
 800a50c:	b2da      	uxtb	r2, r3
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	4013      	ands	r3, r2
 800a512:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7bba      	ldrb	r2, [r7, #14]
 800a518:	731a      	strb	r2, [r3, #12]
  return val;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff ffaa 	bl	800a492 <u8g2_font_decode_get_unsigned_bits>
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800a542:	2301      	movs	r3, #1
 800a544:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	3b01      	subs	r3, #1
 800a54a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800a54c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	fa02 f303 	lsl.w	r3, r2, r3
 800a556:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800a558:	7bfa      	ldrb	r2, [r7, #15]
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	73fb      	strb	r3, [r7, #15]
  return v;
 800a562:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800a56e:	b490      	push	{r4, r7}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	4604      	mov	r4, r0
 800a576:	4608      	mov	r0, r1
 800a578:	4611      	mov	r1, r2
 800a57a:	461a      	mov	r2, r3
 800a57c:	4623      	mov	r3, r4
 800a57e:	80fb      	strh	r3, [r7, #6]
 800a580:	4603      	mov	r3, r0
 800a582:	717b      	strb	r3, [r7, #5]
 800a584:	460b      	mov	r3, r1
 800a586:	713b      	strb	r3, [r7, #4]
 800a588:	4613      	mov	r3, r2
 800a58a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d014      	beq.n	800a5bc <u8g2_add_vector_y+0x4e>
 800a592:	2b02      	cmp	r3, #2
 800a594:	dc19      	bgt.n	800a5ca <u8g2_add_vector_y+0x5c>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <u8g2_add_vector_y+0x32>
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d007      	beq.n	800a5ae <u8g2_add_vector_y+0x40>
 800a59e:	e014      	b.n	800a5ca <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800a5a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	80fb      	strh	r3, [r7, #6]
      break;
 800a5ac:	e014      	b.n	800a5d8 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800a5ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	88fb      	ldrh	r3, [r7, #6]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	80fb      	strh	r3, [r7, #6]
      break;
 800a5ba:	e00d      	b.n	800a5d8 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800a5bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	88fa      	ldrh	r2, [r7, #6]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	80fb      	strh	r3, [r7, #6]
      break;
 800a5c8:	e006      	b.n	800a5d8 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800a5ca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	88fa      	ldrh	r2, [r7, #6]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	80fb      	strh	r3, [r7, #6]
      break;      
 800a5d6:	bf00      	nop
  }
  return dy;
 800a5d8:	88fb      	ldrh	r3, [r7, #6]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc90      	pop	{r4, r7}
 800a5e2:	4770      	bx	lr

0800a5e4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800a5e4:	b490      	push	{r4, r7}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	4608      	mov	r0, r1
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4623      	mov	r3, r4
 800a5f4:	80fb      	strh	r3, [r7, #6]
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	717b      	strb	r3, [r7, #5]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	713b      	strb	r3, [r7, #4]
 800a5fe:	4613      	mov	r3, r2
 800a600:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	2b02      	cmp	r3, #2
 800a606:	d014      	beq.n	800a632 <u8g2_add_vector_x+0x4e>
 800a608:	2b02      	cmp	r3, #2
 800a60a:	dc19      	bgt.n	800a640 <u8g2_add_vector_x+0x5c>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <u8g2_add_vector_x+0x32>
 800a610:	2b01      	cmp	r3, #1
 800a612:	d007      	beq.n	800a624 <u8g2_add_vector_x+0x40>
 800a614:	e014      	b.n	800a640 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800a616:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	88fb      	ldrh	r3, [r7, #6]
 800a61e:	4413      	add	r3, r2
 800a620:	80fb      	strh	r3, [r7, #6]
      break;
 800a622:	e014      	b.n	800a64e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800a624:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	88fa      	ldrh	r2, [r7, #6]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	80fb      	strh	r3, [r7, #6]
      break;
 800a630:	e00d      	b.n	800a64e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800a632:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a636:	b29b      	uxth	r3, r3
 800a638:	88fa      	ldrh	r2, [r7, #6]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	80fb      	strh	r3, [r7, #6]
      break;
 800a63e:	e006      	b.n	800a64e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800a640:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a644:	b29a      	uxth	r2, r3
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	4413      	add	r3, r2
 800a64a:	80fb      	strh	r3, [r7, #6]
      break;      
 800a64c:	bf00      	nop
  }
  return dx;
 800a64e:	88fb      	ldrh	r3, [r7, #6]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bc90      	pop	{r4, r7}
 800a658:	4770      	bx	lr

0800a65a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b088      	sub	sp, #32
 800a65e:	af02      	add	r7, sp, #8
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	460b      	mov	r3, r1
 800a664:	70fb      	strb	r3, [r7, #3]
 800a666:	4613      	mov	r3, r2
 800a668:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3360      	adds	r3, #96	@ 0x60
 800a66e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a67a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a682:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a68a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800a68c:	7bfa      	ldrb	r2, [r7, #15]
 800a68e:	7d7b      	ldrb	r3, [r7, #21]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800a698:	7dfa      	ldrb	r2, [r7, #23]
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d201      	bcs.n	800a6a4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	889b      	ldrh	r3, [r3, #4]
 800a6a8:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	88db      	ldrh	r3, [r3, #6]
 800a6ae:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800a6b0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800a6b4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	7c1b      	ldrb	r3, [r3, #16]
 800a6bc:	89b8      	ldrh	r0, [r7, #12]
 800a6be:	f7ff ff91 	bl	800a5e4 <u8g2_add_vector_x>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800a6c6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800a6ca:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	7c1b      	ldrb	r3, [r3, #16]
 800a6d2:	8978      	ldrh	r0, [r7, #10]
 800a6d4:	f7ff ff4b 	bl	800a56e <u8g2_add_vector_y>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800a6dc:	78bb      	ldrb	r3, [r7, #2]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d010      	beq.n	800a704 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	7b9a      	ldrb	r2, [r3, #14]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800a6ec:	7dbb      	ldrb	r3, [r7, #22]
 800a6ee:	b298      	uxth	r0, r3
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	7c1b      	ldrb	r3, [r3, #16]
 800a6f4:	897a      	ldrh	r2, [r7, #10]
 800a6f6:	89b9      	ldrh	r1, [r7, #12]
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fc0e 	bl	800af1e <u8g2_DrawHVLine>
 800a702:	e013      	b.n	800a72c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	7b5b      	ldrb	r3, [r3, #13]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10f      	bne.n	800a72c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	7bda      	ldrb	r2, [r3, #15]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800a716:	7dbb      	ldrb	r3, [r7, #22]
 800a718:	b298      	uxth	r0, r3
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	7c1b      	ldrb	r3, [r3, #16]
 800a71e:	897a      	ldrh	r2, [r7, #10]
 800a720:	89b9      	ldrh	r1, [r7, #12]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4603      	mov	r3, r0
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fbf9 	bl	800af1e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800a72c:	7dfa      	ldrb	r2, [r7, #23]
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
 800a730:	429a      	cmp	r2, r3
 800a732:	d309      	bcc.n	800a748 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800a734:	7dfa      	ldrb	r2, [r7, #23]
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	757b      	strb	r3, [r7, #21]
    ly++;
 800a740:	7d3b      	ldrb	r3, [r7, #20]
 800a742:	3301      	adds	r3, #1
 800a744:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800a746:	e79d      	b.n	800a684 <u8g2_font_decode_len+0x2a>
      break;
 800a748:	bf00      	nop
  }
  lx += cnt;
 800a74a:	7d7a      	ldrb	r2, [r7, #21]
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	4413      	add	r3, r2
 800a750:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800a752:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800a75a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	725a      	strb	r2, [r3, #9]
}
 800a762:	bf00      	nop
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3360      	adds	r3, #96	@ 0x60
 800a778:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800a78c:	4619      	mov	r1, r3
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7ff fe7f 	bl	800a492 <u8g2_font_decode_get_unsigned_bits>
 800a794:	4603      	mov	r3, r0
 800a796:	b25a      	sxtb	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff fe74 	bl	800a492 <u8g2_font_decode_get_unsigned_bits>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	b25a      	sxtb	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	7b9b      	ldrb	r3, [r3, #14]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bf0c      	ite	eq
 800a7c4:	2301      	moveq	r3, #1
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	73da      	strb	r2, [r3, #15]
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08a      	sub	sp, #40	@ 0x28
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3360      	adds	r3, #96	@ 0x60
 800a7e6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff ffbd 	bl	800a76a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800a7f6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800a7fe:	4619      	mov	r1, r3
 800a800:	6978      	ldr	r0, [r7, #20]
 800a802:	f7ff fe91 	bl	800a528 <u8g2_font_decode_get_signed_bits>
 800a806:	4603      	mov	r3, r0
 800a808:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 800a810:	4619      	mov	r1, r3
 800a812:	6978      	ldr	r0, [r7, #20]
 800a814:	f7ff fe88 	bl	800a528 <u8g2_font_decode_get_signed_bits>
 800a818:	4603      	mov	r3, r0
 800a81a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a822:	4619      	mov	r1, r3
 800a824:	6978      	ldr	r0, [r7, #20]
 800a826:	f7ff fe7f 	bl	800a528 <u8g2_font_decode_get_signed_bits>
 800a82a:	4603      	mov	r3, r0
 800a82c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f340 80d7 	ble.w	800a9e8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	8898      	ldrh	r0, [r3, #4]
 800a83e:	7cfa      	ldrb	r2, [r7, #19]
 800a840:	7c7b      	ldrb	r3, [r7, #17]
 800a842:	4413      	add	r3, r2
 800a844:	b2db      	uxtb	r3, r3
 800a846:	425b      	negs	r3, r3
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	b25a      	sxtb	r2, r3
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	7c1b      	ldrb	r3, [r3, #16]
 800a850:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800a854:	f7ff fec6 	bl	800a5e4 <u8g2_add_vector_x>
 800a858:	4603      	mov	r3, r0
 800a85a:	461a      	mov	r2, r3
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	88d8      	ldrh	r0, [r3, #6]
 800a864:	7cfa      	ldrb	r2, [r7, #19]
 800a866:	7c7b      	ldrb	r3, [r7, #17]
 800a868:	4413      	add	r3, r2
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	425b      	negs	r3, r3
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	b25a      	sxtb	r2, r3
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	7c1b      	ldrb	r3, [r3, #16]
 800a876:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800a87a:	f7ff fe78 	bl	800a56e <u8g2_add_vector_y>
 800a87e:	4603      	mov	r3, r0
 800a880:	461a      	mov	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	889b      	ldrh	r3, [r3, #4]
 800a88a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	88db      	ldrh	r3, [r3, #6]
 800a890:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 800a892:	8bfb      	ldrh	r3, [r7, #30]
 800a894:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800a896:	8b7b      	ldrh	r3, [r7, #26]
 800a898:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	7c1b      	ldrb	r3, [r3, #16]
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d85a      	bhi.n	800a958 <u8g2_font_decode_glyph+0x180>
 800a8a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a8 <u8g2_font_decode_glyph+0xd0>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8b9 	.word	0x0800a8b9
 800a8ac:	0800a8d5 	.word	0x0800a8d5
 800a8b0:	0800a8fd 	.word	0x0800a8fd
 800a8b4:	0800a931 	.word	0x0800a931
      {
	case 0:
	    x1 += decode->glyph_width;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	8bbb      	ldrh	r3, [r7, #28]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800a8c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	8b3b      	ldrh	r3, [r7, #24]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	833b      	strh	r3, [r7, #24]
	    break;
 800a8d2:	e041      	b.n	800a958 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 800a8d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	8bfa      	ldrh	r2, [r7, #30]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a8e0:	8bfb      	ldrh	r3, [r7, #30]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800a8e6:	8bbb      	ldrh	r3, [r7, #28]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	8b3b      	ldrh	r3, [r7, #24]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	833b      	strh	r3, [r7, #24]
	    break;
 800a8fa:	e02d      	b.n	800a958 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a902:	b29b      	uxth	r3, r3
 800a904:	8bfa      	ldrh	r2, [r7, #30]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a90a:	8bfb      	ldrh	r3, [r7, #30]
 800a90c:	3301      	adds	r3, #1
 800a90e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800a910:	8bbb      	ldrh	r3, [r7, #28]
 800a912:	3301      	adds	r3, #1
 800a914:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800a916:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	8b7a      	ldrh	r2, [r7, #26]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a922:	8b7b      	ldrh	r3, [r7, #26]
 800a924:	3301      	adds	r3, #1
 800a926:	837b      	strh	r3, [r7, #26]
	    y1++;
 800a928:	8b3b      	ldrh	r3, [r7, #24]
 800a92a:	3301      	adds	r3, #1
 800a92c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800a92e:	e013      	b.n	800a958 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800a930:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a934:	b29a      	uxth	r2, r3
 800a936:	8bbb      	ldrh	r3, [r7, #28]
 800a938:	4413      	add	r3, r2
 800a93a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a942:	b29b      	uxth	r3, r3
 800a944:	8b7a      	ldrh	r2, [r7, #26]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800a94a:	8b7b      	ldrh	r3, [r7, #26]
 800a94c:	3301      	adds	r3, #1
 800a94e:	837b      	strh	r3, [r7, #26]
	    y1++;
 800a950:	8b3b      	ldrh	r3, [r7, #24]
 800a952:	3301      	adds	r3, #1
 800a954:	833b      	strh	r3, [r7, #24]
	    break;	  
 800a956:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800a958:	8bb8      	ldrh	r0, [r7, #28]
 800a95a:	8b7a      	ldrh	r2, [r7, #26]
 800a95c:	8bf9      	ldrh	r1, [r7, #30]
 800a95e:	8b3b      	ldrh	r3, [r7, #24]
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	4603      	mov	r3, r0
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fbe2 	bl	800b12e <u8g2_IsIntersection>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <u8g2_font_decode_glyph+0x19e>
	return d;
 800a970:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800a974:	e03a      	b.n	800a9ec <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2200      	movs	r2, #0
 800a97a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2200      	movs	r2, #0
 800a980:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800a988:	4619      	mov	r1, r3
 800a98a:	6978      	ldr	r0, [r7, #20]
 800a98c:	f7ff fd81 	bl	800a492 <u8g2_font_decode_get_unsigned_bits>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800a99a:	4619      	mov	r1, r3
 800a99c:	6978      	ldr	r0, [r7, #20]
 800a99e:	f7ff fd78 	bl	800a492 <u8g2_font_decode_get_unsigned_bits>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff fe54 	bl	800a65a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7ff fe4e 	bl	800a65a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800a9be:	2101      	movs	r1, #1
 800a9c0:	6978      	ldr	r0, [r7, #20]
 800a9c2:	f7ff fd66 	bl	800a492 <u8g2_font_decode_get_unsigned_bits>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1ec      	bne.n	800a9a6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a9d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	dd00      	ble.n	800a9dc <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800a9da:	e7d2      	b.n	800a982 <u8g2_font_decode_glyph+0x1aa>
	break;
 800a9dc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	7b9a      	ldrb	r2, [r3, #14]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 800a9e8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3720      	adds	r7, #32
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa04:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	3317      	adds	r3, #23
 800aa0a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800aa0c:	887b      	ldrh	r3, [r7, #2]
 800aa0e:	2bff      	cmp	r3, #255	@ 0xff
 800aa10:	d82a      	bhi.n	800aa68 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800aa12:	887b      	ldrh	r3, [r7, #2]
 800aa14:	2b60      	cmp	r3, #96	@ 0x60
 800aa16:	d907      	bls.n	800aa28 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800aa1e:	461a      	mov	r2, r3
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	4413      	add	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	e009      	b.n	800aa3c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800aa28:	887b      	ldrh	r3, [r7, #2]
 800aa2a:	2b40      	cmp	r3, #64	@ 0x40
 800aa2c:	d906      	bls.n	800aa3c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800aa34:	461a      	mov	r2, r3
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	4413      	add	r3, r2
 800aa3a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d04e      	beq.n	800aae4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	887b      	ldrh	r3, [r7, #2]
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d102      	bne.n	800aa58 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	3302      	adds	r3, #2
 800aa56:	e049      	b.n	800aaec <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	4413      	add	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800aa66:	e7e9      	b.n	800aa3c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800aa6e:	461a      	mov	r2, r3
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	4413      	add	r3, r2
 800aa74:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	6938      	ldr	r0, [r7, #16]
 800aa7e:	f7ff fc3f 	bl	800a300 <u8g2_font_get_word>
 800aa82:	4603      	mov	r3, r0
 800aa84:	461a      	mov	r2, r3
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	4413      	add	r3, r2
 800aa8a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800aa8c:	2102      	movs	r1, #2
 800aa8e:	6938      	ldr	r0, [r7, #16]
 800aa90:	f7ff fc36 	bl	800a300 <u8g2_font_get_word>
 800aa94:	4603      	mov	r3, r0
 800aa96:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800aa9e:	89fa      	ldrh	r2, [r7, #14]
 800aaa0:	887b      	ldrh	r3, [r7, #2]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d3e9      	bcc.n	800aa7a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800aaac:	89fb      	ldrh	r3, [r7, #14]
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	3301      	adds	r3, #1
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	89fb      	ldrh	r3, [r7, #14]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d010      	beq.n	800aae8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800aac6:	89fa      	ldrh	r2, [r7, #14]
 800aac8:	887b      	ldrh	r3, [r7, #2]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d102      	bne.n	800aad4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	3303      	adds	r3, #3
 800aad2:	e00b      	b.n	800aaec <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3302      	adds	r3, #2
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	4413      	add	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800aae2:	e7e0      	b.n	800aaa6 <u8g2_font_get_glyph_data+0xb2>
	break;
 800aae4:	bf00      	nop
 800aae6:	e000      	b.n	800aaea <u8g2_font_get_glyph_data+0xf6>
	break;
 800aae8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	4608      	mov	r0, r1
 800aafe:	4611      	mov	r1, r2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4603      	mov	r3, r0
 800ab04:	817b      	strh	r3, [r7, #10]
 800ab06:	460b      	mov	r3, r1
 800ab08:	813b      	strh	r3, [r7, #8]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	897a      	ldrh	r2, [r7, #10]
 800ab16:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	893a      	ldrh	r2, [r7, #8]
 800ab1e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800ab22:	88fb      	ldrh	r3, [r7, #6]
 800ab24:	4619      	mov	r1, r3
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff ff64 	bl	800a9f4 <u8g2_font_get_glyph_data>
 800ab2c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d005      	beq.n	800ab40 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800ab34:	6939      	ldr	r1, [r7, #16]
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7ff fe4e 	bl	800a7d8 <u8g2_font_decode_glyph>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800ab40:	8afb      	ldrh	r3, [r7, #22]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	78fa      	ldrb	r2, [r7, #3]
 800ab5a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	4608      	mov	r0, r1
 800ab76:	4611      	mov	r1, r2
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	817b      	strh	r3, [r7, #10]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	813b      	strh	r3, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d833      	bhi.n	800abf8 <u8g2_DrawGlyph+0x8c>
 800ab90:	a201      	add	r2, pc, #4	@ (adr r2, 800ab98 <u8g2_DrawGlyph+0x2c>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800aba9 	.word	0x0800aba9
 800ab9c:	0800abbd 	.word	0x0800abbd
 800aba0:	0800abd1 	.word	0x0800abd1
 800aba4:	0800abe5 	.word	0x0800abe5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	4798      	blx	r3
 800abb0:	4603      	mov	r3, r0
 800abb2:	461a      	mov	r2, r3
 800abb4:	893b      	ldrh	r3, [r7, #8]
 800abb6:	4413      	add	r3, r2
 800abb8:	813b      	strh	r3, [r7, #8]
      break;
 800abba:	e01d      	b.n	800abf8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	4798      	blx	r3
 800abc4:	4603      	mov	r3, r0
 800abc6:	461a      	mov	r2, r3
 800abc8:	897b      	ldrh	r3, [r7, #10]
 800abca:	1a9b      	subs	r3, r3, r2
 800abcc:	817b      	strh	r3, [r7, #10]
      break;
 800abce:	e013      	b.n	800abf8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	4798      	blx	r3
 800abd8:	4603      	mov	r3, r0
 800abda:	461a      	mov	r2, r3
 800abdc:	893b      	ldrh	r3, [r7, #8]
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	813b      	strh	r3, [r7, #8]
      break;
 800abe2:	e009      	b.n	800abf8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	4798      	blx	r3
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	897b      	ldrh	r3, [r7, #10]
 800abf2:	4413      	add	r3, r2
 800abf4:	817b      	strh	r3, [r7, #10]
      break;
 800abf6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	893a      	ldrh	r2, [r7, #8]
 800abfc:	8979      	ldrh	r1, [r7, #10]
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f7ff ff78 	bl	800aaf4 <u8g2_font_draw_glyph>
 800ac04:	4603      	mov	r3, r0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop

0800ac10 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	607b      	str	r3, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	817b      	strh	r3, [r7, #10]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f000 fd4d 	bl	800b6c2 <u8x8_utf8_init>
  sum = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	7812      	ldrb	r2, [r2, #0]
 800ac34:	4611      	mov	r1, r2
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	4798      	blx	r3
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800ac3e:	8abb      	ldrh	r3, [r7, #20]
 800ac40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d038      	beq.n	800acba <u8g2_draw_string+0xaa>
      break;
    str++;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800ac4e:	8abb      	ldrh	r3, [r7, #20]
 800ac50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d0e9      	beq.n	800ac2c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800ac58:	8abb      	ldrh	r3, [r7, #20]
 800ac5a:	893a      	ldrh	r2, [r7, #8]
 800ac5c:	8979      	ldrh	r1, [r7, #10]
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7ff ff84 	bl	800ab6c <u8g2_DrawGlyph>
 800ac64:	4603      	mov	r3, r0
 800ac66:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d81e      	bhi.n	800acb0 <u8g2_draw_string+0xa0>
 800ac72:	a201      	add	r2, pc, #4	@ (adr r2, 800ac78 <u8g2_draw_string+0x68>)
 800ac74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac78:	0800ac89 	.word	0x0800ac89
 800ac7c:	0800ac93 	.word	0x0800ac93
 800ac80:	0800ac9d 	.word	0x0800ac9d
 800ac84:	0800aca7 	.word	0x0800aca7
      {
	case 0:
	  x += delta;
 800ac88:	897a      	ldrh	r2, [r7, #10]
 800ac8a:	8a7b      	ldrh	r3, [r7, #18]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	817b      	strh	r3, [r7, #10]
	  break;
 800ac90:	e00e      	b.n	800acb0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800ac92:	893a      	ldrh	r2, [r7, #8]
 800ac94:	8a7b      	ldrh	r3, [r7, #18]
 800ac96:	4413      	add	r3, r2
 800ac98:	813b      	strh	r3, [r7, #8]
	  break;
 800ac9a:	e009      	b.n	800acb0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800ac9c:	897a      	ldrh	r2, [r7, #10]
 800ac9e:	8a7b      	ldrh	r3, [r7, #18]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	817b      	strh	r3, [r7, #10]
	  break;
 800aca4:	e004      	b.n	800acb0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800aca6:	893a      	ldrh	r2, [r7, #8]
 800aca8:	8a7b      	ldrh	r3, [r7, #18]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	813b      	strh	r3, [r7, #8]
	  break;
 800acae:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800acb0:	8afa      	ldrh	r2, [r7, #22]
 800acb2:	8a7b      	ldrh	r3, [r7, #18]
 800acb4:	4413      	add	r3, r2
 800acb6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800acb8:	e7b8      	b.n	800ac2c <u8g2_draw_string+0x1c>
      break;
 800acba:	bf00      	nop
    }
  }
  return sum;
 800acbc:	8afb      	ldrh	r3, [r7, #22]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop

0800acc8 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	607b      	str	r3, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	817b      	strh	r3, [r7, #10]
 800acd6:	4613      	mov	r3, r2
 800acd8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4a06      	ldr	r2, [pc, #24]	@ (800acf8 <u8g2_DrawStr+0x30>)
 800acde:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800ace0:	893a      	ldrh	r2, [r7, #8]
 800ace2:	8979      	ldrh	r1, [r7, #10]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff ff92 	bl	800ac10 <u8g2_draw_string>
 800acec:	4603      	mov	r3, r0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	0800b6df 	.word	0x0800b6df

0800acfc <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d05d      	beq.n	800adc8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d04d      	beq.n	800adca <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d11c      	bne.n	800ad72 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 800ad44:	429a      	cmp	r2, r3
 800ad46:	da05      	bge.n	800ad54 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 800ad60:	429a      	cmp	r2, r3
 800ad62:	dd32      	ble.n	800adca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 800ad70:	e02b      	b.n	800adca <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 800ad78:	461a      	mov	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 800ad80:	4619      	mov	r1, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800ad88:	440b      	add	r3, r1
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	da0d      	bge.n	800adaa <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	4413      	add	r3, r2
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	b25a      	sxtb	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800adb6:	429a      	cmp	r2, r3
 800adb8:	dd07      	ble.n	800adca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 800adc6:	e000      	b.n	800adca <u8g2_UpdateRefHeight+0xce>
    return;
 800adc8:	bf00      	nop
  }  
}
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  return 0;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
	...

0800adec <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a04      	ldr	r2, [pc, #16]	@ (800ae08 <u8g2_SetFontPosBaseline+0x1c>)
 800adf8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	0800add5 	.word	0x0800add5

0800ae0c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d00b      	beq.n	800ae38 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3374      	adds	r3, #116	@ 0x74
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff fa87 	bl	800a340 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff ff62 	bl	800acfc <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b087      	sub	sp, #28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	460b      	mov	r3, r1
 800ae50:	80fb      	strh	r3, [r7, #6]
 800ae52:	4613      	mov	r3, r2
 800ae54:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 800ae5c:	8afb      	ldrh	r3, [r7, #22]
 800ae5e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	881a      	ldrh	r2, [r3, #0]
 800ae64:	8abb      	ldrh	r3, [r7, #20]
 800ae66:	4413      	add	r3, r2
 800ae68:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800ae6a:	8afa      	ldrh	r2, [r7, #22]
 800ae6c:	8abb      	ldrh	r3, [r7, #20]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d90b      	bls.n	800ae8a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800ae72:	8afa      	ldrh	r2, [r7, #22]
 800ae74:	88bb      	ldrh	r3, [r7, #4]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d205      	bcs.n	800ae86 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800ae7a:	88bb      	ldrh	r3, [r7, #4]
 800ae7c:	82bb      	strh	r3, [r7, #20]
      b--;
 800ae7e:	8abb      	ldrh	r3, [r7, #20]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	82bb      	strh	r3, [r7, #20]
 800ae84:	e001      	b.n	800ae8a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800ae86:	88fb      	ldrh	r3, [r7, #6]
 800ae88:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800ae8a:	8afa      	ldrh	r2, [r7, #22]
 800ae8c:	88bb      	ldrh	r3, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d301      	bcc.n	800ae96 <u8g2_clip_intersection2+0x56>
    return 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e01c      	b.n	800aed0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800ae96:	8aba      	ldrh	r2, [r7, #20]
 800ae98:	88fb      	ldrh	r3, [r7, #6]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d801      	bhi.n	800aea2 <u8g2_clip_intersection2+0x62>
    return 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e016      	b.n	800aed0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800aea2:	8afa      	ldrh	r2, [r7, #22]
 800aea4:	88fb      	ldrh	r3, [r7, #6]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d201      	bcs.n	800aeae <u8g2_clip_intersection2+0x6e>
    a = c;
 800aeaa:	88fb      	ldrh	r3, [r7, #6]
 800aeac:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800aeae:	8aba      	ldrh	r2, [r7, #20]
 800aeb0:	88bb      	ldrh	r3, [r7, #4]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d901      	bls.n	800aeba <u8g2_clip_intersection2+0x7a>
    b = d;
 800aeb6:	88bb      	ldrh	r3, [r7, #4]
 800aeb8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8afa      	ldrh	r2, [r7, #22]
 800aebe:	801a      	strh	r2, [r3, #0]
  b -= a;
 800aec0:	8aba      	ldrh	r2, [r7, #20]
 800aec2:	8afb      	ldrh	r3, [r7, #22]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	8aba      	ldrh	r2, [r7, #20]
 800aecc:	801a      	strh	r2, [r3, #0]
  return 1;
 800aece:	2301      	movs	r3, #1
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800aedc:	b590      	push	{r4, r7, lr}
 800aede:	b087      	sub	sp, #28
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	4608      	mov	r0, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	461a      	mov	r2, r3
 800aeea:	4603      	mov	r3, r0
 800aeec:	817b      	strh	r3, [r7, #10]
 800aeee:	460b      	mov	r3, r1
 800aef0:	813b      	strh	r3, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aefa:	893a      	ldrh	r2, [r7, #8]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800af04:	88f8      	ldrh	r0, [r7, #6]
 800af06:	893a      	ldrh	r2, [r7, #8]
 800af08:	8979      	ldrh	r1, [r7, #10]
 800af0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	4603      	mov	r3, r0
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	47a0      	blx	r4
}
 800af16:	bf00      	nop
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd90      	pop	{r4, r7, pc}

0800af1e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800af1e:	b590      	push	{r4, r7, lr}
 800af20:	b087      	sub	sp, #28
 800af22:	af02      	add	r7, sp, #8
 800af24:	60f8      	str	r0, [r7, #12]
 800af26:	4608      	mov	r0, r1
 800af28:	4611      	mov	r1, r2
 800af2a:	461a      	mov	r2, r3
 800af2c:	4603      	mov	r3, r0
 800af2e:	817b      	strh	r3, [r7, #10]
 800af30:	460b      	mov	r3, r1
 800af32:	813b      	strh	r3, [r7, #8]
 800af34:	4613      	mov	r3, r2
 800af36:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d075      	beq.n	800b02e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800af42:	88fb      	ldrh	r3, [r7, #6]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d072      	beq.n	800b02e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800af48:	88fb      	ldrh	r3, [r7, #6]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d91a      	bls.n	800af84 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800af4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af52:	2b02      	cmp	r3, #2
 800af54:	d109      	bne.n	800af6a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800af56:	897a      	ldrh	r2, [r7, #10]
 800af58:	88fb      	ldrh	r3, [r7, #6]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	817b      	strh	r3, [r7, #10]
	  x++;
 800af60:	897b      	ldrh	r3, [r7, #10]
 800af62:	3301      	adds	r3, #1
 800af64:	b29b      	uxth	r3, r3
 800af66:	817b      	strh	r3, [r7, #10]
 800af68:	e00c      	b.n	800af84 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800af6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d108      	bne.n	800af84 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800af72:	893a      	ldrh	r2, [r7, #8]
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	b29b      	uxth	r3, r3
 800af7a:	813b      	strh	r3, [r7, #8]
	  y++;
 800af7c:	893b      	ldrh	r3, [r7, #8]
 800af7e:	3301      	adds	r3, #1
 800af80:	b29b      	uxth	r3, r3
 800af82:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800af84:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800af90:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d11a      	bne.n	800afce <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800af9e:	893b      	ldrh	r3, [r7, #8]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d83b      	bhi.n	800b01c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800afaa:	893b      	ldrh	r3, [r7, #8]
 800afac:	429a      	cmp	r2, r3
 800afae:	d937      	bls.n	800b020 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800afbc:	1db9      	adds	r1, r7, #6
 800afbe:	f107 000a 	add.w	r0, r7, #10
 800afc2:	f7ff ff3d 	bl	800ae40 <u8g2_clip_intersection2>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d11a      	bne.n	800b002 <u8g2_DrawHVLine+0xe4>
	  return;
 800afcc:	e02f      	b.n	800b02e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800afd4:	897b      	ldrh	r3, [r7, #10]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d824      	bhi.n	800b024 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800afe0:	897b      	ldrh	r3, [r7, #10]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d920      	bls.n	800b028 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800aff2:	1db9      	adds	r1, r7, #6
 800aff4:	f107 0008 	add.w	r0, r7, #8
 800aff8:	f7ff ff22 	bl	800ae40 <u8g2_clip_intersection2>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d014      	beq.n	800b02c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b006:	689c      	ldr	r4, [r3, #8]
 800b008:	8979      	ldrh	r1, [r7, #10]
 800b00a:	893a      	ldrh	r2, [r7, #8]
 800b00c:	88f8      	ldrh	r0, [r7, #6]
 800b00e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	4603      	mov	r3, r0
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	47a0      	blx	r4
 800b01a:	e008      	b.n	800b02e <u8g2_DrawHVLine+0x110>
	  return;
 800b01c:	bf00      	nop
 800b01e:	e006      	b.n	800b02e <u8g2_DrawHVLine+0x110>
	  return;
 800b020:	bf00      	nop
 800b022:	e004      	b.n	800b02e <u8g2_DrawHVLine+0x110>
	  return;
 800b024:	bf00      	nop
 800b026:	e002      	b.n	800b02e <u8g2_DrawHVLine+0x110>
	  return;
 800b028:	bf00      	nop
 800b02a:	e000      	b.n	800b02e <u8g2_DrawHVLine+0x110>
	  return;
 800b02c:	bf00      	nop
    }
}
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	bd90      	pop	{r4, r7, pc}

0800b034 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af02      	add	r7, sp, #8
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	807b      	strh	r3, [r7, #2]
 800b040:	4613      	mov	r3, r2
 800b042:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800b04a:	883a      	ldrh	r2, [r7, #0]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d31a      	bcc.n	800b086 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800b056:	883a      	ldrh	r2, [r7, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d216      	bcs.n	800b08a <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b062:	887a      	ldrh	r2, [r7, #2]
 800b064:	429a      	cmp	r2, r3
 800b066:	d312      	bcc.n	800b08e <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b06e:	887a      	ldrh	r2, [r7, #2]
 800b070:	429a      	cmp	r2, r3
 800b072:	d20e      	bcs.n	800b092 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800b074:	883a      	ldrh	r2, [r7, #0]
 800b076:	8879      	ldrh	r1, [r7, #2]
 800b078:	2300      	movs	r3, #0
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	2301      	movs	r3, #1
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff ff4d 	bl	800af1e <u8g2_DrawHVLine>
 800b084:	e006      	b.n	800b094 <u8g2_DrawPixel+0x60>
    return;
 800b086:	bf00      	nop
 800b088:	e004      	b.n	800b094 <u8g2_DrawPixel+0x60>
    return;
 800b08a:	bf00      	nop
 800b08c:	e002      	b.n	800b094 <u8g2_DrawPixel+0x60>
    return;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <u8g2_DrawPixel+0x60>
    return;
 800b092:	bf00      	nop
}
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b083      	sub	sp, #12
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 800b0ae:	78fb      	ldrb	r3, [r7, #3]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d903      	bls.n	800b0bc <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800b0c8:	b490      	push	{r4, r7}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	80fb      	strh	r3, [r7, #6]
 800b0da:	4603      	mov	r3, r0
 800b0dc:	80bb      	strh	r3, [r7, #4]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	807b      	strh	r3, [r7, #2]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 800b0e6:	887a      	ldrh	r2, [r7, #2]
 800b0e8:	88bb      	ldrh	r3, [r7, #4]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d20d      	bcs.n	800b10a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800b0ee:	883a      	ldrh	r2, [r7, #0]
 800b0f0:	88fb      	ldrh	r3, [r7, #6]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d901      	bls.n	800b0fa <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e014      	b.n	800b124 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800b0fa:	887a      	ldrh	r2, [r7, #2]
 800b0fc:	883b      	ldrh	r3, [r7, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d901      	bls.n	800b106 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800b102:	2301      	movs	r3, #1
 800b104:	e00e      	b.n	800b124 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800b106:	2300      	movs	r3, #0
 800b108:	e00c      	b.n	800b124 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800b10a:	883a      	ldrh	r2, [r7, #0]
 800b10c:	88fb      	ldrh	r3, [r7, #6]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d907      	bls.n	800b122 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800b112:	887a      	ldrh	r2, [r7, #2]
 800b114:	883b      	ldrh	r3, [r7, #0]
 800b116:	429a      	cmp	r2, r3
 800b118:	d901      	bls.n	800b11e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e002      	b.n	800b124 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	e000      	b.n	800b124 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800b122:	2300      	movs	r3, #0
    }
  }
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bc90      	pop	{r4, r7}
 800b12c:	4770      	bx	lr

0800b12e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	4608      	mov	r0, r1
 800b138:	4611      	mov	r1, r2
 800b13a:	461a      	mov	r2, r3
 800b13c:	4603      	mov	r3, r0
 800b13e:	817b      	strh	r3, [r7, #10]
 800b140:	460b      	mov	r3, r1
 800b142:	813b      	strh	r3, [r7, #8]
 800b144:	4613      	mov	r3, r2
 800b146:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 800b154:	8b3b      	ldrh	r3, [r7, #24]
 800b156:	893a      	ldrh	r2, [r7, #8]
 800b158:	f7ff ffb6 	bl	800b0c8 <u8g2_is_intersection_decision_tree>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <u8g2_IsIntersection+0x38>
    return 0; 
 800b162:	2300      	movs	r3, #0
 800b164:	e00a      	b.n	800b17c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	897a      	ldrh	r2, [r7, #10]
 800b176:	f7ff ffa7 	bl	800b0c8 <u8g2_is_intersection_decision_tree>
 800b17a:	4603      	mov	r3, r0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	461a      	mov	r2, r3
 800b192:	4603      	mov	r3, r0
 800b194:	817b      	strh	r3, [r7, #10]
 800b196:	460b      	mov	r3, r1
 800b198:	813b      	strh	r3, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800b1a2:	897a      	ldrh	r2, [r7, #10]
 800b1a4:	88fb      	ldrh	r3, [r7, #6]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d904      	bls.n	800b1b4 <u8g2_DrawLine+0x30>
 800b1aa:	897a      	ldrh	r2, [r7, #10]
 800b1ac:	88fb      	ldrh	r3, [r7, #6]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	837b      	strh	r3, [r7, #26]
 800b1b2:	e003      	b.n	800b1bc <u8g2_DrawLine+0x38>
 800b1b4:	88fa      	ldrh	r2, [r7, #6]
 800b1b6:	897b      	ldrh	r3, [r7, #10]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800b1bc:	893a      	ldrh	r2, [r7, #8]
 800b1be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d904      	bls.n	800b1ce <u8g2_DrawLine+0x4a>
 800b1c4:	893a      	ldrh	r2, [r7, #8]
 800b1c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	833b      	strh	r3, [r7, #24]
 800b1cc:	e003      	b.n	800b1d6 <u8g2_DrawLine+0x52>
 800b1ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b1d0:	893b      	ldrh	r3, [r7, #8]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 800b1d6:	8b3a      	ldrh	r2, [r7, #24]
 800b1d8:	8b7b      	ldrh	r3, [r7, #26]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d913      	bls.n	800b206 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 800b1e2:	8b7b      	ldrh	r3, [r7, #26]
 800b1e4:	823b      	strh	r3, [r7, #16]
 800b1e6:	8b3b      	ldrh	r3, [r7, #24]
 800b1e8:	837b      	strh	r3, [r7, #26]
 800b1ea:	8a3b      	ldrh	r3, [r7, #16]
 800b1ec:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 800b1ee:	897b      	ldrh	r3, [r7, #10]
 800b1f0:	823b      	strh	r3, [r7, #16]
 800b1f2:	893b      	ldrh	r3, [r7, #8]
 800b1f4:	817b      	strh	r3, [r7, #10]
 800b1f6:	8a3b      	ldrh	r3, [r7, #16]
 800b1f8:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 800b1fa:	88fb      	ldrh	r3, [r7, #6]
 800b1fc:	823b      	strh	r3, [r7, #16]
 800b1fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b200:	80fb      	strh	r3, [r7, #6]
 800b202:	8a3b      	ldrh	r3, [r7, #16]
 800b204:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  if ( x1 > x2 ) 
 800b206:	897a      	ldrh	r2, [r7, #10]
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d90b      	bls.n	800b226 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800b20e:	897b      	ldrh	r3, [r7, #10]
 800b210:	823b      	strh	r3, [r7, #16]
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	817b      	strh	r3, [r7, #10]
 800b216:	8a3b      	ldrh	r3, [r7, #16]
 800b218:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 800b21a:	893b      	ldrh	r3, [r7, #8]
 800b21c:	823b      	strh	r3, [r7, #16]
 800b21e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b220:	813b      	strh	r3, [r7, #8]
 800b222:	8a3b      	ldrh	r3, [r7, #16]
 800b224:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  err = dx >> 1;
 800b226:	8b7b      	ldrh	r3, [r7, #26]
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800b22e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b230:	893b      	ldrh	r3, [r7, #8]
 800b232:	429a      	cmp	r2, r3
 800b234:	d902      	bls.n	800b23c <u8g2_DrawLine+0xb8>
 800b236:	2301      	movs	r3, #1
 800b238:	82bb      	strh	r3, [r7, #20]
 800b23a:	e002      	b.n	800b242 <u8g2_DrawLine+0xbe>
 800b23c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b240:	82bb      	strh	r3, [r7, #20]
  y = y1;
 800b242:	893b      	ldrh	r3, [r7, #8]
 800b244:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 800b246:	88fb      	ldrh	r3, [r7, #6]
 800b248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d102      	bne.n	800b256 <u8g2_DrawLine+0xd2>
    x2--;
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	3b01      	subs	r3, #1
 800b254:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 800b256:	897b      	ldrh	r3, [r7, #10]
 800b258:	83fb      	strh	r3, [r7, #30]
 800b25a:	e024      	b.n	800b2a6 <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 800b25c:	7cfb      	ldrb	r3, [r7, #19]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d106      	bne.n	800b270 <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 800b262:	8bba      	ldrh	r2, [r7, #28]
 800b264:	8bfb      	ldrh	r3, [r7, #30]
 800b266:	4619      	mov	r1, r3
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fee3 	bl	800b034 <u8g2_DrawPixel>
 800b26e:	e005      	b.n	800b27c <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800b270:	8bfa      	ldrh	r2, [r7, #30]
 800b272:	8bbb      	ldrh	r3, [r7, #28]
 800b274:	4619      	mov	r1, r3
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7ff fedc 	bl	800b034 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 800b27c:	8afa      	ldrh	r2, [r7, #22]
 800b27e:	8b3b      	ldrh	r3, [r7, #24]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	b29b      	uxth	r3, r3
 800b284:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 800b286:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	da08      	bge.n	800b2a0 <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 800b28e:	8aba      	ldrh	r2, [r7, #20]
 800b290:	8bbb      	ldrh	r3, [r7, #28]
 800b292:	4413      	add	r3, r2
 800b294:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 800b296:	8afa      	ldrh	r2, [r7, #22]
 800b298:	8b7b      	ldrh	r3, [r7, #26]
 800b29a:	4413      	add	r3, r2
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 800b2a0:	8bfb      	ldrh	r3, [r7, #30]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	83fb      	strh	r3, [r7, #30]
 800b2a6:	8bfa      	ldrh	r2, [r7, #30]
 800b2a8:	88fb      	ldrh	r3, [r7, #6]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d9d6      	bls.n	800b25c <u8g2_DrawLine+0xd8>
    }
  }
}
 800b2ae:	bf00      	nop
 800b2b0:	bf00      	nop
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b089      	sub	sp, #36	@ 0x24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	817b      	strh	r3, [r7, #10]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	813b      	strh	r3, [r7, #8]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800b2d2:	893b      	ldrh	r3, [r7, #8]
 800b2d4:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800b2d6:	7efb      	ldrb	r3, [r7, #27]
 800b2d8:	f003 0307 	and.w	r3, r3, #7
 800b2dc:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800b2e2:	7e3a      	ldrb	r2, [r7, #24]
 800b2e4:	7efb      	ldrb	r3, [r7, #27]
 800b2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ea:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d801      	bhi.n	800b302 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800b2fe:	7e3b      	ldrb	r3, [r7, #24]
 800b300:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d001      	beq.n	800b310 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800b30c:	7e3b      	ldrb	r3, [r7, #24]
 800b30e:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800b310:	893b      	ldrh	r3, [r7, #8]
 800b312:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800b314:	8afb      	ldrh	r3, [r7, #22]
 800b316:	f023 0307 	bic.w	r3, r3, #7
 800b31a:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	7c1b      	ldrb	r3, [r3, #16]
 800b322:	461a      	mov	r2, r3
 800b324:	8afb      	ldrh	r3, [r7, #22]
 800b326:	fb13 f302 	smulbb	r3, r3, r2
 800b32a:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b330:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800b332:	8afb      	ldrh	r3, [r7, #22]
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	4413      	add	r3, r2
 800b338:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800b33a:	897b      	ldrh	r3, [r7, #10]
 800b33c:	69fa      	ldr	r2, [r7, #28]
 800b33e:	4413      	add	r3, r2
 800b340:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800b342:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b346:	2b00      	cmp	r3, #0
 800b348:	d117      	bne.n	800b37a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	781a      	ldrb	r2, [r3, #0]
 800b34e:	7ebb      	ldrb	r3, [r7, #26]
 800b350:	4313      	orrs	r3, r2
 800b352:	b2da      	uxtb	r2, r3
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	7e7b      	ldrb	r3, [r7, #25]
 800b35e:	4053      	eors	r3, r2
 800b360:	b2da      	uxtb	r2, r3
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	701a      	strb	r2, [r3, #0]
	ptr++;
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	3301      	adds	r3, #1
 800b36a:	61fb      	str	r3, [r7, #28]
	len--;
 800b36c:	88fb      	ldrh	r3, [r7, #6]
 800b36e:	3b01      	subs	r3, #1
 800b370:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800b372:	88fb      	ldrh	r3, [r7, #6]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e8      	bne.n	800b34a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800b378:	e038      	b.n	800b3ec <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	781a      	ldrb	r2, [r3, #0]
 800b37e:	7ebb      	ldrb	r3, [r7, #26]
 800b380:	4313      	orrs	r3, r2
 800b382:	b2da      	uxtb	r2, r3
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	781a      	ldrb	r2, [r3, #0]
 800b38c:	7e7b      	ldrb	r3, [r7, #25]
 800b38e:	4053      	eors	r3, r2
 800b390:	b2da      	uxtb	r2, r3
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800b396:	7efb      	ldrb	r3, [r7, #27]
 800b398:	3301      	adds	r3, #1
 800b39a:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800b39c:	7efb      	ldrb	r3, [r7, #27]
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	76fb      	strb	r3, [r7, #27]
      len--;
 800b3a4:	88fb      	ldrh	r3, [r7, #6]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800b3aa:	7efb      	ldrb	r3, [r7, #27]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d114      	bne.n	800b3da <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d801      	bhi.n	800b3ca <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d008      	beq.n	800b3e6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	767b      	strb	r3, [r7, #25]
 800b3d8:	e005      	b.n	800b3e6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800b3da:	7ebb      	ldrb	r3, [r7, #26]
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800b3e0:	7e7b      	ldrb	r3, [r7, #25]
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1c6      	bne.n	800b37a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800b3ec:	bf00      	nop
 800b3ee:	3724      	adds	r7, #36	@ 0x24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b416:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b420:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	4798      	blx	r3
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	60b9      	str	r1, [r7, #8]
 800b440:	603b      	str	r3, [r7, #0]
 800b442:	4613      	mov	r3, r2
 800b444:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	79fa      	ldrb	r2, [r7, #7]
 800b45c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	69ba      	ldr	r2, [r7, #24]
 800b494:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f7ff ffa9 	bl	800b3f8 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f7ff fca0 	bl	800adec <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800b4b4:	bf00      	nop
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b4d0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800b4d2:	89fb      	ldrh	r3, [r7, #14]
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	89fa      	ldrh	r2, [r7, #14]
 800b4dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	7c1b      	ldrb	r3, [r3, #16]
 800b4e2:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800b4e4:	89fb      	ldrh	r3, [r7, #14]
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	89fa      	ldrh	r2, [r7, #14]
 800b4ee:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b4f6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800b4f8:	89fb      	ldrh	r3, [r7, #14]
 800b4fa:	00db      	lsls	r3, r3, #3
 800b4fc:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	89fa      	ldrh	r2, [r7, #14]
 800b502:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b50a:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800b50c:	89fb      	ldrh	r3, [r7, #14]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800b514:	4413      	add	r3, r2
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	7c52      	ldrb	r2, [r2, #17]
 800b51a:	4293      	cmp	r3, r2
 800b51c:	dd07      	ble.n	800b52e <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	7c5b      	ldrb	r3, [r3, #17]
 800b522:	461a      	mov	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800b52e:	89fb      	ldrh	r3, [r7, #14]
 800b530:	00db      	lsls	r3, r3, #3
 800b532:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800b550:	89fb      	ldrh	r3, [r7, #14]
 800b552:	4413      	add	r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	8a9a      	ldrh	r2, [r3, #20]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	8ada      	ldrh	r2, [r3, #22]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800b570:	bf00      	nop
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af02      	add	r7, sp, #8
 800b582:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	4603      	mov	r3, r0
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7ff fdc4 	bl	800b12e <u8g2_IsIntersection>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d104      	bne.n	800b5b6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800b5b4:	e03b      	b.n	800b62e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d205      	bcs.n	800b5da <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d905      	bls.n	800b5f6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b602:	429a      	cmp	r2, r3
 800b604:	d205      	bcs.n	800b612 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b61e:	429a      	cmp	r2, r3
 800b620:	d905      	bls.n	800b62e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff ff3c 	bl	800b4bc <u8g2_update_dimension_common>
}
 800b644:	bf00      	nop
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff ff7b 	bl	800b57c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b086      	sub	sp, #24
 800b692:	af02      	add	r7, sp, #8
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	461a      	mov	r2, r3
 800b69c:	4603      	mov	r3, r0
 800b69e:	817b      	strh	r3, [r7, #10]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	813b      	strh	r3, [r7, #8]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800b6a8:	88f8      	ldrh	r0, [r7, #6]
 800b6aa:	893a      	ldrh	r2, [r7, #8]
 800b6ac:	8979      	ldrh	r1, [r7, #10]
 800b6ae:	7e3b      	ldrb	r3, [r7, #24]
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f7ff fc11 	bl	800aedc <u8g2_draw_hv_line_2dir>
}
 800b6ba:	bf00      	nop
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800b6ea:	78fb      	ldrb	r3, [r7, #3]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <u8x8_ascii_next+0x18>
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	2b0a      	cmp	r3, #10
 800b6f4:	d102      	bne.n	800b6fc <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800b6f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6fa:	e001      	b.n	800b700 <u8x8_ascii_next+0x22>
  return b;
 800b6fc:	78fb      	ldrb	r3, [r7, #3]
 800b6fe:	b29b      	uxth	r3, r3
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800b70c:	b590      	push	{r4, r7, lr}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	460b      	mov	r3, r1
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	691c      	ldr	r4, [r3, #16]
 800b71e:	7afa      	ldrb	r2, [r7, #11]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2117      	movs	r1, #23
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	47a0      	blx	r4
 800b728:	4603      	mov	r3, r0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd90      	pop	{r4, r7, pc}

0800b732 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b082      	sub	sp, #8
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800b73e:	1cfb      	adds	r3, r7, #3
 800b740:	461a      	mov	r2, r3
 800b742:	2101      	movs	r1, #1
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff ffe1 	bl	800b70c <u8x8_byte_SendBytes>
 800b74a:	4603      	mov	r3, r0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800b754:	b590      	push	{r4, r7, lr}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	691c      	ldr	r4, [r3, #16]
 800b760:	2300      	movs	r3, #0
 800b762:	2200      	movs	r2, #0
 800b764:	2118      	movs	r1, #24
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	47a0      	blx	r4
 800b76a:	4603      	mov	r3, r0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	bd90      	pop	{r4, r7, pc}

0800b774 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	691c      	ldr	r4, [r3, #16]
 800b780:	2300      	movs	r3, #0
 800b782:	2200      	movs	r2, #0
 800b784:	2119      	movs	r1, #25
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	47a0      	blx	r4
 800b78a:	4603      	mov	r3, r0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	bd90      	pop	{r4, r7, pc}

0800b794 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800b794:	b590      	push	{r4, r7, lr}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	68dc      	ldr	r4, [r3, #12]
 800b7a4:	78fa      	ldrb	r2, [r7, #3]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	2115      	movs	r1, #21
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	47a0      	blx	r4
 800b7ae:	4603      	mov	r3, r0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd90      	pop	{r4, r7, pc}

0800b7b8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800b7b8:	b590      	push	{r4, r7, lr}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68dc      	ldr	r4, [r3, #12]
 800b7c8:	78fa      	ldrb	r2, [r7, #3]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	2116      	movs	r1, #22
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	47a0      	blx	r4
 800b7d2:	4603      	mov	r3, r0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd90      	pop	{r4, r7, pc}

0800b7dc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800b7dc:	b590      	push	{r4, r7, lr}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	68dc      	ldr	r4, [r3, #12]
 800b7ee:	7afa      	ldrb	r2, [r7, #11]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2117      	movs	r1, #23
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	47a0      	blx	r4
 800b7f8:	4603      	mov	r3, r0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd90      	pop	{r4, r7, pc}

0800b802 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800b802:	b590      	push	{r4, r7, lr}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68dc      	ldr	r4, [r3, #12]
 800b80e:	2300      	movs	r3, #0
 800b810:	2200      	movs	r2, #0
 800b812:	2118      	movs	r1, #24
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	47a0      	blx	r4
 800b818:	4603      	mov	r3, r0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd90      	pop	{r4, r7, pc}

0800b822 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800b822:	b590      	push	{r4, r7, lr}
 800b824:	b083      	sub	sp, #12
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68dc      	ldr	r4, [r3, #12]
 800b82e:	2300      	movs	r3, #0
 800b830:	2200      	movs	r2, #0
 800b832:	2119      	movs	r1, #25
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	47a0      	blx	r4
 800b838:	4603      	mov	r3, r0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd90      	pop	{r4, r7, pc}

0800b842 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800b842:	b590      	push	{r4, r7, lr}
 800b844:	b085      	sub	sp, #20
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	73fb      	strb	r3, [r7, #15]
    data++;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	3301      	adds	r3, #1
 800b856:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b85c:	d031      	beq.n	800b8c2 <u8x8_cad_SendSequence+0x80>
 800b85e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b860:	dc3d      	bgt.n	800b8de <u8x8_cad_SendSequence+0x9c>
 800b862:	2b19      	cmp	r3, #25
 800b864:	dc3b      	bgt.n	800b8de <u8x8_cad_SendSequence+0x9c>
 800b866:	2b18      	cmp	r3, #24
 800b868:	da23      	bge.n	800b8b2 <u8x8_cad_SendSequence+0x70>
 800b86a:	2b16      	cmp	r3, #22
 800b86c:	dc02      	bgt.n	800b874 <u8x8_cad_SendSequence+0x32>
 800b86e:	2b15      	cmp	r3, #21
 800b870:	da03      	bge.n	800b87a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800b872:	e034      	b.n	800b8de <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800b874:	2b17      	cmp	r3, #23
 800b876:	d00e      	beq.n	800b896 <u8x8_cad_SendSequence+0x54>
	return;
 800b878:	e031      	b.n	800b8de <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68dc      	ldr	r4, [r3, #12]
 800b884:	7bba      	ldrb	r2, [r7, #14]
 800b886:	7bf9      	ldrb	r1, [r7, #15]
 800b888:	2300      	movs	r3, #0
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	47a0      	blx	r4
	  data++;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	3301      	adds	r3, #1
 800b892:	603b      	str	r3, [r7, #0]
	  break;
 800b894:	e022      	b.n	800b8dc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800b89c:	f107 030e 	add.w	r3, r7, #14
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7ff ff99 	bl	800b7dc <u8x8_cad_SendData>
	  data++;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	603b      	str	r3, [r7, #0]
	  break;
 800b8b0:	e014      	b.n	800b8dc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68dc      	ldr	r4, [r3, #12]
 800b8b6:	7bf9      	ldrb	r1, [r7, #15]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	47a0      	blx	r4
	  break;
 800b8c0:	e00c      	b.n	800b8dc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	2129      	movs	r1, #41	@ 0x29
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa37 	bl	800bd42 <u8x8_gpio_call>
	  data++;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	603b      	str	r3, [r7, #0]
	  break;
 800b8da:	bf00      	nop
    cmd = *data;
 800b8dc:	e7b6      	b.n	800b84c <u8x8_cad_SendSequence+0xa>
	return;
 800b8de:	bf00      	nop
    }
  }
}
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd90      	pop	{r4, r7, pc}

0800b8e6 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800b8e6:	b590      	push	{r4, r7, lr}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	607a      	str	r2, [r7, #4]
 800b8f2:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff ff2d 	bl	800b754 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800b8fa:	2140      	movs	r1, #64	@ 0x40
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff ff18 	bl	800b732 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	691c      	ldr	r4, [r3, #16]
 800b906:	7afa      	ldrb	r2, [r7, #11]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2117      	movs	r1, #23
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7ff ff2f 	bl	800b774 <u8x8_byte_EndTransfer>
}
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd90      	pop	{r4, r7, pc}
	...

0800b920 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b920:	b590      	push	{r4, r7, lr}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	607b      	str	r3, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	72fb      	strb	r3, [r7, #11]
 800b92e:	4613      	mov	r3, r2
 800b930:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800b932:	7afb      	ldrb	r3, [r7, #11]
 800b934:	3b14      	subs	r3, #20
 800b936:	2b05      	cmp	r3, #5
 800b938:	d86e      	bhi.n	800ba18 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800b93a:	a201      	add	r2, pc, #4	@ (adr r2, 800b940 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b9d7 	.word	0x0800b9d7
 800b944:	0800b959 	.word	0x0800b959
 800b948:	0800b987 	.word	0x0800b987
 800b94c:	0800b993 	.word	0x0800b993
 800b950:	0800b9fb 	.word	0x0800b9fb
 800b954:	0800ba03 	.word	0x0800ba03
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800b958:	4b33      	ldr	r3, [pc, #204]	@ (800ba28 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff ff07 	bl	800b774 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7ff fef4 	bl	800b754 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800b96c:	2100      	movs	r1, #0
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7ff fedf 	bl	800b732 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800b974:	7abb      	ldrb	r3, [r7, #10]
 800b976:	4619      	mov	r1, r3
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff feda 	bl	800b732 <u8x8_byte_SendByte>
      in_transfer = 1;
 800b97e:	4b2a      	ldr	r3, [pc, #168]	@ (800ba28 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800b980:	2201      	movs	r2, #1
 800b982:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800b984:	e04a      	b.n	800ba1c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800b986:	7abb      	ldrb	r3, [r7, #10]
 800b988:	4619      	mov	r1, r3
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff fed1 	bl	800b732 <u8x8_byte_SendByte>
      break;      
 800b990:	e044      	b.n	800ba1c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800b992:	4b25      	ldr	r3, [pc, #148]	@ (800ba28 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff feea 	bl	800b774 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800b9a4:	e00a      	b.n	800b9bc <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	2118      	movs	r1, #24
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7ff ff9b 	bl	800b8e6 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800b9b0:	7abb      	ldrb	r3, [r7, #10]
 800b9b2:	3b18      	subs	r3, #24
 800b9b4:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	3318      	adds	r3, #24
 800b9ba:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800b9bc:	7abb      	ldrb	r3, [r7, #10]
 800b9be:	2b18      	cmp	r3, #24
 800b9c0:	d8f1      	bhi.n	800b9a6 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800b9c2:	7abb      	ldrb	r3, [r7, #10]
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f7ff ff8c 	bl	800b8e6 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800b9ce:	4b16      	ldr	r3, [pc, #88]	@ (800ba28 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
      break;
 800b9d4:	e022      	b.n	800ba1c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b9dc:	2bff      	cmp	r3, #255	@ 0xff
 800b9de:	d103      	bne.n	800b9e8 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2278      	movs	r2, #120	@ 0x78
 800b9e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	691c      	ldr	r4, [r3, #16]
 800b9ec:	7aba      	ldrb	r2, [r7, #10]
 800b9ee:	7af9      	ldrb	r1, [r7, #11]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	47a0      	blx	r4
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	e011      	b.n	800ba1e <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800b9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800ba28 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	701a      	strb	r2, [r3, #0]
      break;
 800ba00:	e00c      	b.n	800ba1c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800ba02:	4b09      	ldr	r3, [pc, #36]	@ (800ba28 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff feb2 	bl	800b774 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800ba10:	4b05      	ldr	r3, [pc, #20]	@ (800ba28 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	701a      	strb	r2, [r3, #0]
      break;
 800ba16:	e001      	b.n	800ba1c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e000      	b.n	800ba1e <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 800ba1c:	2301      	movs	r3, #1
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd90      	pop	{r4, r7, pc}
 800ba26:	bf00      	nop
 800ba28:	200009e8 	.word	0x200009e8

0800ba2c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	607b      	str	r3, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	72fb      	strb	r3, [r7, #11]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800ba3e:	7afb      	ldrb	r3, [r7, #11]
 800ba40:	3b0b      	subs	r3, #11
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	f200 808a 	bhi.w	800bb5c <u8x8_d_ssd1306_sh1106_generic+0x130>
 800ba48:	a201      	add	r2, pc, #4	@ (adr r2, 800ba50 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800ba4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4e:	bf00      	nop
 800ba50:	0800ba65 	.word	0x0800ba65
 800ba54:	0800bb5d 	.word	0x0800bb5d
 800ba58:	0800ba7f 	.word	0x0800ba7f
 800ba5c:	0800bab1 	.word	0x0800bab1
 800ba60:	0800bad1 	.word	0x0800bad1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800ba64:	7abb      	ldrb	r3, [r7, #10]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d104      	bne.n	800ba74 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800ba6a:	4940      	ldr	r1, [pc, #256]	@ (800bb6c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f7ff fee8 	bl	800b842 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800ba72:	e075      	b.n	800bb60 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800ba74:	493e      	ldr	r1, [pc, #248]	@ (800bb70 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f7ff fee3 	bl	800b842 <u8x8_cad_SendSequence>
      break;
 800ba7c:	e070      	b.n	800bb60 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800ba7e:	7abb      	ldrb	r3, [r7, #10]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800ba84:	493b      	ldr	r1, [pc, #236]	@ (800bb74 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff fedb 	bl	800b842 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	7c9a      	ldrb	r2, [r3, #18]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800ba98:	e062      	b.n	800bb60 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800ba9a:	4937      	ldr	r1, [pc, #220]	@ (800bb78 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f7ff fed0 	bl	800b842 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	7cda      	ldrb	r2, [r3, #19]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800baae:	e057      	b.n	800bb60 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff fea6 	bl	800b802 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800bab6:	2181      	movs	r1, #129	@ 0x81
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff fe6b 	bl	800b794 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800babe:	7abb      	ldrb	r3, [r7, #10]
 800bac0:	4619      	mov	r1, r3
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f7ff fe78 	bl	800b7b8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff feaa 	bl	800b822 <u8x8_cad_EndTransfer>
      break;
 800bace:	e047      	b.n	800bb60 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff fe96 	bl	800b802 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	795b      	ldrb	r3, [r3, #5]
 800bada:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
 800baea:	4413      	add	r3, r2
 800baec:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800baee:	2140      	movs	r1, #64	@ 0x40
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f7ff fe4f 	bl	800b794 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	091b      	lsrs	r3, r3, #4
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	f043 0310 	orr.w	r3, r3, #16
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	4619      	mov	r1, r3
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f7ff fe45 	bl	800b794 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	f003 030f 	and.w	r3, r3, #15
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	4619      	mov	r1, r3
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f7ff fe4f 	bl	800b7b8 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	799b      	ldrb	r3, [r3, #6]
 800bb1e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	4619      	mov	r1, r3
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f7ff fe46 	bl	800b7b8 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	791b      	ldrb	r3, [r3, #4]
 800bb30:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800bb38:	7dbb      	ldrb	r3, [r7, #22]
 800bb3a:	00db      	lsls	r3, r3, #3
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	4619      	mov	r1, r3
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f7ff fe4a 	bl	800b7dc <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800bb48:	7abb      	ldrb	r3, [r7, #10]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800bb4e:	7abb      	ldrb	r3, [r7, #10]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1eb      	bne.n	800bb2c <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff fe64 	bl	800b822 <u8x8_cad_EndTransfer>
      break;
 800bb5a:	e001      	b.n	800bb60 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	e000      	b.n	800bb62 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800bb60:	2301      	movs	r3, #1
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	08012d84 	.word	0x08012d84
 800bb70:	08012d8c 	.word	0x08012d8c
 800bb74:	08012d94 	.word	0x08012d94
 800bb78:	08012d9c 	.word	0x08012d9c

0800bb7c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	72fb      	strb	r3, [r7, #11]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800bb8e:	7aba      	ldrb	r2, [r7, #10]
 800bb90:	7af9      	ldrb	r1, [r7, #11]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff ff49 	bl	800ba2c <u8x8_d_ssd1306_sh1106_generic>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e014      	b.n	800bbce <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	2b09      	cmp	r3, #9
 800bba8:	d009      	beq.n	800bbbe <u8x8_d_ssd1306_128x64_noname+0x42>
 800bbaa:	2b0a      	cmp	r3, #10
 800bbac:	d10c      	bne.n	800bbc8 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f000 f82a 	bl	800bc08 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800bbb4:	4908      	ldr	r1, [pc, #32]	@ (800bbd8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7ff fe43 	bl	800b842 <u8x8_cad_SendSequence>
      break;
 800bbbc:	e006      	b.n	800bbcc <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800bbbe:	4907      	ldr	r1, [pc, #28]	@ (800bbdc <u8x8_d_ssd1306_128x64_noname+0x60>)
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 f80d 	bl	800bbe0 <u8x8_d_helper_display_setup_memory>
      break;
 800bbc6:	e001      	b.n	800bbcc <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e000      	b.n	800bbce <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800bbcc:	2301      	movs	r3, #1
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	08012d4c 	.word	0x08012d4c
 800bbdc:	08012da4 	.word	0x08012da4

0800bbe0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	7c9a      	ldrb	r2, [r3, #18]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800bc08:	b590      	push	{r4, r7, lr}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	695c      	ldr	r4, [r3, #20]
 800bc14:	2300      	movs	r3, #0
 800bc16:	2200      	movs	r2, #0
 800bc18:	2128      	movs	r1, #40	@ 0x28
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68dc      	ldr	r4, [r3, #12]
 800bc22:	2300      	movs	r3, #0
 800bc24:	2200      	movs	r2, #0
 800bc26:	2114      	movs	r1, #20
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	214b      	movs	r1, #75	@ 0x4b
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f886 	bl	800bd42 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	791b      	ldrb	r3, [r3, #4]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	2129      	movs	r1, #41	@ 0x29
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f87e 	bl	800bd42 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800bc46:	2200      	movs	r2, #0
 800bc48:	214b      	movs	r1, #75	@ 0x4b
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f879 	bl	800bd42 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	791b      	ldrb	r3, [r3, #4]
 800bc56:	461a      	mov	r2, r3
 800bc58:	2129      	movs	r1, #41	@ 0x29
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f871 	bl	800bd42 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800bc60:	2201      	movs	r2, #1
 800bc62:	214b      	movs	r1, #75	@ 0x4b
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f86c 	bl	800bd42 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	795b      	ldrb	r3, [r3, #5]
 800bc70:	461a      	mov	r2, r3
 800bc72:	2129      	movs	r1, #41	@ 0x29
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f864 	bl	800bd42 <u8x8_gpio_call>
}    
 800bc7a:	bf00      	nop
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd90      	pop	{r4, r7, pc}

0800bc82 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800bc82:	b590      	push	{r4, r7, lr}
 800bc84:	b085      	sub	sp, #20
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	4608      	mov	r0, r1
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	461a      	mov	r2, r3
 800bc90:	4603      	mov	r3, r0
 800bc92:	70fb      	strb	r3, [r7, #3]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70bb      	strb	r3, [r7, #2]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800bca0:	78bb      	ldrb	r3, [r7, #2]
 800bca2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800bca4:	787b      	ldrb	r3, [r7, #1]
 800bca6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	689c      	ldr	r4, [r3, #8]
 800bcb0:	f107 0308 	add.w	r3, r7, #8
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	210f      	movs	r1, #15
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	47a0      	blx	r4
 800bcbc:	4603      	mov	r3, r0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd90      	pop	{r4, r7, pc}

0800bcc6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800bcc6:	b590      	push	{r4, r7, lr}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	689c      	ldr	r4, [r3, #8]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2109      	movs	r1, #9
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	47a0      	blx	r4
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd90      	pop	{r4, r7, pc}

0800bce4 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800bce4:	b590      	push	{r4, r7, lr}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689c      	ldr	r4, [r3, #8]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	210a      	movs	r1, #10
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800bcfa:	bf00      	nop
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd90      	pop	{r4, r7, pc}

0800bd02 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800bd02:	b590      	push	{r4, r7, lr}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	689c      	ldr	r4, [r3, #8]
 800bd12:	78fa      	ldrb	r2, [r7, #3]
 800bd14:	2300      	movs	r3, #0
 800bd16:	210b      	movs	r1, #11
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	47a0      	blx	r4
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd90      	pop	{r4, r7, pc}

0800bd24 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800bd24:	b590      	push	{r4, r7, lr}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689c      	ldr	r4, [r3, #8]
 800bd30:	2300      	movs	r3, #0
 800bd32:	2200      	movs	r2, #0
 800bd34:	2110      	movs	r1, #16
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	47a0      	blx	r4
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd90      	pop	{r4, r7, pc}

0800bd42 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800bd42:	b590      	push	{r4, r7, lr}
 800bd44:	b083      	sub	sp, #12
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	70fb      	strb	r3, [r7, #3]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	695c      	ldr	r4, [r3, #20]
 800bd56:	78ba      	ldrb	r2, [r7, #2]
 800bd58:	78f9      	ldrb	r1, [r7, #3]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	47a0      	blx	r4
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd90      	pop	{r4, r7, pc}

0800bd68 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	607b      	str	r3, [r7, #4]
 800bd72:	460b      	mov	r3, r1
 800bd74:	72fb      	strb	r3, [r7, #11]
 800bd76:	4613      	mov	r3, r2
 800bd78:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a11      	ldr	r2, [pc, #68]	@ (800bde0 <u8x8_SetupDefaults+0x58>)
 800bd9a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a10      	ldr	r2, [pc, #64]	@ (800bde0 <u8x8_SetupDefaults+0x58>)
 800bda0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a0e      	ldr	r2, [pc, #56]	@ (800bde0 <u8x8_SetupDefaults+0x58>)
 800bda6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a0d      	ldr	r2, [pc, #52]	@ (800bde0 <u8x8_SetupDefaults+0x58>)
 800bdac:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	22ff      	movs	r2, #255	@ 0xff
 800bdc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	22ff      	movs	r2, #255	@ 0xff
 800bdd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	0800bd69 	.word	0x0800bd69

0800bde4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f7ff ffc8 	bl	800bd88 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff ff58 	bl	800bcc6 <u8x8_SetupMemory>
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <Reset_Handler>:
 800be20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800be58 <LoopFillZerobss+0xe>
 800be24:	f7fa fe5c 	bl	8006ae0 <SystemInit>
 800be28:	480c      	ldr	r0, [pc, #48]	@ (800be5c <LoopFillZerobss+0x12>)
 800be2a:	490d      	ldr	r1, [pc, #52]	@ (800be60 <LoopFillZerobss+0x16>)
 800be2c:	4a0d      	ldr	r2, [pc, #52]	@ (800be64 <LoopFillZerobss+0x1a>)
 800be2e:	2300      	movs	r3, #0
 800be30:	e002      	b.n	800be38 <LoopCopyDataInit>

0800be32 <CopyDataInit>:
 800be32:	58d4      	ldr	r4, [r2, r3]
 800be34:	50c4      	str	r4, [r0, r3]
 800be36:	3304      	adds	r3, #4

0800be38 <LoopCopyDataInit>:
 800be38:	18c4      	adds	r4, r0, r3
 800be3a:	428c      	cmp	r4, r1
 800be3c:	d3f9      	bcc.n	800be32 <CopyDataInit>
 800be3e:	4a0a      	ldr	r2, [pc, #40]	@ (800be68 <LoopFillZerobss+0x1e>)
 800be40:	4c0a      	ldr	r4, [pc, #40]	@ (800be6c <LoopFillZerobss+0x22>)
 800be42:	2300      	movs	r3, #0
 800be44:	e001      	b.n	800be4a <LoopFillZerobss>

0800be46 <FillZerobss>:
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	3204      	adds	r2, #4

0800be4a <LoopFillZerobss>:
 800be4a:	42a2      	cmp	r2, r4
 800be4c:	d3fb      	bcc.n	800be46 <FillZerobss>
 800be4e:	f004 fd49 	bl	80108e4 <__libc_init_array>
 800be52:	f7f8 ffc5 	bl	8004de0 <main>
 800be56:	4770      	bx	lr
 800be58:	20010000 	.word	0x20010000
 800be5c:	20000000 	.word	0x20000000
 800be60:	200000a8 	.word	0x200000a8
 800be64:	08012e08 	.word	0x08012e08
 800be68:	200000a8 	.word	0x200000a8
 800be6c:	20000b38 	.word	0x20000b38

0800be70 <ADC_IRQHandler>:
 800be70:	e7fe      	b.n	800be70 <ADC_IRQHandler>
	...

0800be74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800be78:	4b0e      	ldr	r3, [pc, #56]	@ (800beb4 <HAL_Init+0x40>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a0d      	ldr	r2, [pc, #52]	@ (800beb4 <HAL_Init+0x40>)
 800be7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800be84:	4b0b      	ldr	r3, [pc, #44]	@ (800beb4 <HAL_Init+0x40>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a0a      	ldr	r2, [pc, #40]	@ (800beb4 <HAL_Init+0x40>)
 800be8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800be8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800be90:	4b08      	ldr	r3, [pc, #32]	@ (800beb4 <HAL_Init+0x40>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a07      	ldr	r2, [pc, #28]	@ (800beb4 <HAL_Init+0x40>)
 800be96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800be9c:	2003      	movs	r0, #3
 800be9e:	f000 fd37 	bl	800c910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bea2:	200f      	movs	r0, #15
 800bea4:	f000 f808 	bl	800beb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bea8:	f7fa fb4e 	bl	8006548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	40023c00 	.word	0x40023c00

0800beb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bec0:	4b12      	ldr	r3, [pc, #72]	@ (800bf0c <HAL_InitTick+0x54>)
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	4b12      	ldr	r3, [pc, #72]	@ (800bf10 <HAL_InitTick+0x58>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	4619      	mov	r1, r3
 800beca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bece:	fbb3 f3f1 	udiv	r3, r3, r1
 800bed2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 fd4f 	bl	800c97a <HAL_SYSTICK_Config>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e00e      	b.n	800bf04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b0f      	cmp	r3, #15
 800beea:	d80a      	bhi.n	800bf02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800beec:	2200      	movs	r2, #0
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	f000 fd17 	bl	800c926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bef8:	4a06      	ldr	r2, [pc, #24]	@ (800bf14 <HAL_InitTick+0x5c>)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	e000      	b.n	800bf04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20000034 	.word	0x20000034
 800bf10:	20000054 	.word	0x20000054
 800bf14:	20000050 	.word	0x20000050

0800bf18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bf1c:	4b06      	ldr	r3, [pc, #24]	@ (800bf38 <HAL_IncTick+0x20>)
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	4b06      	ldr	r3, [pc, #24]	@ (800bf3c <HAL_IncTick+0x24>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4413      	add	r3, r2
 800bf28:	4a04      	ldr	r2, [pc, #16]	@ (800bf3c <HAL_IncTick+0x24>)
 800bf2a:	6013      	str	r3, [r2, #0]
}
 800bf2c:	bf00      	nop
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	20000054 	.word	0x20000054
 800bf3c:	200009ec 	.word	0x200009ec

0800bf40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
  return uwTick;
 800bf44:	4b03      	ldr	r3, [pc, #12]	@ (800bf54 <HAL_GetTick+0x14>)
 800bf46:	681b      	ldr	r3, [r3, #0]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	200009ec 	.word	0x200009ec

0800bf58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bf60:	f7ff ffee 	bl	800bf40 <HAL_GetTick>
 800bf64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf70:	d005      	beq.n	800bf7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bf72:	4b0a      	ldr	r3, [pc, #40]	@ (800bf9c <HAL_Delay+0x44>)
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bf7e:	bf00      	nop
 800bf80:	f7ff ffde 	bl	800bf40 <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d8f7      	bhi.n	800bf80 <HAL_Delay+0x28>
  {
  }
}
 800bf90:	bf00      	nop
 800bf92:	bf00      	nop
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20000054 	.word	0x20000054

0800bfa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e033      	b.n	800c01e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d109      	bne.n	800bfd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7fa faea 	bl	8006598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd6:	f003 0310 	and.w	r3, r3, #16
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d118      	bne.n	800c010 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bfe6:	f023 0302 	bic.w	r3, r3, #2
 800bfea:	f043 0202 	orr.w	r2, r3, #2
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa3e 	bl	800c474 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c002:	f023 0303 	bic.w	r3, r3, #3
 800c006:	f043 0201 	orr.w	r2, r3, #1
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	641a      	str	r2, [r3, #64]	@ 0x40
 800c00e:	e001      	b.n	800c014 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
	...

0800c028 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800c034:	2300      	movs	r3, #0
 800c036:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d101      	bne.n	800c046 <HAL_ADC_Start_DMA+0x1e>
 800c042:	2302      	movs	r3, #2
 800c044:	e0ce      	b.n	800c1e4 <HAL_ADC_Start_DMA+0x1bc>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2201      	movs	r2, #1
 800c04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d018      	beq.n	800c08e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689a      	ldr	r2, [r3, #8]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f042 0201 	orr.w	r2, r2, #1
 800c06a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c06c:	4b5f      	ldr	r3, [pc, #380]	@ (800c1ec <HAL_ADC_Start_DMA+0x1c4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a5f      	ldr	r2, [pc, #380]	@ (800c1f0 <HAL_ADC_Start_DMA+0x1c8>)
 800c072:	fba2 2303 	umull	r2, r3, r2, r3
 800c076:	0c9a      	lsrs	r2, r3, #18
 800c078:	4613      	mov	r3, r2
 800c07a:	005b      	lsls	r3, r3, #1
 800c07c:	4413      	add	r3, r2
 800c07e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800c080:	e002      	b.n	800c088 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3b01      	subs	r3, #1
 800c086:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1f9      	bne.n	800c082 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c09c:	d107      	bne.n	800c0ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689a      	ldr	r2, [r3, #8]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c0ac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	f040 8086 	bne.w	800c1ca <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c0c6:	f023 0301 	bic.w	r3, r3, #1
 800c0ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c0e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0fc:	d106      	bne.n	800c10c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c102:	f023 0206 	bic.w	r2, r3, #6
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	645a      	str	r2, [r3, #68]	@ 0x44
 800c10a:	e002      	b.n	800c112 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c11a:	4b36      	ldr	r3, [pc, #216]	@ (800c1f4 <HAL_ADC_Start_DMA+0x1cc>)
 800c11c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c122:	4a35      	ldr	r2, [pc, #212]	@ (800c1f8 <HAL_ADC_Start_DMA+0x1d0>)
 800c124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c12a:	4a34      	ldr	r2, [pc, #208]	@ (800c1fc <HAL_ADC_Start_DMA+0x1d4>)
 800c12c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c132:	4a33      	ldr	r2, [pc, #204]	@ (800c200 <HAL_ADC_Start_DMA+0x1d8>)
 800c134:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800c13e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800c14e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	689a      	ldr	r2, [r3, #8]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c15e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	334c      	adds	r3, #76	@ 0x4c
 800c16a:	4619      	mov	r1, r3
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f000 fcbe 	bl	800caf0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	f003 031f 	and.w	r3, r3, #31
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10f      	bne.n	800c1a0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d129      	bne.n	800c1e2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c19c:	609a      	str	r2, [r3, #8]
 800c19e:	e020      	b.n	800c1e2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a17      	ldr	r2, [pc, #92]	@ (800c204 <HAL_ADC_Start_DMA+0x1dc>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d11b      	bne.n	800c1e2 <HAL_ADC_Start_DMA+0x1ba>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d114      	bne.n	800c1e2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	689a      	ldr	r2, [r3, #8]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c1c6:	609a      	str	r2, [r3, #8]
 800c1c8:	e00b      	b.n	800c1e2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ce:	f043 0210 	orr.w	r2, r3, #16
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1da:	f043 0201 	orr.w	r2, r3, #1
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	20000034 	.word	0x20000034
 800c1f0:	431bde83 	.word	0x431bde83
 800c1f4:	40012300 	.word	0x40012300
 800c1f8:	0800c66d 	.word	0x0800c66d
 800c1fc:	0800c727 	.word	0x0800c727
 800c200:	0800c743 	.word	0x0800c743
 800c204:	40012000 	.word	0x40012000

0800c208 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c244:	2b01      	cmp	r3, #1
 800c246:	d101      	bne.n	800c24c <HAL_ADC_ConfigChannel+0x1c>
 800c248:	2302      	movs	r3, #2
 800c24a:	e105      	b.n	800c458 <HAL_ADC_ConfigChannel+0x228>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b09      	cmp	r3, #9
 800c25a:	d925      	bls.n	800c2a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68d9      	ldr	r1, [r3, #12]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	b29b      	uxth	r3, r3
 800c268:	461a      	mov	r2, r3
 800c26a:	4613      	mov	r3, r2
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	4413      	add	r3, r2
 800c270:	3b1e      	subs	r3, #30
 800c272:	2207      	movs	r2, #7
 800c274:	fa02 f303 	lsl.w	r3, r2, r3
 800c278:	43da      	mvns	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	400a      	ands	r2, r1
 800c280:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68d9      	ldr	r1, [r3, #12]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	689a      	ldr	r2, [r3, #8]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	b29b      	uxth	r3, r3
 800c292:	4618      	mov	r0, r3
 800c294:	4603      	mov	r3, r0
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	4403      	add	r3, r0
 800c29a:	3b1e      	subs	r3, #30
 800c29c:	409a      	lsls	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	430a      	orrs	r2, r1
 800c2a4:	60da      	str	r2, [r3, #12]
 800c2a6:	e022      	b.n	800c2ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6919      	ldr	r1, [r3, #16]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	005b      	lsls	r3, r3, #1
 800c2ba:	4413      	add	r3, r2
 800c2bc:	2207      	movs	r2, #7
 800c2be:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c2:	43da      	mvns	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	400a      	ands	r2, r1
 800c2ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	6919      	ldr	r1, [r3, #16]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	689a      	ldr	r2, [r3, #8]
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	4618      	mov	r0, r3
 800c2de:	4603      	mov	r3, r0
 800c2e0:	005b      	lsls	r3, r3, #1
 800c2e2:	4403      	add	r3, r0
 800c2e4:	409a      	lsls	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	2b06      	cmp	r3, #6
 800c2f4:	d824      	bhi.n	800c340 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	3b05      	subs	r3, #5
 800c308:	221f      	movs	r2, #31
 800c30a:	fa02 f303 	lsl.w	r3, r2, r3
 800c30e:	43da      	mvns	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	400a      	ands	r2, r1
 800c316:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	b29b      	uxth	r3, r3
 800c324:	4618      	mov	r0, r3
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	4613      	mov	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	4413      	add	r3, r2
 800c330:	3b05      	subs	r3, #5
 800c332:	fa00 f203 	lsl.w	r2, r0, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	635a      	str	r2, [r3, #52]	@ 0x34
 800c33e:	e04c      	b.n	800c3da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	2b0c      	cmp	r3, #12
 800c346:	d824      	bhi.n	800c392 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	3b23      	subs	r3, #35	@ 0x23
 800c35a:	221f      	movs	r2, #31
 800c35c:	fa02 f303 	lsl.w	r3, r2, r3
 800c360:	43da      	mvns	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	400a      	ands	r2, r1
 800c368:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	b29b      	uxth	r3, r3
 800c376:	4618      	mov	r0, r3
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	3b23      	subs	r3, #35	@ 0x23
 800c384:	fa00 f203 	lsl.w	r2, r0, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	430a      	orrs	r2, r1
 800c38e:	631a      	str	r2, [r3, #48]	@ 0x30
 800c390:	e023      	b.n	800c3da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	4613      	mov	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	3b41      	subs	r3, #65	@ 0x41
 800c3a4:	221f      	movs	r2, #31
 800c3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3aa:	43da      	mvns	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	400a      	ands	r2, r1
 800c3b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	4413      	add	r3, r2
 800c3cc:	3b41      	subs	r3, #65	@ 0x41
 800c3ce:	fa00 f203 	lsl.w	r2, r0, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c3da:	4b22      	ldr	r3, [pc, #136]	@ (800c464 <HAL_ADC_ConfigChannel+0x234>)
 800c3dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a21      	ldr	r2, [pc, #132]	@ (800c468 <HAL_ADC_ConfigChannel+0x238>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d109      	bne.n	800c3fc <HAL_ADC_ConfigChannel+0x1cc>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b12      	cmp	r3, #18
 800c3ee:	d105      	bne.n	800c3fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a19      	ldr	r2, [pc, #100]	@ (800c468 <HAL_ADC_ConfigChannel+0x238>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d123      	bne.n	800c44e <HAL_ADC_ConfigChannel+0x21e>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b10      	cmp	r3, #16
 800c40c:	d003      	beq.n	800c416 <HAL_ADC_ConfigChannel+0x1e6>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b11      	cmp	r3, #17
 800c414:	d11b      	bne.n	800c44e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b10      	cmp	r3, #16
 800c428:	d111      	bne.n	800c44e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c42a:	4b10      	ldr	r3, [pc, #64]	@ (800c46c <HAL_ADC_ConfigChannel+0x23c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a10      	ldr	r2, [pc, #64]	@ (800c470 <HAL_ADC_ConfigChannel+0x240>)
 800c430:	fba2 2303 	umull	r2, r3, r2, r3
 800c434:	0c9a      	lsrs	r2, r3, #18
 800c436:	4613      	mov	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c440:	e002      	b.n	800c448 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	3b01      	subs	r3, #1
 800c446:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1f9      	bne.n	800c442 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	40012300 	.word	0x40012300
 800c468:	40012000 	.word	0x40012000
 800c46c:	20000034 	.word	0x20000034
 800c470:	431bde83 	.word	0x431bde83

0800c474 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c47c:	4b79      	ldr	r3, [pc, #484]	@ (800c664 <ADC_Init+0x1f0>)
 800c47e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	685a      	ldr	r2, [r3, #4]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	431a      	orrs	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6859      	ldr	r1, [r3, #4]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	021a      	lsls	r2, r3, #8
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800c4cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	6859      	ldr	r1, [r3, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689a      	ldr	r2, [r3, #8]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	430a      	orrs	r2, r1
 800c4de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	689a      	ldr	r2, [r3, #8]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c4ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6899      	ldr	r1, [r3, #8]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68da      	ldr	r2, [r3, #12]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c506:	4a58      	ldr	r2, [pc, #352]	@ (800c668 <ADC_Init+0x1f4>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d022      	beq.n	800c552 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689a      	ldr	r2, [r3, #8]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c51a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6899      	ldr	r1, [r3, #8]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	430a      	orrs	r2, r1
 800c52c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689a      	ldr	r2, [r3, #8]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c53c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6899      	ldr	r1, [r3, #8]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	430a      	orrs	r2, r1
 800c54e:	609a      	str	r2, [r3, #8]
 800c550:	e00f      	b.n	800c572 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	689a      	ldr	r2, [r3, #8]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c570:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689a      	ldr	r2, [r3, #8]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f022 0202 	bic.w	r2, r2, #2
 800c580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6899      	ldr	r1, [r3, #8]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	7e1b      	ldrb	r3, [r3, #24]
 800c58c:	005a      	lsls	r2, r3, #1
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	430a      	orrs	r2, r1
 800c594:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d01b      	beq.n	800c5d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800c5be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6859      	ldr	r1, [r3, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	035a      	lsls	r2, r3, #13
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
 800c5d6:	e007      	b.n	800c5e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c5e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800c5f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	69db      	ldr	r3, [r3, #28]
 800c602:	3b01      	subs	r3, #1
 800c604:	051a      	lsls	r2, r3, #20
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	689a      	ldr	r2, [r3, #8]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c61c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6899      	ldr	r1, [r3, #8]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c62a:	025a      	lsls	r2, r3, #9
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	430a      	orrs	r2, r1
 800c632:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689a      	ldr	r2, [r3, #8]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	6899      	ldr	r1, [r3, #8]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	029a      	lsls	r2, r3, #10
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	430a      	orrs	r2, r1
 800c656:	609a      	str	r2, [r3, #8]
}
 800c658:	bf00      	nop
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr
 800c664:	40012300 	.word	0x40012300
 800c668:	0f000001 	.word	0x0f000001

0800c66c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c678:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c67e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c682:	2b00      	cmp	r3, #0
 800c684:	d13c      	bne.n	800c700 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c68a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d12b      	bne.n	800c6f8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d127      	bne.n	800c6f8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d006      	beq.n	800c6c4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d119      	bne.n	800c6f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f022 0220 	bic.w	r2, r2, #32
 800c6d2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d105      	bne.n	800c6f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6f0:	f043 0201 	orr.w	r2, r3, #1
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f7f9 fec1 	bl	8006480 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c6fe:	e00e      	b.n	800c71e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c704:	f003 0310 	and.w	r3, r3, #16
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d003      	beq.n	800c714 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f7ff fd85 	bl	800c21c <HAL_ADC_ErrorCallback>
}
 800c712:	e004      	b.n	800c71e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	4798      	blx	r3
}
 800c71e:	bf00      	nop
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c732:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7ff fd67 	bl	800c208 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c73a:	bf00      	nop
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c74e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2240      	movs	r2, #64	@ 0x40
 800c754:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c75a:	f043 0204 	orr.w	r2, r3, #4
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f7ff fd5a 	bl	800c21c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c768:	bf00      	nop
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f003 0307 	and.w	r3, r3, #7
 800c77e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c780:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b4 <__NVIC_SetPriorityGrouping+0x44>)
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c78c:	4013      	ands	r3, r2
 800c78e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c79c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c7a2:	4a04      	ldr	r2, [pc, #16]	@ (800c7b4 <__NVIC_SetPriorityGrouping+0x44>)
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	60d3      	str	r3, [r2, #12]
}
 800c7a8:	bf00      	nop
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr
 800c7b4:	e000ed00 	.word	0xe000ed00

0800c7b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c7bc:	4b04      	ldr	r3, [pc, #16]	@ (800c7d0 <__NVIC_GetPriorityGrouping+0x18>)
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	0a1b      	lsrs	r3, r3, #8
 800c7c2:	f003 0307 	and.w	r3, r3, #7
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	e000ed00 	.word	0xe000ed00

0800c7d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	4603      	mov	r3, r0
 800c7dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	db0b      	blt.n	800c7fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c7e6:	79fb      	ldrb	r3, [r7, #7]
 800c7e8:	f003 021f 	and.w	r2, r3, #31
 800c7ec:	4907      	ldr	r1, [pc, #28]	@ (800c80c <__NVIC_EnableIRQ+0x38>)
 800c7ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7f2:	095b      	lsrs	r3, r3, #5
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	fa00 f202 	lsl.w	r2, r0, r2
 800c7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c7fe:	bf00      	nop
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	e000e100 	.word	0xe000e100

0800c810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	4603      	mov	r3, r0
 800c818:	6039      	str	r1, [r7, #0]
 800c81a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c81c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c820:	2b00      	cmp	r3, #0
 800c822:	db0a      	blt.n	800c83a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	b2da      	uxtb	r2, r3
 800c828:	490c      	ldr	r1, [pc, #48]	@ (800c85c <__NVIC_SetPriority+0x4c>)
 800c82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c82e:	0112      	lsls	r2, r2, #4
 800c830:	b2d2      	uxtb	r2, r2
 800c832:	440b      	add	r3, r1
 800c834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c838:	e00a      	b.n	800c850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	4908      	ldr	r1, [pc, #32]	@ (800c860 <__NVIC_SetPriority+0x50>)
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	f003 030f 	and.w	r3, r3, #15
 800c846:	3b04      	subs	r3, #4
 800c848:	0112      	lsls	r2, r2, #4
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	440b      	add	r3, r1
 800c84e:	761a      	strb	r2, [r3, #24]
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	e000e100 	.word	0xe000e100
 800c860:	e000ed00 	.word	0xe000ed00

0800c864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c864:	b480      	push	{r7}
 800c866:	b089      	sub	sp, #36	@ 0x24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	f1c3 0307 	rsb	r3, r3, #7
 800c87e:	2b04      	cmp	r3, #4
 800c880:	bf28      	it	cs
 800c882:	2304      	movcs	r3, #4
 800c884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	3304      	adds	r3, #4
 800c88a:	2b06      	cmp	r3, #6
 800c88c:	d902      	bls.n	800c894 <NVIC_EncodePriority+0x30>
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	3b03      	subs	r3, #3
 800c892:	e000      	b.n	800c896 <NVIC_EncodePriority+0x32>
 800c894:	2300      	movs	r3, #0
 800c896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c898:	f04f 32ff 	mov.w	r2, #4294967295
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a2:	43da      	mvns	r2, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	401a      	ands	r2, r3
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c8ac:	f04f 31ff 	mov.w	r1, #4294967295
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b6:	43d9      	mvns	r1, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c8bc:	4313      	orrs	r3, r2
         );
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3724      	adds	r7, #36	@ 0x24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
	...

0800c8cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8dc:	d301      	bcc.n	800c8e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e00f      	b.n	800c902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c8e2:	4a0a      	ldr	r2, [pc, #40]	@ (800c90c <SysTick_Config+0x40>)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c8ea:	210f      	movs	r1, #15
 800c8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f0:	f7ff ff8e 	bl	800c810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c8f4:	4b05      	ldr	r3, [pc, #20]	@ (800c90c <SysTick_Config+0x40>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c8fa:	4b04      	ldr	r3, [pc, #16]	@ (800c90c <SysTick_Config+0x40>)
 800c8fc:	2207      	movs	r2, #7
 800c8fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	e000e010 	.word	0xe000e010

0800c910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff ff29 	bl	800c770 <__NVIC_SetPriorityGrouping>
}
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c926:	b580      	push	{r7, lr}
 800c928:	b086      	sub	sp, #24
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	4603      	mov	r3, r0
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	607a      	str	r2, [r7, #4]
 800c932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c934:	2300      	movs	r3, #0
 800c936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c938:	f7ff ff3e 	bl	800c7b8 <__NVIC_GetPriorityGrouping>
 800c93c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	68b9      	ldr	r1, [r7, #8]
 800c942:	6978      	ldr	r0, [r7, #20]
 800c944:	f7ff ff8e 	bl	800c864 <NVIC_EncodePriority>
 800c948:	4602      	mov	r2, r0
 800c94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f7ff ff5d 	bl	800c810 <__NVIC_SetPriority>
}
 800c956:	bf00      	nop
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	4603      	mov	r3, r0
 800c966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff ff31 	bl	800c7d4 <__NVIC_EnableIRQ>
}
 800c972:	bf00      	nop
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b082      	sub	sp, #8
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff ffa2 	bl	800c8cc <SysTick_Config>
 800c988:	4603      	mov	r3, r0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c99c:	2300      	movs	r3, #0
 800c99e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c9a0:	f7ff face 	bl	800bf40 <HAL_GetTick>
 800c9a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e099      	b.n	800cae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f022 0201 	bic.w	r2, r2, #1
 800c9ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c9d0:	e00f      	b.n	800c9f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c9d2:	f7ff fab5 	bl	800bf40 <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	2b05      	cmp	r3, #5
 800c9de:	d908      	bls.n	800c9f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2220      	movs	r2, #32
 800c9e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2203      	movs	r2, #3
 800c9ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e078      	b.n	800cae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1e8      	bne.n	800c9d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	4b38      	ldr	r3, [pc, #224]	@ (800caec <HAL_DMA_Init+0x158>)
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ca1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca48:	2b04      	cmp	r3, #4
 800ca4a:	d107      	bne.n	800ca5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca54:	4313      	orrs	r3, r2
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f023 0307 	bic.w	r3, r3, #7
 800ca72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca82:	2b04      	cmp	r3, #4
 800ca84:	d117      	bne.n	800cab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00e      	beq.n	800cab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fa6f 	bl	800cf7c <DMA_CheckFifoParam>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2240      	movs	r2, #64	@ 0x40
 800caa8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800cab2:	2301      	movs	r3, #1
 800cab4:	e016      	b.n	800cae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fa26 	bl	800cf10 <DMA_CalcBaseAndBitshift>
 800cac4:	4603      	mov	r3, r0
 800cac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cacc:	223f      	movs	r2, #63	@ 0x3f
 800cace:	409a      	lsls	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2201      	movs	r2, #1
 800cade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	f010803f 	.word	0xf010803f

0800caf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
 800cafc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d101      	bne.n	800cb16 <HAL_DMA_Start_IT+0x26>
 800cb12:	2302      	movs	r3, #2
 800cb14:	e040      	b.n	800cb98 <HAL_DMA_Start_IT+0xa8>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d12f      	bne.n	800cb8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	68b9      	ldr	r1, [r7, #8]
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	f000 f9b8 	bl	800ceb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb48:	223f      	movs	r2, #63	@ 0x3f
 800cb4a:	409a      	lsls	r2, r3
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f042 0216 	orr.w	r2, r2, #22
 800cb5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d007      	beq.n	800cb78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f042 0208 	orr.w	r2, r2, #8
 800cb76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f042 0201 	orr.w	r2, r2, #1
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	e005      	b.n	800cb96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800cb92:	2302      	movs	r3, #2
 800cb94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cbac:	4b8e      	ldr	r3, [pc, #568]	@ (800cde8 <HAL_DMA_IRQHandler+0x248>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a8e      	ldr	r2, [pc, #568]	@ (800cdec <HAL_DMA_IRQHandler+0x24c>)
 800cbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb6:	0a9b      	lsrs	r3, r3, #10
 800cbb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbca:	2208      	movs	r2, #8
 800cbcc:	409a      	lsls	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d01a      	beq.n	800cc0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f003 0304 	and.w	r3, r3, #4
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d013      	beq.n	800cc0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f022 0204 	bic.w	r2, r2, #4
 800cbf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	409a      	lsls	r2, r3
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc04:	f043 0201 	orr.w	r2, r3, #1
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc10:	2201      	movs	r2, #1
 800cc12:	409a      	lsls	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	4013      	ands	r3, r2
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d012      	beq.n	800cc42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00b      	beq.n	800cc42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc2e:	2201      	movs	r2, #1
 800cc30:	409a      	lsls	r2, r3
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc3a:	f043 0202 	orr.w	r2, r3, #2
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc46:	2204      	movs	r2, #4
 800cc48:	409a      	lsls	r2, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d012      	beq.n	800cc78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0302 	and.w	r3, r3, #2
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00b      	beq.n	800cc78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc64:	2204      	movs	r2, #4
 800cc66:	409a      	lsls	r2, r3
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc70:	f043 0204 	orr.w	r2, r3, #4
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc7c:	2210      	movs	r2, #16
 800cc7e:	409a      	lsls	r2, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4013      	ands	r3, r2
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d043      	beq.n	800cd10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0308 	and.w	r3, r3, #8
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d03c      	beq.n	800cd10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc9a:	2210      	movs	r2, #16
 800cc9c:	409a      	lsls	r2, r3
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d018      	beq.n	800cce2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d108      	bne.n	800ccd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d024      	beq.n	800cd10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	4798      	blx	r3
 800ccce:	e01f      	b.n	800cd10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d01b      	beq.n	800cd10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	4798      	blx	r3
 800cce0:	e016      	b.n	800cd10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d107      	bne.n	800cd00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f022 0208 	bic.w	r2, r2, #8
 800ccfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd14:	2220      	movs	r2, #32
 800cd16:	409a      	lsls	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 808f 	beq.w	800ce40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0310 	and.w	r3, r3, #16
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 8087 	beq.w	800ce40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd36:	2220      	movs	r2, #32
 800cd38:	409a      	lsls	r2, r3
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b05      	cmp	r3, #5
 800cd48:	d136      	bne.n	800cdb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f022 0216 	bic.w	r2, r2, #22
 800cd58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	695a      	ldr	r2, [r3, #20]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d103      	bne.n	800cd7a <HAL_DMA_IRQHandler+0x1da>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d007      	beq.n	800cd8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f022 0208 	bic.w	r2, r2, #8
 800cd88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd8e:	223f      	movs	r2, #63	@ 0x3f
 800cd90:	409a      	lsls	r2, r3
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d07e      	beq.n	800ceac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	4798      	blx	r3
        }
        return;
 800cdb6:	e079      	b.n	800ceac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d01d      	beq.n	800ce02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10d      	bne.n	800cdf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d031      	beq.n	800ce40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	4798      	blx	r3
 800cde4:	e02c      	b.n	800ce40 <HAL_DMA_IRQHandler+0x2a0>
 800cde6:	bf00      	nop
 800cde8:	20000034 	.word	0x20000034
 800cdec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d023      	beq.n	800ce40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	4798      	blx	r3
 800ce00:	e01e      	b.n	800ce40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10f      	bne.n	800ce30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f022 0210 	bic.w	r2, r2, #16
 800ce1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d032      	beq.n	800ceae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d022      	beq.n	800ce9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2205      	movs	r2, #5
 800ce58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f022 0201 	bic.w	r2, r2, #1
 800ce6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	60bb      	str	r3, [r7, #8]
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d307      	bcc.n	800ce88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d1f2      	bne.n	800ce6c <HAL_DMA_IRQHandler+0x2cc>
 800ce86:	e000      	b.n	800ce8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ce88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d005      	beq.n	800ceae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	4798      	blx	r3
 800ceaa:	e000      	b.n	800ceae <HAL_DMA_IRQHandler+0x30e>
        return;
 800ceac:	bf00      	nop
    }
  }
}
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ced0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	2b40      	cmp	r3, #64	@ 0x40
 800cee0:	d108      	bne.n	800cef4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cef2:	e007      	b.n	800cf04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	60da      	str	r2, [r3, #12]
}
 800cf04:	bf00      	nop
 800cf06:	3714      	adds	r7, #20
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	3b10      	subs	r3, #16
 800cf20:	4a14      	ldr	r2, [pc, #80]	@ (800cf74 <DMA_CalcBaseAndBitshift+0x64>)
 800cf22:	fba2 2303 	umull	r2, r3, r2, r3
 800cf26:	091b      	lsrs	r3, r3, #4
 800cf28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cf2a:	4a13      	ldr	r2, [pc, #76]	@ (800cf78 <DMA_CalcBaseAndBitshift+0x68>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4413      	add	r3, r2
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	461a      	mov	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	d909      	bls.n	800cf52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800cf46:	f023 0303 	bic.w	r3, r3, #3
 800cf4a:	1d1a      	adds	r2, r3, #4
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	659a      	str	r2, [r3, #88]	@ 0x58
 800cf50:	e007      	b.n	800cf62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	aaaaaaab 	.word	0xaaaaaaab
 800cf78:	08012dbc 	.word	0x08012dbc

0800cf7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	699b      	ldr	r3, [r3, #24]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d11f      	bne.n	800cfd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d856      	bhi.n	800d04a <DMA_CheckFifoParam+0xce>
 800cf9c:	a201      	add	r2, pc, #4	@ (adr r2, 800cfa4 <DMA_CheckFifoParam+0x28>)
 800cf9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa2:	bf00      	nop
 800cfa4:	0800cfb5 	.word	0x0800cfb5
 800cfa8:	0800cfc7 	.word	0x0800cfc7
 800cfac:	0800cfb5 	.word	0x0800cfb5
 800cfb0:	0800d04b 	.word	0x0800d04b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d046      	beq.n	800d04e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfc4:	e043      	b.n	800d04e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800cfce:	d140      	bne.n	800d052 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfd4:	e03d      	b.n	800d052 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfde:	d121      	bne.n	800d024 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d837      	bhi.n	800d056 <DMA_CheckFifoParam+0xda>
 800cfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfec <DMA_CheckFifoParam+0x70>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800cffd 	.word	0x0800cffd
 800cff0:	0800d003 	.word	0x0800d003
 800cff4:	0800cffd 	.word	0x0800cffd
 800cff8:	0800d015 	.word	0x0800d015
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	73fb      	strb	r3, [r7, #15]
      break;
 800d000:	e030      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d006:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d025      	beq.n	800d05a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d012:	e022      	b.n	800d05a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d018:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d01c:	d11f      	bne.n	800d05e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d022:	e01c      	b.n	800d05e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	2b02      	cmp	r3, #2
 800d028:	d903      	bls.n	800d032 <DMA_CheckFifoParam+0xb6>
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	d003      	beq.n	800d038 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d030:	e018      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	73fb      	strb	r3, [r7, #15]
      break;
 800d036:	e015      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00e      	beq.n	800d062 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	73fb      	strb	r3, [r7, #15]
      break;
 800d048:	e00b      	b.n	800d062 <DMA_CheckFifoParam+0xe6>
      break;
 800d04a:	bf00      	nop
 800d04c:	e00a      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      break;
 800d04e:	bf00      	nop
 800d050:	e008      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      break;
 800d052:	bf00      	nop
 800d054:	e006      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      break;
 800d056:	bf00      	nop
 800d058:	e004      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      break;
 800d05a:	bf00      	nop
 800d05c:	e002      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      break;   
 800d05e:	bf00      	nop
 800d060:	e000      	b.n	800d064 <DMA_CheckFifoParam+0xe8>
      break;
 800d062:	bf00      	nop
    }
  } 
  
  return status; 
 800d064:	7bfb      	ldrb	r3, [r7, #15]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop

0800d074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d074:	b480      	push	{r7}
 800d076:	b089      	sub	sp, #36	@ 0x24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d07e:	2300      	movs	r3, #0
 800d080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d082:	2300      	movs	r3, #0
 800d084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d086:	2300      	movs	r3, #0
 800d088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d08a:	2300      	movs	r3, #0
 800d08c:	61fb      	str	r3, [r7, #28]
 800d08e:	e159      	b.n	800d344 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d090:	2201      	movs	r2, #1
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	fa02 f303 	lsl.w	r3, r2, r3
 800d098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d0a4:	693a      	ldr	r2, [r7, #16]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	f040 8148 	bne.w	800d33e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	f003 0303 	and.w	r3, r3, #3
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d005      	beq.n	800d0c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d130      	bne.n	800d128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	2203      	movs	r2, #3
 800d0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d6:	43db      	mvns	r3, r3
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	4013      	ands	r3, r2
 800d0dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	68da      	ldr	r2, [r3, #12]
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	fa02 f303 	lsl.w	r3, r2, r3
 800d104:	43db      	mvns	r3, r3
 800d106:	69ba      	ldr	r2, [r7, #24]
 800d108:	4013      	ands	r3, r2
 800d10a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	091b      	lsrs	r3, r3, #4
 800d112:	f003 0201 	and.w	r2, r3, #1
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	fa02 f303 	lsl.w	r3, r2, r3
 800d11c:	69ba      	ldr	r2, [r7, #24]
 800d11e:	4313      	orrs	r3, r2
 800d120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69ba      	ldr	r2, [r7, #24]
 800d126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	f003 0303 	and.w	r3, r3, #3
 800d130:	2b03      	cmp	r3, #3
 800d132:	d017      	beq.n	800d164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d13a:	69fb      	ldr	r3, [r7, #28]
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	2203      	movs	r2, #3
 800d140:	fa02 f303 	lsl.w	r3, r2, r3
 800d144:	43db      	mvns	r3, r3
 800d146:	69ba      	ldr	r2, [r7, #24]
 800d148:	4013      	ands	r3, r2
 800d14a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	689a      	ldr	r2, [r3, #8]
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	fa02 f303 	lsl.w	r3, r2, r3
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	69ba      	ldr	r2, [r7, #24]
 800d162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	f003 0303 	and.w	r3, r3, #3
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d123      	bne.n	800d1b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	08da      	lsrs	r2, r3, #3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	3208      	adds	r2, #8
 800d178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	f003 0307 	and.w	r3, r3, #7
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	220f      	movs	r2, #15
 800d188:	fa02 f303 	lsl.w	r3, r2, r3
 800d18c:	43db      	mvns	r3, r3
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	4013      	ands	r3, r2
 800d192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	691a      	ldr	r2, [r3, #16]
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	f003 0307 	and.w	r3, r3, #7
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a4:	69ba      	ldr	r2, [r7, #24]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	08da      	lsrs	r2, r3, #3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	3208      	adds	r2, #8
 800d1b2:	69b9      	ldr	r1, [r7, #24]
 800d1b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	005b      	lsls	r3, r3, #1
 800d1c2:	2203      	movs	r2, #3
 800d1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c8:	43db      	mvns	r3, r3
 800d1ca:	69ba      	ldr	r2, [r7, #24]
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	f003 0203 	and.w	r2, r3, #3
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	005b      	lsls	r3, r3, #1
 800d1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	69ba      	ldr	r2, [r7, #24]
 800d1ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 80a2 	beq.w	800d33e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	60fb      	str	r3, [r7, #12]
 800d1fe:	4b57      	ldr	r3, [pc, #348]	@ (800d35c <HAL_GPIO_Init+0x2e8>)
 800d200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d202:	4a56      	ldr	r2, [pc, #344]	@ (800d35c <HAL_GPIO_Init+0x2e8>)
 800d204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d208:	6453      	str	r3, [r2, #68]	@ 0x44
 800d20a:	4b54      	ldr	r3, [pc, #336]	@ (800d35c <HAL_GPIO_Init+0x2e8>)
 800d20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d20e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d212:	60fb      	str	r3, [r7, #12]
 800d214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d216:	4a52      	ldr	r2, [pc, #328]	@ (800d360 <HAL_GPIO_Init+0x2ec>)
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	089b      	lsrs	r3, r3, #2
 800d21c:	3302      	adds	r3, #2
 800d21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	f003 0303 	and.w	r3, r3, #3
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	220f      	movs	r2, #15
 800d22e:	fa02 f303 	lsl.w	r3, r2, r3
 800d232:	43db      	mvns	r3, r3
 800d234:	69ba      	ldr	r2, [r7, #24]
 800d236:	4013      	ands	r3, r2
 800d238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a49      	ldr	r2, [pc, #292]	@ (800d364 <HAL_GPIO_Init+0x2f0>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d019      	beq.n	800d276 <HAL_GPIO_Init+0x202>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a48      	ldr	r2, [pc, #288]	@ (800d368 <HAL_GPIO_Init+0x2f4>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d013      	beq.n	800d272 <HAL_GPIO_Init+0x1fe>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a47      	ldr	r2, [pc, #284]	@ (800d36c <HAL_GPIO_Init+0x2f8>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d00d      	beq.n	800d26e <HAL_GPIO_Init+0x1fa>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a46      	ldr	r2, [pc, #280]	@ (800d370 <HAL_GPIO_Init+0x2fc>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d007      	beq.n	800d26a <HAL_GPIO_Init+0x1f6>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a45      	ldr	r2, [pc, #276]	@ (800d374 <HAL_GPIO_Init+0x300>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d101      	bne.n	800d266 <HAL_GPIO_Init+0x1f2>
 800d262:	2304      	movs	r3, #4
 800d264:	e008      	b.n	800d278 <HAL_GPIO_Init+0x204>
 800d266:	2307      	movs	r3, #7
 800d268:	e006      	b.n	800d278 <HAL_GPIO_Init+0x204>
 800d26a:	2303      	movs	r3, #3
 800d26c:	e004      	b.n	800d278 <HAL_GPIO_Init+0x204>
 800d26e:	2302      	movs	r3, #2
 800d270:	e002      	b.n	800d278 <HAL_GPIO_Init+0x204>
 800d272:	2301      	movs	r3, #1
 800d274:	e000      	b.n	800d278 <HAL_GPIO_Init+0x204>
 800d276:	2300      	movs	r3, #0
 800d278:	69fa      	ldr	r2, [r7, #28]
 800d27a:	f002 0203 	and.w	r2, r2, #3
 800d27e:	0092      	lsls	r2, r2, #2
 800d280:	4093      	lsls	r3, r2
 800d282:	69ba      	ldr	r2, [r7, #24]
 800d284:	4313      	orrs	r3, r2
 800d286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d288:	4935      	ldr	r1, [pc, #212]	@ (800d360 <HAL_GPIO_Init+0x2ec>)
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	089b      	lsrs	r3, r3, #2
 800d28e:	3302      	adds	r3, #2
 800d290:	69ba      	ldr	r2, [r7, #24]
 800d292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d296:	4b38      	ldr	r3, [pc, #224]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	43db      	mvns	r3, r3
 800d2a0:	69ba      	ldr	r2, [r7, #24]
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800d2b2:	69ba      	ldr	r2, [r7, #24]
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d2ba:	4a2f      	ldr	r2, [pc, #188]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d2c0:	4b2d      	ldr	r3, [pc, #180]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	43db      	mvns	r3, r3
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	4013      	ands	r3, r2
 800d2ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d2e4:	4a24      	ldr	r2, [pc, #144]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d2ea:	4b23      	ldr	r3, [pc, #140]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	43db      	mvns	r3, r3
 800d2f4:	69ba      	ldr	r2, [r7, #24]
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800d306:	69ba      	ldr	r2, [r7, #24]
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d30e:	4a1a      	ldr	r2, [pc, #104]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d314:	4b18      	ldr	r3, [pc, #96]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	43db      	mvns	r3, r3
 800d31e:	69ba      	ldr	r2, [r7, #24]
 800d320:	4013      	ands	r3, r2
 800d322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d003      	beq.n	800d338 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800d330:	69ba      	ldr	r2, [r7, #24]
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	4313      	orrs	r3, r2
 800d336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d338:	4a0f      	ldr	r2, [pc, #60]	@ (800d378 <HAL_GPIO_Init+0x304>)
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	3301      	adds	r3, #1
 800d342:	61fb      	str	r3, [r7, #28]
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	2b0f      	cmp	r3, #15
 800d348:	f67f aea2 	bls.w	800d090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d34c:	bf00      	nop
 800d34e:	bf00      	nop
 800d350:	3724      	adds	r7, #36	@ 0x24
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	40023800 	.word	0x40023800
 800d360:	40013800 	.word	0x40013800
 800d364:	40020000 	.word	0x40020000
 800d368:	40020400 	.word	0x40020400
 800d36c:	40020800 	.word	0x40020800
 800d370:	40020c00 	.word	0x40020c00
 800d374:	40021000 	.word	0x40021000
 800d378:	40013c00 	.word	0x40013c00

0800d37c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	691a      	ldr	r2, [r3, #16]
 800d38c:	887b      	ldrh	r3, [r7, #2]
 800d38e:	4013      	ands	r3, r2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d394:	2301      	movs	r3, #1
 800d396:	73fb      	strb	r3, [r7, #15]
 800d398:	e001      	b.n	800d39e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d39a:	2300      	movs	r3, #0
 800d39c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	807b      	strh	r3, [r7, #2]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d3bc:	787b      	ldrb	r3, [r7, #1]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d3c2:	887a      	ldrh	r2, [r7, #2]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d3c8:	e003      	b.n	800d3d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d3ca:	887b      	ldrh	r3, [r7, #2]
 800d3cc:	041a      	lsls	r2, r3, #16
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	619a      	str	r2, [r3, #24]
}
 800d3d2:	bf00      	nop
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
	...

0800d3e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d3ea:	4b08      	ldr	r3, [pc, #32]	@ (800d40c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d3ec:	695a      	ldr	r2, [r3, #20]
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	4013      	ands	r3, r2
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d006      	beq.n	800d404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d3f6:	4a05      	ldr	r2, [pc, #20]	@ (800d40c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d3f8:	88fb      	ldrh	r3, [r7, #6]
 800d3fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d3fc:	88fb      	ldrh	r3, [r7, #6]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7f8 f94c 	bl	800569c <HAL_GPIO_EXTI_Callback>
  }
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	40013c00 	.word	0x40013c00

0800d410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e12b      	b.n	800d67a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d106      	bne.n	800d43c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7f9 f942 	bl	80066c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2224      	movs	r2, #36	@ 0x24
 800d440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f022 0201 	bic.w	r2, r2, #1
 800d452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d474:	f002 f8a0 	bl	800f5b8 <HAL_RCC_GetPCLK1Freq>
 800d478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	4a81      	ldr	r2, [pc, #516]	@ (800d684 <HAL_I2C_Init+0x274>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d807      	bhi.n	800d494 <HAL_I2C_Init+0x84>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	4a80      	ldr	r2, [pc, #512]	@ (800d688 <HAL_I2C_Init+0x278>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	bf94      	ite	ls
 800d48c:	2301      	movls	r3, #1
 800d48e:	2300      	movhi	r3, #0
 800d490:	b2db      	uxtb	r3, r3
 800d492:	e006      	b.n	800d4a2 <HAL_I2C_Init+0x92>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4a7d      	ldr	r2, [pc, #500]	@ (800d68c <HAL_I2C_Init+0x27c>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	bf94      	ite	ls
 800d49c:	2301      	movls	r3, #1
 800d49e:	2300      	movhi	r3, #0
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e0e7      	b.n	800d67a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	4a78      	ldr	r2, [pc, #480]	@ (800d690 <HAL_I2C_Init+0x280>)
 800d4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b2:	0c9b      	lsrs	r3, r3, #18
 800d4b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	430a      	orrs	r2, r1
 800d4c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	6a1b      	ldr	r3, [r3, #32]
 800d4d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	4a6a      	ldr	r2, [pc, #424]	@ (800d684 <HAL_I2C_Init+0x274>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d802      	bhi.n	800d4e4 <HAL_I2C_Init+0xd4>
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	e009      	b.n	800d4f8 <HAL_I2C_Init+0xe8>
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d4ea:	fb02 f303 	mul.w	r3, r2, r3
 800d4ee:	4a69      	ldr	r2, [pc, #420]	@ (800d694 <HAL_I2C_Init+0x284>)
 800d4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d4f4:	099b      	lsrs	r3, r3, #6
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	6812      	ldr	r2, [r2, #0]
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d50a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	495c      	ldr	r1, [pc, #368]	@ (800d684 <HAL_I2C_Init+0x274>)
 800d514:	428b      	cmp	r3, r1
 800d516:	d819      	bhi.n	800d54c <HAL_I2C_Init+0x13c>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	1e59      	subs	r1, r3, #1
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	fbb1 f3f3 	udiv	r3, r1, r3
 800d526:	1c59      	adds	r1, r3, #1
 800d528:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d52c:	400b      	ands	r3, r1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00a      	beq.n	800d548 <HAL_I2C_Init+0x138>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	1e59      	subs	r1, r3, #1
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	fbb1 f3f3 	udiv	r3, r1, r3
 800d540:	3301      	adds	r3, #1
 800d542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d546:	e051      	b.n	800d5ec <HAL_I2C_Init+0x1dc>
 800d548:	2304      	movs	r3, #4
 800d54a:	e04f      	b.n	800d5ec <HAL_I2C_Init+0x1dc>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d111      	bne.n	800d578 <HAL_I2C_Init+0x168>
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	1e58      	subs	r0, r3, #1
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6859      	ldr	r1, [r3, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	440b      	add	r3, r1
 800d562:	fbb0 f3f3 	udiv	r3, r0, r3
 800d566:	3301      	adds	r3, #1
 800d568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	bf0c      	ite	eq
 800d570:	2301      	moveq	r3, #1
 800d572:	2300      	movne	r3, #0
 800d574:	b2db      	uxtb	r3, r3
 800d576:	e012      	b.n	800d59e <HAL_I2C_Init+0x18e>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	1e58      	subs	r0, r3, #1
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6859      	ldr	r1, [r3, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	440b      	add	r3, r1
 800d586:	0099      	lsls	r1, r3, #2
 800d588:	440b      	add	r3, r1
 800d58a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d58e:	3301      	adds	r3, #1
 800d590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d594:	2b00      	cmp	r3, #0
 800d596:	bf0c      	ite	eq
 800d598:	2301      	moveq	r3, #1
 800d59a:	2300      	movne	r3, #0
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <HAL_I2C_Init+0x196>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e022      	b.n	800d5ec <HAL_I2C_Init+0x1dc>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10e      	bne.n	800d5cc <HAL_I2C_Init+0x1bc>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	1e58      	subs	r0, r3, #1
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6859      	ldr	r1, [r3, #4]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	440b      	add	r3, r1
 800d5bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d5c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5ca:	e00f      	b.n	800d5ec <HAL_I2C_Init+0x1dc>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	1e58      	subs	r0, r3, #1
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6859      	ldr	r1, [r3, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	440b      	add	r3, r1
 800d5da:	0099      	lsls	r1, r3, #2
 800d5dc:	440b      	add	r3, r1
 800d5de:	fbb0 f3f3 	udiv	r3, r0, r3
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d5e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d5ec:	6879      	ldr	r1, [r7, #4]
 800d5ee:	6809      	ldr	r1, [r1, #0]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	69da      	ldr	r2, [r3, #28]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a1b      	ldr	r3, [r3, #32]
 800d606:	431a      	orrs	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	430a      	orrs	r2, r1
 800d60e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d61a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	6911      	ldr	r1, [r2, #16]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	68d2      	ldr	r2, [r2, #12]
 800d626:	4311      	orrs	r1, r2
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	6812      	ldr	r2, [r2, #0]
 800d62c:	430b      	orrs	r3, r1
 800d62e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	695a      	ldr	r2, [r3, #20]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	699b      	ldr	r3, [r3, #24]
 800d642:	431a      	orrs	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	430a      	orrs	r2, r1
 800d64a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f042 0201 	orr.w	r2, r2, #1
 800d65a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2220      	movs	r2, #32
 800d666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	000186a0 	.word	0x000186a0
 800d688:	001e847f 	.word	0x001e847f
 800d68c:	003d08ff 	.word	0x003d08ff
 800d690:	431bde83 	.word	0x431bde83
 800d694:	10624dd3 	.word	0x10624dd3

0800d698 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b088      	sub	sp, #32
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	607a      	str	r2, [r7, #4]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	817b      	strh	r3, [r7, #10]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d6ac:	f7fe fc48 	bl	800bf40 <HAL_GetTick>
 800d6b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b20      	cmp	r3, #32
 800d6bc:	f040 80e0 	bne.w	800d880 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	2319      	movs	r3, #25
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	4970      	ldr	r1, [pc, #448]	@ (800d88c <HAL_I2C_Master_Transmit+0x1f4>)
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f001 f90e 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d001      	beq.n	800d6da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e0d3      	b.n	800d882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d101      	bne.n	800d6e8 <HAL_I2C_Master_Transmit+0x50>
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e0cc      	b.n	800d882 <HAL_I2C_Master_Transmit+0x1ea>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d007      	beq.n	800d70e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f042 0201 	orr.w	r2, r2, #1
 800d70c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d71c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2221      	movs	r2, #33	@ 0x21
 800d722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2210      	movs	r2, #16
 800d72a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	893a      	ldrh	r2, [r7, #8]
 800d73e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d744:	b29a      	uxth	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	4a50      	ldr	r2, [pc, #320]	@ (800d890 <HAL_I2C_Master_Transmit+0x1f8>)
 800d74e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d750:	8979      	ldrh	r1, [r7, #10]
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	6a3a      	ldr	r2, [r7, #32]
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f000 fdfa 	bl	800e350 <I2C_MasterRequestWrite>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e08d      	b.n	800d882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d766:	2300      	movs	r3, #0
 800d768:	613b      	str	r3, [r7, #16]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	613b      	str	r3, [r7, #16]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	613b      	str	r3, [r7, #16]
 800d77a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d77c:	e066      	b.n	800d84c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	6a39      	ldr	r1, [r7, #32]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f001 f9cc 	bl	800eb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00d      	beq.n	800d7aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d792:	2b04      	cmp	r3, #4
 800d794:	d107      	bne.n	800d7a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d7a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e06b      	b.n	800d882 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ae:	781a      	ldrb	r2, [r3, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	695b      	ldr	r3, [r3, #20]
 800d7e0:	f003 0304 	and.w	r3, r3, #4
 800d7e4:	2b04      	cmp	r3, #4
 800d7e6:	d11b      	bne.n	800d820 <HAL_I2C_Master_Transmit+0x188>
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d017      	beq.n	800d820 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f4:	781a      	ldrb	r2, [r3, #0]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	3b01      	subs	r3, #1
 800d80e:	b29a      	uxth	r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d818:	3b01      	subs	r3, #1
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	6a39      	ldr	r1, [r7, #32]
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f001 f9c3 	bl	800ebb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00d      	beq.n	800d84c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d834:	2b04      	cmp	r3, #4
 800d836:	d107      	bne.n	800d848 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d846:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	e01a      	b.n	800d882 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d850:	2b00      	cmp	r3, #0
 800d852:	d194      	bne.n	800d77e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2220      	movs	r2, #32
 800d868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e000      	b.n	800d882 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d880:	2302      	movs	r3, #2
  }
}
 800d882:	4618      	mov	r0, r3
 800d884:	3718      	adds	r7, #24
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	00100002 	.word	0x00100002
 800d890:	ffff0000 	.word	0xffff0000

0800d894 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b08c      	sub	sp, #48	@ 0x30
 800d898:	af02      	add	r7, sp, #8
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	607a      	str	r2, [r7, #4]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	817b      	strh	r3, [r7, #10]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d8a8:	f7fe fb4a 	bl	800bf40 <HAL_GetTick>
 800d8ac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b20      	cmp	r3, #32
 800d8b8:	f040 8217 	bne.w	800dcea <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	2319      	movs	r3, #25
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	497c      	ldr	r1, [pc, #496]	@ (800dab8 <HAL_I2C_Master_Receive+0x224>)
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f001 f810 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d8d2:	2302      	movs	r3, #2
 800d8d4:	e20a      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d101      	bne.n	800d8e4 <HAL_I2C_Master_Receive+0x50>
 800d8e0:	2302      	movs	r3, #2
 800d8e2:	e203      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 0301 	and.w	r3, r3, #1
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d007      	beq.n	800d90a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f042 0201 	orr.w	r2, r2, #1
 800d908:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d918:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2222      	movs	r2, #34	@ 0x22
 800d91e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2210      	movs	r2, #16
 800d926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	893a      	ldrh	r2, [r7, #8]
 800d93a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d940:	b29a      	uxth	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	4a5c      	ldr	r2, [pc, #368]	@ (800dabc <HAL_I2C_Master_Receive+0x228>)
 800d94a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d94c:	8979      	ldrh	r1, [r7, #10]
 800d94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f000 fd7e 	bl	800e454 <I2C_MasterRequestRead>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	e1c4      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d966:	2b00      	cmp	r3, #0
 800d968:	d113      	bne.n	800d992 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d96a:	2300      	movs	r3, #0
 800d96c:	623b      	str	r3, [r7, #32]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	695b      	ldr	r3, [r3, #20]
 800d974:	623b      	str	r3, [r7, #32]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	623b      	str	r3, [r7, #32]
 800d97e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	e198      	b.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d996:	2b01      	cmp	r3, #1
 800d998:	d11b      	bne.n	800d9d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	61fb      	str	r3, [r7, #28]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	695b      	ldr	r3, [r3, #20]
 800d9b4:	61fb      	str	r3, [r7, #28]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	61fb      	str	r3, [r7, #28]
 800d9be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	e178      	b.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d11b      	bne.n	800da12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	61bb      	str	r3, [r7, #24]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	695b      	ldr	r3, [r3, #20]
 800da04:	61bb      	str	r3, [r7, #24]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	61bb      	str	r3, [r7, #24]
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	e158      	b.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800da20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da22:	2300      	movs	r3, #0
 800da24:	617b      	str	r3, [r7, #20]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	695b      	ldr	r3, [r3, #20]
 800da2c:	617b      	str	r3, [r7, #20]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	617b      	str	r3, [r7, #20]
 800da36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800da38:	e144      	b.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da3e:	2b03      	cmp	r3, #3
 800da40:	f200 80f1 	bhi.w	800dc26 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d123      	bne.n	800da94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f001 f8f5 	bl	800ec40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	e145      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	691a      	ldr	r2, [r3, #16]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da6a:	b2d2      	uxtb	r2, r2
 800da6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da72:	1c5a      	adds	r2, r3, #1
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da7c:	3b01      	subs	r3, #1
 800da7e:	b29a      	uxth	r2, r3
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da88:	b29b      	uxth	r3, r3
 800da8a:	3b01      	subs	r3, #1
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800da92:	e117      	b.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d14e      	bne.n	800db3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800da9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa2:	2200      	movs	r2, #0
 800daa4:	4906      	ldr	r1, [pc, #24]	@ (800dac0 <HAL_I2C_Master_Receive+0x22c>)
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f000 ff20 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d008      	beq.n	800dac4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e11a      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
 800dab6:	bf00      	nop
 800dab8:	00100002 	.word	0x00100002
 800dabc:	ffff0000 	.word	0xffff0000
 800dac0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	691a      	ldr	r2, [r3, #16]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dade:	b2d2      	uxtb	r2, r2
 800dae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daf0:	3b01      	subs	r3, #1
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	3b01      	subs	r3, #1
 800db00:	b29a      	uxth	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	691a      	ldr	r2, [r3, #16]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db10:	b2d2      	uxtb	r2, r2
 800db12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db18:	1c5a      	adds	r2, r3, #1
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db22:	3b01      	subs	r3, #1
 800db24:	b29a      	uxth	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db2e:	b29b      	uxth	r3, r3
 800db30:	3b01      	subs	r3, #1
 800db32:	b29a      	uxth	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db38:	e0c4      	b.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800db3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	2200      	movs	r2, #0
 800db42:	496c      	ldr	r1, [pc, #432]	@ (800dcf4 <HAL_I2C_Master_Receive+0x460>)
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f000 fed1 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d001      	beq.n	800db54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800db50:	2301      	movs	r3, #1
 800db52:	e0cb      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	691a      	ldr	r2, [r3, #16]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6e:	b2d2      	uxtb	r2, r2
 800db70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db80:	3b01      	subs	r3, #1
 800db82:	b29a      	uxth	r2, r3
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	3b01      	subs	r3, #1
 800db90:	b29a      	uxth	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800db96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db9c:	2200      	movs	r2, #0
 800db9e:	4955      	ldr	r1, [pc, #340]	@ (800dcf4 <HAL_I2C_Master_Receive+0x460>)
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f000 fea3 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e09d      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dbbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	691a      	ldr	r2, [r3, #16]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbca:	b2d2      	uxtb	r2, r2
 800dbcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	691a      	ldr	r2, [r3, #16]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbfc:	b2d2      	uxtb	r2, r2
 800dbfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc04:	1c5a      	adds	r2, r3, #1
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dc24:	e04e      	b.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f001 f808 	bl	800ec40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e058      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	691a      	ldr	r2, [r3, #16]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc44:	b2d2      	uxtb	r2, r2
 800dc46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc4c:	1c5a      	adds	r2, r3, #1
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc56:	3b01      	subs	r3, #1
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	3b01      	subs	r3, #1
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	f003 0304 	and.w	r3, r3, #4
 800dc76:	2b04      	cmp	r3, #4
 800dc78:	d124      	bne.n	800dcc4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d107      	bne.n	800dc92 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc90:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	691a      	ldr	r2, [r3, #16]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc9c:	b2d2      	uxtb	r2, r2
 800dc9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca4:	1c5a      	adds	r2, r3, #1
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f47f aeb6 	bne.w	800da3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2220      	movs	r2, #32
 800dcd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	e000      	b.n	800dcec <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800dcea:	2302      	movs	r3, #2
  }
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3728      	adds	r7, #40	@ 0x28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	00010004 	.word	0x00010004

0800dcf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b088      	sub	sp, #32
 800dcfc:	af02      	add	r7, sp, #8
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	4608      	mov	r0, r1
 800dd02:	4611      	mov	r1, r2
 800dd04:	461a      	mov	r2, r3
 800dd06:	4603      	mov	r3, r0
 800dd08:	817b      	strh	r3, [r7, #10]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	813b      	strh	r3, [r7, #8]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dd12:	f7fe f915 	bl	800bf40 <HAL_GetTick>
 800dd16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b20      	cmp	r3, #32
 800dd22:	f040 80d9 	bne.w	800ded8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	2319      	movs	r3, #25
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	496d      	ldr	r1, [pc, #436]	@ (800dee4 <HAL_I2C_Mem_Write+0x1ec>)
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 fddb 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d001      	beq.n	800dd40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	e0cc      	b.n	800deda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d101      	bne.n	800dd4e <HAL_I2C_Mem_Write+0x56>
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	e0c5      	b.n	800deda <HAL_I2C_Mem_Write+0x1e2>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d007      	beq.n	800dd74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f042 0201 	orr.w	r2, r2, #1
 800dd72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dd82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2221      	movs	r2, #33	@ 0x21
 800dd88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2240      	movs	r2, #64	@ 0x40
 800dd90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6a3a      	ldr	r2, [r7, #32]
 800dd9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dda4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4a4d      	ldr	r2, [pc, #308]	@ (800dee8 <HAL_I2C_Mem_Write+0x1f0>)
 800ddb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ddb6:	88f8      	ldrh	r0, [r7, #6]
 800ddb8:	893a      	ldrh	r2, [r7, #8]
 800ddba:	8979      	ldrh	r1, [r7, #10]
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	9301      	str	r3, [sp, #4]
 800ddc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f000 fc12 	bl	800e5f0 <I2C_RequestMemoryWrite>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d052      	beq.n	800de78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e081      	b.n	800deda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f000 fea0 	bl	800eb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800dde0:	4603      	mov	r3, r0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00d      	beq.n	800de02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddea:	2b04      	cmp	r3, #4
 800ddec:	d107      	bne.n	800ddfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ddfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e06b      	b.n	800deda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de06:	781a      	ldrb	r2, [r3, #0]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de1c:	3b01      	subs	r3, #1
 800de1e:	b29a      	uxth	r2, r3
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de28:	b29b      	uxth	r3, r3
 800de2a:	3b01      	subs	r3, #1
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	f003 0304 	and.w	r3, r3, #4
 800de3c:	2b04      	cmp	r3, #4
 800de3e:	d11b      	bne.n	800de78 <HAL_I2C_Mem_Write+0x180>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de44:	2b00      	cmp	r3, #0
 800de46:	d017      	beq.n	800de78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de58:	1c5a      	adds	r2, r3, #1
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de62:	3b01      	subs	r3, #1
 800de64:	b29a      	uxth	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de6e:	b29b      	uxth	r3, r3
 800de70:	3b01      	subs	r3, #1
 800de72:	b29a      	uxth	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d1aa      	bne.n	800ddd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de80:	697a      	ldr	r2, [r7, #20]
 800de82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f000 fe93 	bl	800ebb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00d      	beq.n	800deac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de94:	2b04      	cmp	r3, #4
 800de96:	d107      	bne.n	800dea8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dea6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	e016      	b.n	800deda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800deba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2220      	movs	r2, #32
 800dec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ded4:	2300      	movs	r3, #0
 800ded6:	e000      	b.n	800deda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ded8:	2302      	movs	r3, #2
  }
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	00100002 	.word	0x00100002
 800dee8:	ffff0000 	.word	0xffff0000

0800deec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08c      	sub	sp, #48	@ 0x30
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	4608      	mov	r0, r1
 800def6:	4611      	mov	r1, r2
 800def8:	461a      	mov	r2, r3
 800defa:	4603      	mov	r3, r0
 800defc:	817b      	strh	r3, [r7, #10]
 800defe:	460b      	mov	r3, r1
 800df00:	813b      	strh	r3, [r7, #8]
 800df02:	4613      	mov	r3, r2
 800df04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800df06:	f7fe f81b 	bl	800bf40 <HAL_GetTick>
 800df0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b20      	cmp	r3, #32
 800df16:	f040 8214 	bne.w	800e342 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800df1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	2319      	movs	r3, #25
 800df20:	2201      	movs	r2, #1
 800df22:	497b      	ldr	r1, [pc, #492]	@ (800e110 <HAL_I2C_Mem_Read+0x224>)
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 fce1 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800df30:	2302      	movs	r3, #2
 800df32:	e207      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d101      	bne.n	800df42 <HAL_I2C_Mem_Read+0x56>
 800df3e:	2302      	movs	r3, #2
 800df40:	e200      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2201      	movs	r2, #1
 800df46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 0301 	and.w	r3, r3, #1
 800df54:	2b01      	cmp	r3, #1
 800df56:	d007      	beq.n	800df68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f042 0201 	orr.w	r2, r2, #1
 800df66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800df76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2222      	movs	r2, #34	@ 0x22
 800df7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2240      	movs	r2, #64	@ 0x40
 800df84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800df98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	4a5b      	ldr	r2, [pc, #364]	@ (800e114 <HAL_I2C_Mem_Read+0x228>)
 800dfa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dfaa:	88f8      	ldrh	r0, [r7, #6]
 800dfac:	893a      	ldrh	r2, [r7, #8]
 800dfae:	8979      	ldrh	r1, [r7, #10]
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb2:	9301      	str	r3, [sp, #4]
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	4603      	mov	r3, r0
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f000 fbae 	bl	800e71c <I2C_RequestMemoryRead>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e1bc      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d113      	bne.n	800dffa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	623b      	str	r3, [r7, #32]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	623b      	str	r3, [r7, #32]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	699b      	ldr	r3, [r3, #24]
 800dfe4:	623b      	str	r3, [r7, #32]
 800dfe6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dff6:	601a      	str	r2, [r3, #0]
 800dff8:	e190      	b.n	800e31c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d11b      	bne.n	800e03a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e012:	2300      	movs	r3, #0
 800e014:	61fb      	str	r3, [r7, #28]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	61fb      	str	r3, [r7, #28]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	61fb      	str	r3, [r7, #28]
 800e026:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	e170      	b.n	800e31c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e03e:	2b02      	cmp	r3, #2
 800e040:	d11b      	bne.n	800e07a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e050:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e062:	2300      	movs	r3, #0
 800e064:	61bb      	str	r3, [r7, #24]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	61bb      	str	r3, [r7, #24]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	61bb      	str	r3, [r7, #24]
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	e150      	b.n	800e31c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e07a:	2300      	movs	r3, #0
 800e07c:	617b      	str	r3, [r7, #20]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	617b      	str	r3, [r7, #20]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	617b      	str	r3, [r7, #20]
 800e08e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800e090:	e144      	b.n	800e31c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e096:	2b03      	cmp	r3, #3
 800e098:	f200 80f1 	bhi.w	800e27e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d123      	bne.n	800e0ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f000 fdc9 	bl	800ec40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e145      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	691a      	ldr	r2, [r3, #16]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c2:	b2d2      	uxtb	r2, r2
 800e0c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e0ea:	e117      	b.n	800e31c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d14e      	bne.n	800e192 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	4906      	ldr	r1, [pc, #24]	@ (800e118 <HAL_I2C_Mem_Read+0x22c>)
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f000 fbf4 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d008      	beq.n	800e11c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e11a      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
 800e10e:	bf00      	nop
 800e110:	00100002 	.word	0x00100002
 800e114:	ffff0000 	.word	0xffff0000
 800e118:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e12a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	691a      	ldr	r2, [r3, #16]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13e:	1c5a      	adds	r2, r3, #1
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e148:	3b01      	subs	r3, #1
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e154:	b29b      	uxth	r3, r3
 800e156:	3b01      	subs	r3, #1
 800e158:	b29a      	uxth	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	691a      	ldr	r2, [r3, #16]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e168:	b2d2      	uxtb	r2, r2
 800e16a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e170:	1c5a      	adds	r2, r3, #1
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e17a:	3b01      	subs	r3, #1
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e186:	b29b      	uxth	r3, r3
 800e188:	3b01      	subs	r3, #1
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e190:	e0c4      	b.n	800e31c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e194:	9300      	str	r3, [sp, #0]
 800e196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e198:	2200      	movs	r2, #0
 800e19a:	496c      	ldr	r1, [pc, #432]	@ (800e34c <HAL_I2C_Mem_Read+0x460>)
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f000 fba5 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e0cb      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	691a      	ldr	r2, [r3, #16]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1c6:	b2d2      	uxtb	r2, r2
 800e1c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	4955      	ldr	r1, [pc, #340]	@ (800e34c <HAL_I2C_Mem_Read+0x460>)
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f000 fb77 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800e204:	2301      	movs	r3, #1
 800e206:	e09d      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	691a      	ldr	r2, [r3, #16]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e222:	b2d2      	uxtb	r2, r2
 800e224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e234:	3b01      	subs	r3, #1
 800e236:	b29a      	uxth	r2, r3
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e240:	b29b      	uxth	r3, r3
 800e242:	3b01      	subs	r3, #1
 800e244:	b29a      	uxth	r2, r3
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	691a      	ldr	r2, [r3, #16]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e254:	b2d2      	uxtb	r2, r2
 800e256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e266:	3b01      	subs	r3, #1
 800e268:	b29a      	uxth	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e272:	b29b      	uxth	r3, r3
 800e274:	3b01      	subs	r3, #1
 800e276:	b29a      	uxth	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e27c:	e04e      	b.n	800e31c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e280:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 fcdc 	bl	800ec40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e058      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	691a      	ldr	r2, [r3, #16]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e29c:	b2d2      	uxtb	r2, r2
 800e29e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a4:	1c5a      	adds	r2, r3, #1
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	f003 0304 	and.w	r3, r3, #4
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	d124      	bne.n	800e31c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	d107      	bne.n	800e2ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e2e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	691a      	ldr	r2, [r3, #16]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f4:	b2d2      	uxtb	r2, r2
 800e2f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2fc:	1c5a      	adds	r2, r3, #1
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e306:	3b01      	subs	r3, #1
 800e308:	b29a      	uxth	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e312:	b29b      	uxth	r3, r3
 800e314:	3b01      	subs	r3, #1
 800e316:	b29a      	uxth	r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e320:	2b00      	cmp	r3, #0
 800e322:	f47f aeb6 	bne.w	800e092 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2220      	movs	r2, #32
 800e32a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	e000      	b.n	800e344 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800e342:	2302      	movs	r3, #2
  }
}
 800e344:	4618      	mov	r0, r3
 800e346:	3728      	adds	r7, #40	@ 0x28
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	00010004 	.word	0x00010004

0800e350 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	607a      	str	r2, [r7, #4]
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	460b      	mov	r3, r1
 800e35e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e364:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2b08      	cmp	r3, #8
 800e36a:	d006      	beq.n	800e37a <I2C_MasterRequestWrite+0x2a>
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d003      	beq.n	800e37a <I2C_MasterRequestWrite+0x2a>
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e378:	d108      	bne.n	800e38c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e388:	601a      	str	r2, [r3, #0]
 800e38a:	e00b      	b.n	800e3a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e390:	2b12      	cmp	r3, #18
 800e392:	d107      	bne.n	800e3a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e3a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f000 fa9b 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00d      	beq.n	800e3d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3ca:	d103      	bne.n	800e3d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e035      	b.n	800e444 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	691b      	ldr	r3, [r3, #16]
 800e3dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e3e0:	d108      	bne.n	800e3f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e3e2:	897b      	ldrh	r3, [r7, #10]
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e3f0:	611a      	str	r2, [r3, #16]
 800e3f2:	e01b      	b.n	800e42c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e3f4:	897b      	ldrh	r3, [r7, #10]
 800e3f6:	11db      	asrs	r3, r3, #7
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	f003 0306 	and.w	r3, r3, #6
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	f063 030f 	orn	r3, r3, #15
 800e404:	b2da      	uxtb	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	490e      	ldr	r1, [pc, #56]	@ (800e44c <I2C_MasterRequestWrite+0xfc>)
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f000 fae4 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	e010      	b.n	800e444 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e422:	897b      	ldrh	r3, [r7, #10]
 800e424:	b2da      	uxtb	r2, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4907      	ldr	r1, [pc, #28]	@ (800e450 <I2C_MasterRequestWrite+0x100>)
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f000 fad4 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e43e:	2301      	movs	r3, #1
 800e440:	e000      	b.n	800e444 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	00010008 	.word	0x00010008
 800e450:	00010002 	.word	0x00010002

0800e454 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af02      	add	r7, sp, #8
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	607a      	str	r2, [r7, #4]
 800e45e:	603b      	str	r3, [r7, #0]
 800e460:	460b      	mov	r3, r1
 800e462:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e468:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e478:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b08      	cmp	r3, #8
 800e47e:	d006      	beq.n	800e48e <I2C_MasterRequestRead+0x3a>
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d003      	beq.n	800e48e <I2C_MasterRequestRead+0x3a>
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e48c:	d108      	bne.n	800e4a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	e00b      	b.n	800e4b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4a4:	2b11      	cmp	r3, #17
 800e4a6:	d107      	bne.n	800e4b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e4b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f000 fa11 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00d      	beq.n	800e4ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4de:	d103      	bne.n	800e4e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	e079      	b.n	800e5e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4f4:	d108      	bne.n	800e508 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e4f6:	897b      	ldrh	r3, [r7, #10]
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	f043 0301 	orr.w	r3, r3, #1
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	611a      	str	r2, [r3, #16]
 800e506:	e05f      	b.n	800e5c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e508:	897b      	ldrh	r3, [r7, #10]
 800e50a:	11db      	asrs	r3, r3, #7
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	f003 0306 	and.w	r3, r3, #6
 800e512:	b2db      	uxtb	r3, r3
 800e514:	f063 030f 	orn	r3, r3, #15
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	4930      	ldr	r1, [pc, #192]	@ (800e5e8 <I2C_MasterRequestRead+0x194>)
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f000 fa5a 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	e054      	b.n	800e5e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e536:	897b      	ldrh	r3, [r7, #10]
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	4929      	ldr	r1, [pc, #164]	@ (800e5ec <I2C_MasterRequestRead+0x198>)
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f000 fa4a 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d001      	beq.n	800e556 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	e044      	b.n	800e5e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e556:	2300      	movs	r3, #0
 800e558:	613b      	str	r3, [r7, #16]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	613b      	str	r3, [r7, #16]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	699b      	ldr	r3, [r3, #24]
 800e568:	613b      	str	r3, [r7, #16]
 800e56a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e57a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f000 f9af 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00d      	beq.n	800e5b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e59e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5a2:	d103      	bne.n	800e5ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e017      	b.n	800e5e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e5b0:	897b      	ldrh	r3, [r7, #10]
 800e5b2:	11db      	asrs	r3, r3, #7
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	f003 0306 	and.w	r3, r3, #6
 800e5ba:	b2db      	uxtb	r3, r3
 800e5bc:	f063 030e 	orn	r3, r3, #14
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	4907      	ldr	r1, [pc, #28]	@ (800e5ec <I2C_MasterRequestRead+0x198>)
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f000 fa06 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3718      	adds	r7, #24
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	00010008 	.word	0x00010008
 800e5ec:	00010002 	.word	0x00010002

0800e5f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b088      	sub	sp, #32
 800e5f4:	af02      	add	r7, sp, #8
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	4608      	mov	r0, r1
 800e5fa:	4611      	mov	r1, r2
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	4603      	mov	r3, r0
 800e600:	817b      	strh	r3, [r7, #10]
 800e602:	460b      	mov	r3, r1
 800e604:	813b      	strh	r3, [r7, #8]
 800e606:	4613      	mov	r3, r2
 800e608:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	6a3b      	ldr	r3, [r7, #32]
 800e620:	2200      	movs	r2, #0
 800e622:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f960 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00d      	beq.n	800e64e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e640:	d103      	bne.n	800e64a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e648:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e64a:	2303      	movs	r3, #3
 800e64c:	e05f      	b.n	800e70e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e64e:	897b      	ldrh	r3, [r7, #10]
 800e650:	b2db      	uxtb	r3, r3
 800e652:	461a      	mov	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e65c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e660:	6a3a      	ldr	r2, [r7, #32]
 800e662:	492d      	ldr	r1, [pc, #180]	@ (800e718 <I2C_RequestMemoryWrite+0x128>)
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f000 f9bb 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d001      	beq.n	800e674 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	e04c      	b.n	800e70e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e674:	2300      	movs	r3, #0
 800e676:	617b      	str	r3, [r7, #20]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	617b      	str	r3, [r7, #20]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	699b      	ldr	r3, [r3, #24]
 800e686:	617b      	str	r3, [r7, #20]
 800e688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e68c:	6a39      	ldr	r1, [r7, #32]
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f000 fa46 	bl	800eb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800e694:	4603      	mov	r3, r0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00d      	beq.n	800e6b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e69e:	2b04      	cmp	r3, #4
 800e6a0:	d107      	bne.n	800e6b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e6b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e02b      	b.n	800e70e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e6b6:	88fb      	ldrh	r3, [r7, #6]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d105      	bne.n	800e6c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e6bc:	893b      	ldrh	r3, [r7, #8]
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	611a      	str	r2, [r3, #16]
 800e6c6:	e021      	b.n	800e70c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e6c8:	893b      	ldrh	r3, [r7, #8]
 800e6ca:	0a1b      	lsrs	r3, r3, #8
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6d8:	6a39      	ldr	r1, [r7, #32]
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f000 fa20 	bl	800eb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00d      	beq.n	800e702 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	d107      	bne.n	800e6fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e6fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	e005      	b.n	800e70e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e702:	893b      	ldrh	r3, [r7, #8]
 800e704:	b2da      	uxtb	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	00010002 	.word	0x00010002

0800e71c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b088      	sub	sp, #32
 800e720:	af02      	add	r7, sp, #8
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	4608      	mov	r0, r1
 800e726:	4611      	mov	r1, r2
 800e728:	461a      	mov	r2, r3
 800e72a:	4603      	mov	r3, r0
 800e72c:	817b      	strh	r3, [r7, #10]
 800e72e:	460b      	mov	r3, r1
 800e730:	813b      	strh	r3, [r7, #8]
 800e732:	4613      	mov	r3, r2
 800e734:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e744:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e754:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e762:	68f8      	ldr	r0, [r7, #12]
 800e764:	f000 f8c2 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00d      	beq.n	800e78a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e77c:	d103      	bne.n	800e786 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e784:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e786:	2303      	movs	r3, #3
 800e788:	e0aa      	b.n	800e8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e78a:	897b      	ldrh	r3, [r7, #10]
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	461a      	mov	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e798:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79c:	6a3a      	ldr	r2, [r7, #32]
 800e79e:	4952      	ldr	r1, [pc, #328]	@ (800e8e8 <I2C_RequestMemoryRead+0x1cc>)
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f000 f91d 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d001      	beq.n	800e7b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e097      	b.n	800e8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	617b      	str	r3, [r7, #20]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	695b      	ldr	r3, [r3, #20]
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	699b      	ldr	r3, [r3, #24]
 800e7c2:	617b      	str	r3, [r7, #20]
 800e7c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7c8:	6a39      	ldr	r1, [r7, #32]
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f000 f9a8 	bl	800eb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00d      	beq.n	800e7f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7da:	2b04      	cmp	r3, #4
 800e7dc:	d107      	bne.n	800e7ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e7ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e076      	b.n	800e8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e7f2:	88fb      	ldrh	r3, [r7, #6]
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d105      	bne.n	800e804 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e7f8:	893b      	ldrh	r3, [r7, #8]
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	611a      	str	r2, [r3, #16]
 800e802:	e021      	b.n	800e848 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e804:	893b      	ldrh	r3, [r7, #8]
 800e806:	0a1b      	lsrs	r3, r3, #8
 800e808:	b29b      	uxth	r3, r3
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e814:	6a39      	ldr	r1, [r7, #32]
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f000 f982 	bl	800eb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00d      	beq.n	800e83e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e826:	2b04      	cmp	r3, #4
 800e828:	d107      	bne.n	800e83a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e838:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e050      	b.n	800e8e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e83e:	893b      	ldrh	r3, [r7, #8]
 800e840:	b2da      	uxtb	r2, r3
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e84a:	6a39      	ldr	r1, [r7, #32]
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f000 f967 	bl	800eb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00d      	beq.n	800e874 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e85c:	2b04      	cmp	r3, #4
 800e85e:	d107      	bne.n	800e870 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e86e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	e035      	b.n	800e8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e882:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	6a3b      	ldr	r3, [r7, #32]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f000 f82b 	bl	800e8ec <I2C_WaitOnFlagUntilTimeout>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00d      	beq.n	800e8b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8aa:	d103      	bne.n	800e8b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e013      	b.n	800e8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e8b8:	897b      	ldrh	r3, [r7, #10]
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	f043 0301 	orr.w	r3, r3, #1
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ca:	6a3a      	ldr	r2, [r7, #32]
 800e8cc:	4906      	ldr	r1, [pc, #24]	@ (800e8e8 <I2C_RequestMemoryRead+0x1cc>)
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f000 f886 	bl	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e000      	b.n	800e8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3718      	adds	r7, #24
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	00010002 	.word	0x00010002

0800e8ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	603b      	str	r3, [r7, #0]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e8fc:	e048      	b.n	800e990 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e904:	d044      	beq.n	800e990 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e906:	f7fd fb1b 	bl	800bf40 <HAL_GetTick>
 800e90a:	4602      	mov	r2, r0
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	683a      	ldr	r2, [r7, #0]
 800e912:	429a      	cmp	r2, r3
 800e914:	d302      	bcc.n	800e91c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d139      	bne.n	800e990 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	0c1b      	lsrs	r3, r3, #16
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b01      	cmp	r3, #1
 800e924:	d10d      	bne.n	800e942 <I2C_WaitOnFlagUntilTimeout+0x56>
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	695b      	ldr	r3, [r3, #20]
 800e92c:	43da      	mvns	r2, r3
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	4013      	ands	r3, r2
 800e932:	b29b      	uxth	r3, r3
 800e934:	2b00      	cmp	r3, #0
 800e936:	bf0c      	ite	eq
 800e938:	2301      	moveq	r3, #1
 800e93a:	2300      	movne	r3, #0
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	461a      	mov	r2, r3
 800e940:	e00c      	b.n	800e95c <I2C_WaitOnFlagUntilTimeout+0x70>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	43da      	mvns	r2, r3
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	4013      	ands	r3, r2
 800e94e:	b29b      	uxth	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	bf0c      	ite	eq
 800e954:	2301      	moveq	r3, #1
 800e956:	2300      	movne	r3, #0
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	461a      	mov	r2, r3
 800e95c:	79fb      	ldrb	r3, [r7, #7]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d116      	bne.n	800e990 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2220      	movs	r2, #32
 800e96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2200      	movs	r2, #0
 800e974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e97c:	f043 0220 	orr.w	r2, r3, #32
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e98c:	2301      	movs	r3, #1
 800e98e:	e023      	b.n	800e9d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	0c1b      	lsrs	r3, r3, #16
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b01      	cmp	r3, #1
 800e998:	d10d      	bne.n	800e9b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	695b      	ldr	r3, [r3, #20]
 800e9a0:	43da      	mvns	r2, r3
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	bf0c      	ite	eq
 800e9ac:	2301      	moveq	r3, #1
 800e9ae:	2300      	movne	r3, #0
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	e00c      	b.n	800e9d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	699b      	ldr	r3, [r3, #24]
 800e9bc:	43da      	mvns	r2, r3
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	4013      	ands	r3, r2
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	bf0c      	ite	eq
 800e9c8:	2301      	moveq	r3, #1
 800e9ca:	2300      	movne	r3, #0
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	79fb      	ldrb	r3, [r7, #7]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d093      	beq.n	800e8fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3710      	adds	r7, #16
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
 800e9ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e9ee:	e071      	b.n	800ead4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9fe:	d123      	bne.n	800ea48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ea18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2220      	movs	r2, #32
 800ea24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea34:	f043 0204 	orr.w	r2, r3, #4
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	e067      	b.n	800eb18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4e:	d041      	beq.n	800ead4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea50:	f7fd fa76 	bl	800bf40 <HAL_GetTick>
 800ea54:	4602      	mov	r2, r0
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d302      	bcc.n	800ea66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d136      	bne.n	800ead4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	0c1b      	lsrs	r3, r3, #16
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d10c      	bne.n	800ea8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	695b      	ldr	r3, [r3, #20]
 800ea76:	43da      	mvns	r2, r3
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	4013      	ands	r3, r2
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bf14      	ite	ne
 800ea82:	2301      	movne	r3, #1
 800ea84:	2300      	moveq	r3, #0
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	e00b      	b.n	800eaa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	43da      	mvns	r2, r3
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	4013      	ands	r3, r2
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	bf14      	ite	ne
 800ea9c:	2301      	movne	r3, #1
 800ea9e:	2300      	moveq	r3, #0
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d016      	beq.n	800ead4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2220      	movs	r2, #32
 800eab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eac0:	f043 0220 	orr.w	r2, r3, #32
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2200      	movs	r2, #0
 800eacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e021      	b.n	800eb18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	0c1b      	lsrs	r3, r3, #16
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d10c      	bne.n	800eaf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	695b      	ldr	r3, [r3, #20]
 800eae4:	43da      	mvns	r2, r3
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	4013      	ands	r3, r2
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bf14      	ite	ne
 800eaf0:	2301      	movne	r3, #1
 800eaf2:	2300      	moveq	r3, #0
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	e00b      	b.n	800eb10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	43da      	mvns	r2, r3
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	4013      	ands	r3, r2
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	bf14      	ite	ne
 800eb0a:	2301      	movne	r3, #1
 800eb0c:	2300      	moveq	r3, #0
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f47f af6d 	bne.w	800e9f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb2c:	e034      	b.n	800eb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f000 f8e3 	bl	800ecfa <I2C_IsAcknowledgeFailed>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	e034      	b.n	800eba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb44:	d028      	beq.n	800eb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb46:	f7fd f9fb 	bl	800bf40 <HAL_GetTick>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d302      	bcc.n	800eb5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d11d      	bne.n	800eb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb66:	2b80      	cmp	r3, #128	@ 0x80
 800eb68:	d016      	beq.n	800eb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2220      	movs	r2, #32
 800eb74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb84:	f043 0220 	orr.w	r2, r3, #32
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e007      	b.n	800eba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	695b      	ldr	r3, [r3, #20]
 800eb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eba2:	2b80      	cmp	r3, #128	@ 0x80
 800eba4:	d1c3      	bne.n	800eb2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3710      	adds	r7, #16
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ebbc:	e034      	b.n	800ec28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f000 f89b 	bl	800ecfa <I2C_IsAcknowledgeFailed>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e034      	b.n	800ec38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd4:	d028      	beq.n	800ec28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebd6:	f7fd f9b3 	bl	800bf40 <HAL_GetTick>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d302      	bcc.n	800ebec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d11d      	bne.n	800ec28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	f003 0304 	and.w	r3, r3, #4
 800ebf6:	2b04      	cmp	r3, #4
 800ebf8:	d016      	beq.n	800ec28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2220      	movs	r2, #32
 800ec04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec14:	f043 0220 	orr.w	r2, r3, #32
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e007      	b.n	800ec38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	f003 0304 	and.w	r3, r3, #4
 800ec32:	2b04      	cmp	r3, #4
 800ec34:	d1c3      	bne.n	800ebbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ec4c:	e049      	b.n	800ece2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	695b      	ldr	r3, [r3, #20]
 800ec54:	f003 0310 	and.w	r3, r3, #16
 800ec58:	2b10      	cmp	r3, #16
 800ec5a:	d119      	bne.n	800ec90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f06f 0210 	mvn.w	r2, #16
 800ec64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2220      	movs	r2, #32
 800ec70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2200      	movs	r2, #0
 800ec78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e030      	b.n	800ecf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec90:	f7fd f956 	bl	800bf40 <HAL_GetTick>
 800ec94:	4602      	mov	r2, r0
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d302      	bcc.n	800eca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d11d      	bne.n	800ece2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	695b      	ldr	r3, [r3, #20]
 800ecac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecb0:	2b40      	cmp	r3, #64	@ 0x40
 800ecb2:	d016      	beq.n	800ece2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2220      	movs	r2, #32
 800ecbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecce:	f043 0220 	orr.w	r2, r3, #32
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	e007      	b.n	800ecf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	695b      	ldr	r3, [r3, #20]
 800ece8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecec:	2b40      	cmp	r3, #64	@ 0x40
 800ecee:	d1ae      	bne.n	800ec4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ecfa:	b480      	push	{r7}
 800ecfc:	b083      	sub	sp, #12
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed10:	d11b      	bne.n	800ed4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ed1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2220      	movs	r2, #32
 800ed26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed36:	f043 0204 	orr.w	r2, r3, #4
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ed46:	2301      	movs	r3, #1
 800ed48:	e000      	b.n	800ed4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d101      	bne.n	800ed6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ed66:	2301      	movs	r3, #1
 800ed68:	e267      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f003 0301 	and.w	r3, r3, #1
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d075      	beq.n	800ee62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ed76:	4b88      	ldr	r3, [pc, #544]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	f003 030c 	and.w	r3, r3, #12
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	d00c      	beq.n	800ed9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ed82:	4b85      	ldr	r3, [pc, #532]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ed8a:	2b08      	cmp	r3, #8
 800ed8c:	d112      	bne.n	800edb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ed8e:	4b82      	ldr	r3, [pc, #520]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ed9a:	d10b      	bne.n	800edb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed9c:	4b7e      	ldr	r3, [pc, #504]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d05b      	beq.n	800ee60 <HAL_RCC_OscConfig+0x108>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d157      	bne.n	800ee60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	e242      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edbc:	d106      	bne.n	800edcc <HAL_RCC_OscConfig+0x74>
 800edbe:	4b76      	ldr	r3, [pc, #472]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4a75      	ldr	r2, [pc, #468]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800edc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800edc8:	6013      	str	r3, [r2, #0]
 800edca:	e01d      	b.n	800ee08 <HAL_RCC_OscConfig+0xb0>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800edd4:	d10c      	bne.n	800edf0 <HAL_RCC_OscConfig+0x98>
 800edd6:	4b70      	ldr	r3, [pc, #448]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a6f      	ldr	r2, [pc, #444]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800eddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ede0:	6013      	str	r3, [r2, #0]
 800ede2:	4b6d      	ldr	r3, [pc, #436]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a6c      	ldr	r2, [pc, #432]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ede8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800edec:	6013      	str	r3, [r2, #0]
 800edee:	e00b      	b.n	800ee08 <HAL_RCC_OscConfig+0xb0>
 800edf0:	4b69      	ldr	r3, [pc, #420]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a68      	ldr	r2, [pc, #416]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800edf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800edfa:	6013      	str	r3, [r2, #0]
 800edfc:	4b66      	ldr	r3, [pc, #408]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a65      	ldr	r2, [pc, #404]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ee02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d013      	beq.n	800ee38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee10:	f7fd f896 	bl	800bf40 <HAL_GetTick>
 800ee14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee16:	e008      	b.n	800ee2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee18:	f7fd f892 	bl	800bf40 <HAL_GetTick>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	2b64      	cmp	r3, #100	@ 0x64
 800ee24:	d901      	bls.n	800ee2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e207      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee2a:	4b5b      	ldr	r3, [pc, #364]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d0f0      	beq.n	800ee18 <HAL_RCC_OscConfig+0xc0>
 800ee36:	e014      	b.n	800ee62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee38:	f7fd f882 	bl	800bf40 <HAL_GetTick>
 800ee3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee3e:	e008      	b.n	800ee52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee40:	f7fd f87e 	bl	800bf40 <HAL_GetTick>
 800ee44:	4602      	mov	r2, r0
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	1ad3      	subs	r3, r2, r3
 800ee4a:	2b64      	cmp	r3, #100	@ 0x64
 800ee4c:	d901      	bls.n	800ee52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ee4e:	2303      	movs	r3, #3
 800ee50:	e1f3      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee52:	4b51      	ldr	r3, [pc, #324]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1f0      	bne.n	800ee40 <HAL_RCC_OscConfig+0xe8>
 800ee5e:	e000      	b.n	800ee62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f003 0302 	and.w	r3, r3, #2
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d063      	beq.n	800ef36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ee6e:	4b4a      	ldr	r3, [pc, #296]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	f003 030c 	and.w	r3, r3, #12
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00b      	beq.n	800ee92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ee7a:	4b47      	ldr	r3, [pc, #284]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ee82:	2b08      	cmp	r3, #8
 800ee84:	d11c      	bne.n	800eec0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ee86:	4b44      	ldr	r3, [pc, #272]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d116      	bne.n	800eec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ee92:	4b41      	ldr	r3, [pc, #260]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f003 0302 	and.w	r3, r3, #2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d005      	beq.n	800eeaa <HAL_RCC_OscConfig+0x152>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d001      	beq.n	800eeaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	e1c7      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eeaa:	4b3b      	ldr	r3, [pc, #236]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	4937      	ldr	r1, [pc, #220]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800eeba:	4313      	orrs	r3, r2
 800eebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eebe:	e03a      	b.n	800ef36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d020      	beq.n	800ef0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eec8:	4b34      	ldr	r3, [pc, #208]	@ (800ef9c <HAL_RCC_OscConfig+0x244>)
 800eeca:	2201      	movs	r2, #1
 800eecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eece:	f7fd f837 	bl	800bf40 <HAL_GetTick>
 800eed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eed4:	e008      	b.n	800eee8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eed6:	f7fd f833 	bl	800bf40 <HAL_GetTick>
 800eeda:	4602      	mov	r2, r0
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d901      	bls.n	800eee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eee4:	2303      	movs	r3, #3
 800eee6:	e1a8      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eee8:	4b2b      	ldr	r3, [pc, #172]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f003 0302 	and.w	r3, r3, #2
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d0f0      	beq.n	800eed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eef4:	4b28      	ldr	r3, [pc, #160]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	691b      	ldr	r3, [r3, #16]
 800ef00:	00db      	lsls	r3, r3, #3
 800ef02:	4925      	ldr	r1, [pc, #148]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ef04:	4313      	orrs	r3, r2
 800ef06:	600b      	str	r3, [r1, #0]
 800ef08:	e015      	b.n	800ef36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef0a:	4b24      	ldr	r3, [pc, #144]	@ (800ef9c <HAL_RCC_OscConfig+0x244>)
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef10:	f7fd f816 	bl	800bf40 <HAL_GetTick>
 800ef14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef16:	e008      	b.n	800ef2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef18:	f7fd f812 	bl	800bf40 <HAL_GetTick>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	1ad3      	subs	r3, r2, r3
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d901      	bls.n	800ef2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ef26:	2303      	movs	r3, #3
 800ef28:	e187      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f003 0302 	and.w	r3, r3, #2
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1f0      	bne.n	800ef18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f003 0308 	and.w	r3, r3, #8
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d036      	beq.n	800efb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d016      	beq.n	800ef78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ef4a:	4b15      	ldr	r3, [pc, #84]	@ (800efa0 <HAL_RCC_OscConfig+0x248>)
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef50:	f7fc fff6 	bl	800bf40 <HAL_GetTick>
 800ef54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef56:	e008      	b.n	800ef6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef58:	f7fc fff2 	bl	800bf40 <HAL_GetTick>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	2b02      	cmp	r3, #2
 800ef64:	d901      	bls.n	800ef6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ef66:	2303      	movs	r3, #3
 800ef68:	e167      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef98 <HAL_RCC_OscConfig+0x240>)
 800ef6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d0f0      	beq.n	800ef58 <HAL_RCC_OscConfig+0x200>
 800ef76:	e01b      	b.n	800efb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ef78:	4b09      	ldr	r3, [pc, #36]	@ (800efa0 <HAL_RCC_OscConfig+0x248>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef7e:	f7fc ffdf 	bl	800bf40 <HAL_GetTick>
 800ef82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ef84:	e00e      	b.n	800efa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef86:	f7fc ffdb 	bl	800bf40 <HAL_GetTick>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	2b02      	cmp	r3, #2
 800ef92:	d907      	bls.n	800efa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ef94:	2303      	movs	r3, #3
 800ef96:	e150      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
 800ef98:	40023800 	.word	0x40023800
 800ef9c:	42470000 	.word	0x42470000
 800efa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800efa4:	4b88      	ldr	r3, [pc, #544]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800efa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efa8:	f003 0302 	and.w	r3, r3, #2
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1ea      	bne.n	800ef86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f003 0304 	and.w	r3, r3, #4
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 8097 	beq.w	800f0ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800efbe:	2300      	movs	r3, #0
 800efc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800efc2:	4b81      	ldr	r3, [pc, #516]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800efc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10f      	bne.n	800efee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800efce:	2300      	movs	r3, #0
 800efd0:	60bb      	str	r3, [r7, #8]
 800efd2:	4b7d      	ldr	r3, [pc, #500]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800efd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efd6:	4a7c      	ldr	r2, [pc, #496]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800efd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efdc:	6413      	str	r3, [r2, #64]	@ 0x40
 800efde:	4b7a      	ldr	r3, [pc, #488]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800efe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800efe6:	60bb      	str	r3, [r7, #8]
 800efe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800efea:	2301      	movs	r3, #1
 800efec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800efee:	4b77      	ldr	r3, [pc, #476]	@ (800f1cc <HAL_RCC_OscConfig+0x474>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d118      	bne.n	800f02c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800effa:	4b74      	ldr	r3, [pc, #464]	@ (800f1cc <HAL_RCC_OscConfig+0x474>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4a73      	ldr	r2, [pc, #460]	@ (800f1cc <HAL_RCC_OscConfig+0x474>)
 800f000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f006:	f7fc ff9b 	bl	800bf40 <HAL_GetTick>
 800f00a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f00c:	e008      	b.n	800f020 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f00e:	f7fc ff97 	bl	800bf40 <HAL_GetTick>
 800f012:	4602      	mov	r2, r0
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	2b02      	cmp	r3, #2
 800f01a:	d901      	bls.n	800f020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f01c:	2303      	movs	r3, #3
 800f01e:	e10c      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f020:	4b6a      	ldr	r3, [pc, #424]	@ (800f1cc <HAL_RCC_OscConfig+0x474>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0f0      	beq.n	800f00e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	689b      	ldr	r3, [r3, #8]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d106      	bne.n	800f042 <HAL_RCC_OscConfig+0x2ea>
 800f034:	4b64      	ldr	r3, [pc, #400]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f038:	4a63      	ldr	r2, [pc, #396]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f03a:	f043 0301 	orr.w	r3, r3, #1
 800f03e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f040:	e01c      	b.n	800f07c <HAL_RCC_OscConfig+0x324>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	689b      	ldr	r3, [r3, #8]
 800f046:	2b05      	cmp	r3, #5
 800f048:	d10c      	bne.n	800f064 <HAL_RCC_OscConfig+0x30c>
 800f04a:	4b5f      	ldr	r3, [pc, #380]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f04c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f04e:	4a5e      	ldr	r2, [pc, #376]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f050:	f043 0304 	orr.w	r3, r3, #4
 800f054:	6713      	str	r3, [r2, #112]	@ 0x70
 800f056:	4b5c      	ldr	r3, [pc, #368]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f05a:	4a5b      	ldr	r2, [pc, #364]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f05c:	f043 0301 	orr.w	r3, r3, #1
 800f060:	6713      	str	r3, [r2, #112]	@ 0x70
 800f062:	e00b      	b.n	800f07c <HAL_RCC_OscConfig+0x324>
 800f064:	4b58      	ldr	r3, [pc, #352]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f068:	4a57      	ldr	r2, [pc, #348]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f06a:	f023 0301 	bic.w	r3, r3, #1
 800f06e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f070:	4b55      	ldr	r3, [pc, #340]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f074:	4a54      	ldr	r2, [pc, #336]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f076:	f023 0304 	bic.w	r3, r3, #4
 800f07a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d015      	beq.n	800f0b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f084:	f7fc ff5c 	bl	800bf40 <HAL_GetTick>
 800f088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f08a:	e00a      	b.n	800f0a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f08c:	f7fc ff58 	bl	800bf40 <HAL_GetTick>
 800f090:	4602      	mov	r2, r0
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d901      	bls.n	800f0a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f09e:	2303      	movs	r3, #3
 800f0a0:	e0cb      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f0a2:	4b49      	ldr	r3, [pc, #292]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f0a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0a6:	f003 0302 	and.w	r3, r3, #2
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d0ee      	beq.n	800f08c <HAL_RCC_OscConfig+0x334>
 800f0ae:	e014      	b.n	800f0da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f0b0:	f7fc ff46 	bl	800bf40 <HAL_GetTick>
 800f0b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f0b6:	e00a      	b.n	800f0ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0b8:	f7fc ff42 	bl	800bf40 <HAL_GetTick>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d901      	bls.n	800f0ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f0ca:	2303      	movs	r3, #3
 800f0cc:	e0b5      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f0ce:	4b3e      	ldr	r3, [pc, #248]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0d2:	f003 0302 	and.w	r3, r3, #2
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1ee      	bne.n	800f0b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d105      	bne.n	800f0ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f0e0:	4b39      	ldr	r3, [pc, #228]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0e4:	4a38      	ldr	r2, [pc, #224]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f0e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f0ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 80a1 	beq.w	800f238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f0f6:	4b34      	ldr	r3, [pc, #208]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f0f8:	689b      	ldr	r3, [r3, #8]
 800f0fa:	f003 030c 	and.w	r3, r3, #12
 800f0fe:	2b08      	cmp	r3, #8
 800f100:	d05c      	beq.n	800f1bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	2b02      	cmp	r3, #2
 800f108:	d141      	bne.n	800f18e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f10a:	4b31      	ldr	r3, [pc, #196]	@ (800f1d0 <HAL_RCC_OscConfig+0x478>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f110:	f7fc ff16 	bl	800bf40 <HAL_GetTick>
 800f114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f116:	e008      	b.n	800f12a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f118:	f7fc ff12 	bl	800bf40 <HAL_GetTick>
 800f11c:	4602      	mov	r2, r0
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	2b02      	cmp	r3, #2
 800f124:	d901      	bls.n	800f12a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f126:	2303      	movs	r3, #3
 800f128:	e087      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f12a:	4b27      	ldr	r3, [pc, #156]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1f0      	bne.n	800f118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	69da      	ldr	r2, [r3, #28]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a1b      	ldr	r3, [r3, #32]
 800f13e:	431a      	orrs	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f144:	019b      	lsls	r3, r3, #6
 800f146:	431a      	orrs	r2, r3
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f14c:	085b      	lsrs	r3, r3, #1
 800f14e:	3b01      	subs	r3, #1
 800f150:	041b      	lsls	r3, r3, #16
 800f152:	431a      	orrs	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f158:	061b      	lsls	r3, r3, #24
 800f15a:	491b      	ldr	r1, [pc, #108]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f15c:	4313      	orrs	r3, r2
 800f15e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f160:	4b1b      	ldr	r3, [pc, #108]	@ (800f1d0 <HAL_RCC_OscConfig+0x478>)
 800f162:	2201      	movs	r2, #1
 800f164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f166:	f7fc feeb 	bl	800bf40 <HAL_GetTick>
 800f16a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f16c:	e008      	b.n	800f180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f16e:	f7fc fee7 	bl	800bf40 <HAL_GetTick>
 800f172:	4602      	mov	r2, r0
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	2b02      	cmp	r3, #2
 800f17a:	d901      	bls.n	800f180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e05c      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f180:	4b11      	ldr	r3, [pc, #68]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0f0      	beq.n	800f16e <HAL_RCC_OscConfig+0x416>
 800f18c:	e054      	b.n	800f238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f18e:	4b10      	ldr	r3, [pc, #64]	@ (800f1d0 <HAL_RCC_OscConfig+0x478>)
 800f190:	2200      	movs	r2, #0
 800f192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f194:	f7fc fed4 	bl	800bf40 <HAL_GetTick>
 800f198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f19a:	e008      	b.n	800f1ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f19c:	f7fc fed0 	bl	800bf40 <HAL_GetTick>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	d901      	bls.n	800f1ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f1aa:	2303      	movs	r3, #3
 800f1ac:	e045      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1ae:	4b06      	ldr	r3, [pc, #24]	@ (800f1c8 <HAL_RCC_OscConfig+0x470>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1f0      	bne.n	800f19c <HAL_RCC_OscConfig+0x444>
 800f1ba:	e03d      	b.n	800f238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	699b      	ldr	r3, [r3, #24]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d107      	bne.n	800f1d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e038      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
 800f1c8:	40023800 	.word	0x40023800
 800f1cc:	40007000 	.word	0x40007000
 800f1d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f1d4:	4b1b      	ldr	r3, [pc, #108]	@ (800f244 <HAL_RCC_OscConfig+0x4ec>)
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	699b      	ldr	r3, [r3, #24]
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d028      	beq.n	800f234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d121      	bne.n	800f234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d11a      	bne.n	800f234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f204:	4013      	ands	r3, r2
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f20a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d111      	bne.n	800f234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f21a:	085b      	lsrs	r3, r3, #1
 800f21c:	3b01      	subs	r3, #1
 800f21e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f220:	429a      	cmp	r2, r3
 800f222:	d107      	bne.n	800f234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f22e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f230:	429a      	cmp	r2, r3
 800f232:	d001      	beq.n	800f238 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f234:	2301      	movs	r3, #1
 800f236:	e000      	b.n	800f23a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3718      	adds	r7, #24
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	40023800 	.word	0x40023800

0800f248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d101      	bne.n	800f25c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f258:	2301      	movs	r3, #1
 800f25a:	e0cc      	b.n	800f3f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f25c:	4b68      	ldr	r3, [pc, #416]	@ (800f400 <HAL_RCC_ClockConfig+0x1b8>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f003 0307 	and.w	r3, r3, #7
 800f264:	683a      	ldr	r2, [r7, #0]
 800f266:	429a      	cmp	r2, r3
 800f268:	d90c      	bls.n	800f284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f26a:	4b65      	ldr	r3, [pc, #404]	@ (800f400 <HAL_RCC_ClockConfig+0x1b8>)
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	b2d2      	uxtb	r2, r2
 800f270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f272:	4b63      	ldr	r3, [pc, #396]	@ (800f400 <HAL_RCC_ClockConfig+0x1b8>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f003 0307 	and.w	r3, r3, #7
 800f27a:	683a      	ldr	r2, [r7, #0]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d001      	beq.n	800f284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	e0b8      	b.n	800f3f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f003 0302 	and.w	r3, r3, #2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d020      	beq.n	800f2d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f003 0304 	and.w	r3, r3, #4
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d005      	beq.n	800f2a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f29c:	4b59      	ldr	r3, [pc, #356]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	4a58      	ldr	r2, [pc, #352]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f2a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f2a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f003 0308 	and.w	r3, r3, #8
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d005      	beq.n	800f2c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f2b4:	4b53      	ldr	r3, [pc, #332]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	4a52      	ldr	r2, [pc, #328]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f2ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f2be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f2c0:	4b50      	ldr	r3, [pc, #320]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	494d      	ldr	r1, [pc, #308]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f003 0301 	and.w	r3, r3, #1
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d044      	beq.n	800f368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d107      	bne.n	800f2f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f2e6:	4b47      	ldr	r3, [pc, #284]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d119      	bne.n	800f326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e07f      	b.n	800f3f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d003      	beq.n	800f306 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f302:	2b03      	cmp	r3, #3
 800f304:	d107      	bne.n	800f316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f306:	4b3f      	ldr	r3, [pc, #252]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d109      	bne.n	800f326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f312:	2301      	movs	r3, #1
 800f314:	e06f      	b.n	800f3f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f316:	4b3b      	ldr	r3, [pc, #236]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f003 0302 	and.w	r3, r3, #2
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d101      	bne.n	800f326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	e067      	b.n	800f3f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f326:	4b37      	ldr	r3, [pc, #220]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	f023 0203 	bic.w	r2, r3, #3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	4934      	ldr	r1, [pc, #208]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f334:	4313      	orrs	r3, r2
 800f336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f338:	f7fc fe02 	bl	800bf40 <HAL_GetTick>
 800f33c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f33e:	e00a      	b.n	800f356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f340:	f7fc fdfe 	bl	800bf40 <HAL_GetTick>
 800f344:	4602      	mov	r2, r0
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	1ad3      	subs	r3, r2, r3
 800f34a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f34e:	4293      	cmp	r3, r2
 800f350:	d901      	bls.n	800f356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f352:	2303      	movs	r3, #3
 800f354:	e04f      	b.n	800f3f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f356:	4b2b      	ldr	r3, [pc, #172]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	f003 020c 	and.w	r2, r3, #12
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	429a      	cmp	r2, r3
 800f366:	d1eb      	bne.n	800f340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f368:	4b25      	ldr	r3, [pc, #148]	@ (800f400 <HAL_RCC_ClockConfig+0x1b8>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f003 0307 	and.w	r3, r3, #7
 800f370:	683a      	ldr	r2, [r7, #0]
 800f372:	429a      	cmp	r2, r3
 800f374:	d20c      	bcs.n	800f390 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f376:	4b22      	ldr	r3, [pc, #136]	@ (800f400 <HAL_RCC_ClockConfig+0x1b8>)
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	b2d2      	uxtb	r2, r2
 800f37c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f37e:	4b20      	ldr	r3, [pc, #128]	@ (800f400 <HAL_RCC_ClockConfig+0x1b8>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f003 0307 	and.w	r3, r3, #7
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d001      	beq.n	800f390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e032      	b.n	800f3f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f003 0304 	and.w	r3, r3, #4
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d008      	beq.n	800f3ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f39c:	4b19      	ldr	r3, [pc, #100]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	4916      	ldr	r1, [pc, #88]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f003 0308 	and.w	r3, r3, #8
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d009      	beq.n	800f3ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f3ba:	4b12      	ldr	r3, [pc, #72]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	490e      	ldr	r1, [pc, #56]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f3ce:	f000 f821 	bl	800f414 <HAL_RCC_GetSysClockFreq>
 800f3d2:	4602      	mov	r2, r0
 800f3d4:	4b0b      	ldr	r3, [pc, #44]	@ (800f404 <HAL_RCC_ClockConfig+0x1bc>)
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	091b      	lsrs	r3, r3, #4
 800f3da:	f003 030f 	and.w	r3, r3, #15
 800f3de:	490a      	ldr	r1, [pc, #40]	@ (800f408 <HAL_RCC_ClockConfig+0x1c0>)
 800f3e0:	5ccb      	ldrb	r3, [r1, r3]
 800f3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e6:	4a09      	ldr	r2, [pc, #36]	@ (800f40c <HAL_RCC_ClockConfig+0x1c4>)
 800f3e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f3ea:	4b09      	ldr	r3, [pc, #36]	@ (800f410 <HAL_RCC_ClockConfig+0x1c8>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fc fd62 	bl	800beb8 <HAL_InitTick>

  return HAL_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	40023c00 	.word	0x40023c00
 800f404:	40023800 	.word	0x40023800
 800f408:	080112d0 	.word	0x080112d0
 800f40c:	20000034 	.word	0x20000034
 800f410:	20000050 	.word	0x20000050

0800f414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f418:	b090      	sub	sp, #64	@ 0x40
 800f41a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800f424:	2300      	movs	r3, #0
 800f426:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800f428:	2300      	movs	r3, #0
 800f42a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f42c:	4b59      	ldr	r3, [pc, #356]	@ (800f594 <HAL_RCC_GetSysClockFreq+0x180>)
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	f003 030c 	and.w	r3, r3, #12
 800f434:	2b08      	cmp	r3, #8
 800f436:	d00d      	beq.n	800f454 <HAL_RCC_GetSysClockFreq+0x40>
 800f438:	2b08      	cmp	r3, #8
 800f43a:	f200 80a1 	bhi.w	800f580 <HAL_RCC_GetSysClockFreq+0x16c>
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d002      	beq.n	800f448 <HAL_RCC_GetSysClockFreq+0x34>
 800f442:	2b04      	cmp	r3, #4
 800f444:	d003      	beq.n	800f44e <HAL_RCC_GetSysClockFreq+0x3a>
 800f446:	e09b      	b.n	800f580 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f448:	4b53      	ldr	r3, [pc, #332]	@ (800f598 <HAL_RCC_GetSysClockFreq+0x184>)
 800f44a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f44c:	e09b      	b.n	800f586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f44e:	4b53      	ldr	r3, [pc, #332]	@ (800f59c <HAL_RCC_GetSysClockFreq+0x188>)
 800f450:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f452:	e098      	b.n	800f586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f454:	4b4f      	ldr	r3, [pc, #316]	@ (800f594 <HAL_RCC_GetSysClockFreq+0x180>)
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f45c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f45e:	4b4d      	ldr	r3, [pc, #308]	@ (800f594 <HAL_RCC_GetSysClockFreq+0x180>)
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f466:	2b00      	cmp	r3, #0
 800f468:	d028      	beq.n	800f4bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f46a:	4b4a      	ldr	r3, [pc, #296]	@ (800f594 <HAL_RCC_GetSysClockFreq+0x180>)
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	099b      	lsrs	r3, r3, #6
 800f470:	2200      	movs	r2, #0
 800f472:	623b      	str	r3, [r7, #32]
 800f474:	627a      	str	r2, [r7, #36]	@ 0x24
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f47c:	2100      	movs	r1, #0
 800f47e:	4b47      	ldr	r3, [pc, #284]	@ (800f59c <HAL_RCC_GetSysClockFreq+0x188>)
 800f480:	fb03 f201 	mul.w	r2, r3, r1
 800f484:	2300      	movs	r3, #0
 800f486:	fb00 f303 	mul.w	r3, r0, r3
 800f48a:	4413      	add	r3, r2
 800f48c:	4a43      	ldr	r2, [pc, #268]	@ (800f59c <HAL_RCC_GetSysClockFreq+0x188>)
 800f48e:	fba0 1202 	umull	r1, r2, r0, r2
 800f492:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f494:	460a      	mov	r2, r1
 800f496:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f49a:	4413      	add	r3, r2
 800f49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	61bb      	str	r3, [r7, #24]
 800f4a4:	61fa      	str	r2, [r7, #28]
 800f4a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f4aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800f4ae:	f7f1 fbd5 	bl	8000c5c <__aeabi_uldivmod>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4ba:	e053      	b.n	800f564 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f4bc:	4b35      	ldr	r3, [pc, #212]	@ (800f594 <HAL_RCC_GetSysClockFreq+0x180>)
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	099b      	lsrs	r3, r3, #6
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	613b      	str	r3, [r7, #16]
 800f4c6:	617a      	str	r2, [r7, #20]
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800f4ce:	f04f 0b00 	mov.w	fp, #0
 800f4d2:	4652      	mov	r2, sl
 800f4d4:	465b      	mov	r3, fp
 800f4d6:	f04f 0000 	mov.w	r0, #0
 800f4da:	f04f 0100 	mov.w	r1, #0
 800f4de:	0159      	lsls	r1, r3, #5
 800f4e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f4e4:	0150      	lsls	r0, r2, #5
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	ebb2 080a 	subs.w	r8, r2, sl
 800f4ee:	eb63 090b 	sbc.w	r9, r3, fp
 800f4f2:	f04f 0200 	mov.w	r2, #0
 800f4f6:	f04f 0300 	mov.w	r3, #0
 800f4fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800f4fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800f502:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800f506:	ebb2 0408 	subs.w	r4, r2, r8
 800f50a:	eb63 0509 	sbc.w	r5, r3, r9
 800f50e:	f04f 0200 	mov.w	r2, #0
 800f512:	f04f 0300 	mov.w	r3, #0
 800f516:	00eb      	lsls	r3, r5, #3
 800f518:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f51c:	00e2      	lsls	r2, r4, #3
 800f51e:	4614      	mov	r4, r2
 800f520:	461d      	mov	r5, r3
 800f522:	eb14 030a 	adds.w	r3, r4, sl
 800f526:	603b      	str	r3, [r7, #0]
 800f528:	eb45 030b 	adc.w	r3, r5, fp
 800f52c:	607b      	str	r3, [r7, #4]
 800f52e:	f04f 0200 	mov.w	r2, #0
 800f532:	f04f 0300 	mov.w	r3, #0
 800f536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f53a:	4629      	mov	r1, r5
 800f53c:	028b      	lsls	r3, r1, #10
 800f53e:	4621      	mov	r1, r4
 800f540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f544:	4621      	mov	r1, r4
 800f546:	028a      	lsls	r2, r1, #10
 800f548:	4610      	mov	r0, r2
 800f54a:	4619      	mov	r1, r3
 800f54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f54e:	2200      	movs	r2, #0
 800f550:	60bb      	str	r3, [r7, #8]
 800f552:	60fa      	str	r2, [r7, #12]
 800f554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f558:	f7f1 fb80 	bl	8000c5c <__aeabi_uldivmod>
 800f55c:	4602      	mov	r2, r0
 800f55e:	460b      	mov	r3, r1
 800f560:	4613      	mov	r3, r2
 800f562:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f564:	4b0b      	ldr	r3, [pc, #44]	@ (800f594 <HAL_RCC_GetSysClockFreq+0x180>)
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	0c1b      	lsrs	r3, r3, #16
 800f56a:	f003 0303 	and.w	r3, r3, #3
 800f56e:	3301      	adds	r3, #1
 800f570:	005b      	lsls	r3, r3, #1
 800f572:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800f574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f578:	fbb2 f3f3 	udiv	r3, r2, r3
 800f57c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f57e:	e002      	b.n	800f586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f580:	4b05      	ldr	r3, [pc, #20]	@ (800f598 <HAL_RCC_GetSysClockFreq+0x184>)
 800f582:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f584:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3740      	adds	r7, #64	@ 0x40
 800f58c:	46bd      	mov	sp, r7
 800f58e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f592:	bf00      	nop
 800f594:	40023800 	.word	0x40023800
 800f598:	00f42400 	.word	0x00f42400
 800f59c:	017d7840 	.word	0x017d7840

0800f5a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f5a4:	4b03      	ldr	r3, [pc, #12]	@ (800f5b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	20000034 	.word	0x20000034

0800f5b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f5bc:	f7ff fff0 	bl	800f5a0 <HAL_RCC_GetHCLKFreq>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	4b05      	ldr	r3, [pc, #20]	@ (800f5d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f5c4:	689b      	ldr	r3, [r3, #8]
 800f5c6:	0a9b      	lsrs	r3, r3, #10
 800f5c8:	f003 0307 	and.w	r3, r3, #7
 800f5cc:	4903      	ldr	r1, [pc, #12]	@ (800f5dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f5ce:	5ccb      	ldrb	r3, [r1, r3]
 800f5d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	40023800 	.word	0x40023800
 800f5dc:	080112e0 	.word	0x080112e0

0800f5e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e041      	b.n	800f676 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d106      	bne.n	800f60c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7f7 f8a2 	bl	8006750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2202      	movs	r2, #2
 800f610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3304      	adds	r3, #4
 800f61c:	4619      	mov	r1, r3
 800f61e:	4610      	mov	r0, r2
 800f620:	f000 fd72 	bl	8010108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2201      	movs	r2, #1
 800f648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2201      	movs	r2, #1
 800f650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2201      	movs	r2, #1
 800f658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2201      	movs	r2, #1
 800f660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2201      	movs	r2, #1
 800f668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
	...

0800f680 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f680:	b480      	push	{r7}
 800f682:	b085      	sub	sp, #20
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	2b01      	cmp	r3, #1
 800f692:	d001      	beq.n	800f698 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f694:	2301      	movs	r3, #1
 800f696:	e03c      	b.n	800f712 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2202      	movs	r2, #2
 800f69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a1e      	ldr	r2, [pc, #120]	@ (800f720 <HAL_TIM_Base_Start+0xa0>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d018      	beq.n	800f6dc <HAL_TIM_Base_Start+0x5c>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6b2:	d013      	beq.n	800f6dc <HAL_TIM_Base_Start+0x5c>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a1a      	ldr	r2, [pc, #104]	@ (800f724 <HAL_TIM_Base_Start+0xa4>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d00e      	beq.n	800f6dc <HAL_TIM_Base_Start+0x5c>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a19      	ldr	r2, [pc, #100]	@ (800f728 <HAL_TIM_Base_Start+0xa8>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d009      	beq.n	800f6dc <HAL_TIM_Base_Start+0x5c>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a17      	ldr	r2, [pc, #92]	@ (800f72c <HAL_TIM_Base_Start+0xac>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d004      	beq.n	800f6dc <HAL_TIM_Base_Start+0x5c>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a16      	ldr	r2, [pc, #88]	@ (800f730 <HAL_TIM_Base_Start+0xb0>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d111      	bne.n	800f700 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	f003 0307 	and.w	r3, r3, #7
 800f6e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2b06      	cmp	r3, #6
 800f6ec:	d010      	beq.n	800f710 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f042 0201 	orr.w	r2, r2, #1
 800f6fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6fe:	e007      	b.n	800f710 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f042 0201 	orr.w	r2, r2, #1
 800f70e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	3714      	adds	r7, #20
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	40010000 	.word	0x40010000
 800f724:	40000400 	.word	0x40000400
 800f728:	40000800 	.word	0x40000800
 800f72c:	40000c00 	.word	0x40000c00
 800f730:	40014000 	.word	0x40014000

0800f734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d101      	bne.n	800f746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f742:	2301      	movs	r3, #1
 800f744:	e041      	b.n	800f7ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d106      	bne.n	800f760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 f839 	bl	800f7d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2202      	movs	r2, #2
 800f764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	3304      	adds	r3, #4
 800f770:	4619      	mov	r1, r3
 800f772:	4610      	mov	r0, r2
 800f774:	f000 fcc8 	bl	8010108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2201      	movs	r2, #1
 800f77c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2201      	movs	r2, #1
 800f79c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f7c8:	2300      	movs	r3, #0
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f7d2:	b480      	push	{r7}
 800f7d4:	b083      	sub	sp, #12
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f7da:	bf00      	nop
 800f7dc:	370c      	adds	r7, #12
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
	...

0800f7e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d109      	bne.n	800f80c <HAL_TIM_PWM_Start+0x24>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b01      	cmp	r3, #1
 800f802:	bf14      	ite	ne
 800f804:	2301      	movne	r3, #1
 800f806:	2300      	moveq	r3, #0
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	e022      	b.n	800f852 <HAL_TIM_PWM_Start+0x6a>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b04      	cmp	r3, #4
 800f810:	d109      	bne.n	800f826 <HAL_TIM_PWM_Start+0x3e>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	bf14      	ite	ne
 800f81e:	2301      	movne	r3, #1
 800f820:	2300      	moveq	r3, #0
 800f822:	b2db      	uxtb	r3, r3
 800f824:	e015      	b.n	800f852 <HAL_TIM_PWM_Start+0x6a>
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	2b08      	cmp	r3, #8
 800f82a:	d109      	bne.n	800f840 <HAL_TIM_PWM_Start+0x58>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f832:	b2db      	uxtb	r3, r3
 800f834:	2b01      	cmp	r3, #1
 800f836:	bf14      	ite	ne
 800f838:	2301      	movne	r3, #1
 800f83a:	2300      	moveq	r3, #0
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	e008      	b.n	800f852 <HAL_TIM_PWM_Start+0x6a>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b01      	cmp	r3, #1
 800f84a:	bf14      	ite	ne
 800f84c:	2301      	movne	r3, #1
 800f84e:	2300      	moveq	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f856:	2301      	movs	r3, #1
 800f858:	e068      	b.n	800f92c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d104      	bne.n	800f86a <HAL_TIM_PWM_Start+0x82>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2202      	movs	r2, #2
 800f864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f868:	e013      	b.n	800f892 <HAL_TIM_PWM_Start+0xaa>
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	2b04      	cmp	r3, #4
 800f86e:	d104      	bne.n	800f87a <HAL_TIM_PWM_Start+0x92>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2202      	movs	r2, #2
 800f874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f878:	e00b      	b.n	800f892 <HAL_TIM_PWM_Start+0xaa>
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	2b08      	cmp	r3, #8
 800f87e:	d104      	bne.n	800f88a <HAL_TIM_PWM_Start+0xa2>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2202      	movs	r2, #2
 800f884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f888:	e003      	b.n	800f892 <HAL_TIM_PWM_Start+0xaa>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2202      	movs	r2, #2
 800f88e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2201      	movs	r2, #1
 800f898:	6839      	ldr	r1, [r7, #0]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 fee6 	bl	801066c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a23      	ldr	r2, [pc, #140]	@ (800f934 <HAL_TIM_PWM_Start+0x14c>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d107      	bne.n	800f8ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f8b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4a1d      	ldr	r2, [pc, #116]	@ (800f934 <HAL_TIM_PWM_Start+0x14c>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d018      	beq.n	800f8f6 <HAL_TIM_PWM_Start+0x10e>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8cc:	d013      	beq.n	800f8f6 <HAL_TIM_PWM_Start+0x10e>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4a19      	ldr	r2, [pc, #100]	@ (800f938 <HAL_TIM_PWM_Start+0x150>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d00e      	beq.n	800f8f6 <HAL_TIM_PWM_Start+0x10e>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a17      	ldr	r2, [pc, #92]	@ (800f93c <HAL_TIM_PWM_Start+0x154>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d009      	beq.n	800f8f6 <HAL_TIM_PWM_Start+0x10e>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a16      	ldr	r2, [pc, #88]	@ (800f940 <HAL_TIM_PWM_Start+0x158>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d004      	beq.n	800f8f6 <HAL_TIM_PWM_Start+0x10e>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a14      	ldr	r2, [pc, #80]	@ (800f944 <HAL_TIM_PWM_Start+0x15c>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d111      	bne.n	800f91a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	f003 0307 	and.w	r3, r3, #7
 800f900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b06      	cmp	r3, #6
 800f906:	d010      	beq.n	800f92a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f042 0201 	orr.w	r2, r2, #1
 800f916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f918:	e007      	b.n	800f92a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f042 0201 	orr.w	r2, r2, #1
 800f928:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	40010000 	.word	0x40010000
 800f938:	40000400 	.word	0x40000400
 800f93c:	40000800 	.word	0x40000800
 800f940:	40000c00 	.word	0x40000c00
 800f944:	40014000 	.word	0x40014000

0800f948 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b086      	sub	sp, #24
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d101      	bne.n	800f95c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f958:	2301      	movs	r3, #1
 800f95a:	e097      	b.n	800fa8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d106      	bne.n	800f976 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7f6 ff3b 	bl	80067ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2202      	movs	r2, #2
 800f97a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	6812      	ldr	r2, [r2, #0]
 800f988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f98c:	f023 0307 	bic.w	r3, r3, #7
 800f990:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	3304      	adds	r3, #4
 800f99a:	4619      	mov	r1, r3
 800f99c:	4610      	mov	r0, r2
 800f99e:	f000 fbb3 	bl	8010108 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	689b      	ldr	r3, [r3, #8]
 800f9a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	699b      	ldr	r3, [r3, #24]
 800f9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	6a1b      	ldr	r3, [r3, #32]
 800f9b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	697a      	ldr	r2, [r7, #20]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f9ca:	f023 0303 	bic.w	r3, r3, #3
 800f9ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	689a      	ldr	r2, [r3, #8]
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	021b      	lsls	r3, r3, #8
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f9e8:	f023 030c 	bic.w	r3, r3, #12
 800f9ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f9f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f9f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	68da      	ldr	r2, [r3, #12]
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	69db      	ldr	r3, [r3, #28]
 800fa02:	021b      	lsls	r3, r3, #8
 800fa04:	4313      	orrs	r3, r2
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	691b      	ldr	r3, [r3, #16]
 800fa10:	011a      	lsls	r2, r3, #4
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	031b      	lsls	r3, r3, #12
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	693a      	ldr	r2, [r7, #16]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800fa26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800fa2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	685a      	ldr	r2, [r3, #4]
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	695b      	ldr	r3, [r3, #20]
 800fa38:	011b      	lsls	r3, r3, #4
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	693a      	ldr	r2, [r7, #16]
 800fa50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2201      	movs	r2, #1
 800fa66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2201      	movs	r2, #1
 800fa76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800faa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800faac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fab4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fabc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d110      	bne.n	800fae6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d102      	bne.n	800fad0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800faca:	7b7b      	ldrb	r3, [r7, #13]
 800facc:	2b01      	cmp	r3, #1
 800face:	d001      	beq.n	800fad4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800fad0:	2301      	movs	r3, #1
 800fad2:	e069      	b.n	800fba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2202      	movs	r2, #2
 800fad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2202      	movs	r2, #2
 800fae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fae4:	e031      	b.n	800fb4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	2b04      	cmp	r3, #4
 800faea:	d110      	bne.n	800fb0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800faec:	7bbb      	ldrb	r3, [r7, #14]
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d102      	bne.n	800faf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800faf2:	7b3b      	ldrb	r3, [r7, #12]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d001      	beq.n	800fafc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800faf8:	2301      	movs	r3, #1
 800fafa:	e055      	b.n	800fba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2202      	movs	r2, #2
 800fb00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2202      	movs	r2, #2
 800fb08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fb0c:	e01d      	b.n	800fb4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fb0e:	7bfb      	ldrb	r3, [r7, #15]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d108      	bne.n	800fb26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800fb14:	7bbb      	ldrb	r3, [r7, #14]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d105      	bne.n	800fb26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fb1a:	7b7b      	ldrb	r3, [r7, #13]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d102      	bne.n	800fb26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800fb20:	7b3b      	ldrb	r3, [r7, #12]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d001      	beq.n	800fb2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800fb26:	2301      	movs	r3, #1
 800fb28:	e03e      	b.n	800fba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2202      	movs	r2, #2
 800fb36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2202      	movs	r2, #2
 800fb3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2202      	movs	r2, #2
 800fb46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d003      	beq.n	800fb58 <HAL_TIM_Encoder_Start+0xc4>
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	2b04      	cmp	r3, #4
 800fb54:	d008      	beq.n	800fb68 <HAL_TIM_Encoder_Start+0xd4>
 800fb56:	e00f      	b.n	800fb78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	2100      	movs	r1, #0
 800fb60:	4618      	mov	r0, r3
 800fb62:	f000 fd83 	bl	801066c <TIM_CCxChannelCmd>
      break;
 800fb66:	e016      	b.n	800fb96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	2104      	movs	r1, #4
 800fb70:	4618      	mov	r0, r3
 800fb72:	f000 fd7b 	bl	801066c <TIM_CCxChannelCmd>
      break;
 800fb76:	e00e      	b.n	800fb96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2201      	movs	r2, #1
 800fb7e:	2100      	movs	r1, #0
 800fb80:	4618      	mov	r0, r3
 800fb82:	f000 fd73 	bl	801066c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	2104      	movs	r1, #4
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f000 fd6c 	bl	801066c <TIM_CCxChannelCmd>
      break;
 800fb94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f042 0201 	orr.w	r2, r2, #1
 800fba4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	f003 0302 	and.w	r3, r3, #2
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d020      	beq.n	800fc14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f003 0302 	and.w	r3, r3, #2
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d01b      	beq.n	800fc14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f06f 0202 	mvn.w	r2, #2
 800fbe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2201      	movs	r2, #1
 800fbea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f003 0303 	and.w	r3, r3, #3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d003      	beq.n	800fc02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fa65 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fc00:	e005      	b.n	800fc0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 fa57 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fa68 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	f003 0304 	and.w	r3, r3, #4
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d020      	beq.n	800fc60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f003 0304 	and.w	r3, r3, #4
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d01b      	beq.n	800fc60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f06f 0204 	mvn.w	r2, #4
 800fc30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2202      	movs	r2, #2
 800fc36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	699b      	ldr	r3, [r3, #24]
 800fc3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d003      	beq.n	800fc4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 fa3f 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fc4c:	e005      	b.n	800fc5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 fa31 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 fa42 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	f003 0308 	and.w	r3, r3, #8
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d020      	beq.n	800fcac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f003 0308 	and.w	r3, r3, #8
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d01b      	beq.n	800fcac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f06f 0208 	mvn.w	r2, #8
 800fc7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2204      	movs	r2, #4
 800fc82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	69db      	ldr	r3, [r3, #28]
 800fc8a:	f003 0303 	and.w	r3, r3, #3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d003      	beq.n	800fc9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fa19 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fc98:	e005      	b.n	800fca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 fa0b 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 fa1c 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	f003 0310 	and.w	r3, r3, #16
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d020      	beq.n	800fcf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f003 0310 	and.w	r3, r3, #16
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d01b      	beq.n	800fcf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f06f 0210 	mvn.w	r2, #16
 800fcc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2208      	movs	r2, #8
 800fcce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	69db      	ldr	r3, [r3, #28]
 800fcd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 f9f3 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fce4:	e005      	b.n	800fcf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f9e5 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 f9f6 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	f003 0301 	and.w	r3, r3, #1
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00c      	beq.n	800fd1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f003 0301 	and.w	r3, r3, #1
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d007      	beq.n	800fd1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f06f 0201 	mvn.w	r2, #1
 800fd14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 f9c3 	bl	80100a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00c      	beq.n	800fd40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d007      	beq.n	800fd40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fd38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 fd86 	bl	801084c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00c      	beq.n	800fd64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d007      	beq.n	800fd64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fd5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f9c7 	bl	80100f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	f003 0320 	and.w	r3, r3, #32
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00c      	beq.n	800fd88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f003 0320 	and.w	r3, r3, #32
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d007      	beq.n	800fd88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f06f 0220 	mvn.w	r2, #32
 800fd80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 fd58 	bl	8010838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fd88:	bf00      	nop
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d101      	bne.n	800fdae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fdaa:	2302      	movs	r3, #2
 800fdac:	e0ae      	b.n	800ff0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2b0c      	cmp	r3, #12
 800fdba:	f200 809f 	bhi.w	800fefc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fdbe:	a201      	add	r2, pc, #4	@ (adr r2, 800fdc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc4:	0800fdf9 	.word	0x0800fdf9
 800fdc8:	0800fefd 	.word	0x0800fefd
 800fdcc:	0800fefd 	.word	0x0800fefd
 800fdd0:	0800fefd 	.word	0x0800fefd
 800fdd4:	0800fe39 	.word	0x0800fe39
 800fdd8:	0800fefd 	.word	0x0800fefd
 800fddc:	0800fefd 	.word	0x0800fefd
 800fde0:	0800fefd 	.word	0x0800fefd
 800fde4:	0800fe7b 	.word	0x0800fe7b
 800fde8:	0800fefd 	.word	0x0800fefd
 800fdec:	0800fefd 	.word	0x0800fefd
 800fdf0:	0800fefd 	.word	0x0800fefd
 800fdf4:	0800febb 	.word	0x0800febb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	68b9      	ldr	r1, [r7, #8]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f000 fa0e 	bl	8010220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	699a      	ldr	r2, [r3, #24]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f042 0208 	orr.w	r2, r2, #8
 800fe12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	699a      	ldr	r2, [r3, #24]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f022 0204 	bic.w	r2, r2, #4
 800fe22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6999      	ldr	r1, [r3, #24]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	691a      	ldr	r2, [r3, #16]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	430a      	orrs	r2, r1
 800fe34:	619a      	str	r2, [r3, #24]
      break;
 800fe36:	e064      	b.n	800ff02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68b9      	ldr	r1, [r7, #8]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f000 fa54 	bl	80102ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	699a      	ldr	r2, [r3, #24]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	699a      	ldr	r2, [r3, #24]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	6999      	ldr	r1, [r3, #24]
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	021a      	lsls	r2, r3, #8
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	430a      	orrs	r2, r1
 800fe76:	619a      	str	r2, [r3, #24]
      break;
 800fe78:	e043      	b.n	800ff02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	68b9      	ldr	r1, [r7, #8]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f000 fa9f 	bl	80103c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	69da      	ldr	r2, [r3, #28]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f042 0208 	orr.w	r2, r2, #8
 800fe94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	69da      	ldr	r2, [r3, #28]
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f022 0204 	bic.w	r2, r2, #4
 800fea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	69d9      	ldr	r1, [r3, #28]
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	691a      	ldr	r2, [r3, #16]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	430a      	orrs	r2, r1
 800feb6:	61da      	str	r2, [r3, #28]
      break;
 800feb8:	e023      	b.n	800ff02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68b9      	ldr	r1, [r7, #8]
 800fec0:	4618      	mov	r0, r3
 800fec2:	f000 fae9 	bl	8010498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	69da      	ldr	r2, [r3, #28]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	69da      	ldr	r2, [r3, #28]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	69d9      	ldr	r1, [r3, #28]
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	691b      	ldr	r3, [r3, #16]
 800fef0:	021a      	lsls	r2, r3, #8
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	430a      	orrs	r2, r1
 800fef8:	61da      	str	r2, [r3, #28]
      break;
 800fefa:	e002      	b.n	800ff02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800fefc:	2301      	movs	r3, #1
 800fefe:	75fb      	strb	r3, [r7, #23]
      break;
 800ff00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2200      	movs	r2, #0
 800ff06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ff0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3718      	adds	r7, #24
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d101      	bne.n	800ff30 <HAL_TIM_ConfigClockSource+0x1c>
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	e0b4      	b.n	801009a <HAL_TIM_ConfigClockSource+0x186>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2201      	movs	r2, #1
 800ff34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2202      	movs	r2, #2
 800ff3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	689b      	ldr	r3, [r3, #8]
 800ff46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ff4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	68ba      	ldr	r2, [r7, #8]
 800ff5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ff68:	d03e      	beq.n	800ffe8 <HAL_TIM_ConfigClockSource+0xd4>
 800ff6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ff6e:	f200 8087 	bhi.w	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ff72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff76:	f000 8086 	beq.w	8010086 <HAL_TIM_ConfigClockSource+0x172>
 800ff7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff7e:	d87f      	bhi.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ff80:	2b70      	cmp	r3, #112	@ 0x70
 800ff82:	d01a      	beq.n	800ffba <HAL_TIM_ConfigClockSource+0xa6>
 800ff84:	2b70      	cmp	r3, #112	@ 0x70
 800ff86:	d87b      	bhi.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ff88:	2b60      	cmp	r3, #96	@ 0x60
 800ff8a:	d050      	beq.n	801002e <HAL_TIM_ConfigClockSource+0x11a>
 800ff8c:	2b60      	cmp	r3, #96	@ 0x60
 800ff8e:	d877      	bhi.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ff90:	2b50      	cmp	r3, #80	@ 0x50
 800ff92:	d03c      	beq.n	801000e <HAL_TIM_ConfigClockSource+0xfa>
 800ff94:	2b50      	cmp	r3, #80	@ 0x50
 800ff96:	d873      	bhi.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ff98:	2b40      	cmp	r3, #64	@ 0x40
 800ff9a:	d058      	beq.n	801004e <HAL_TIM_ConfigClockSource+0x13a>
 800ff9c:	2b40      	cmp	r3, #64	@ 0x40
 800ff9e:	d86f      	bhi.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ffa0:	2b30      	cmp	r3, #48	@ 0x30
 800ffa2:	d064      	beq.n	801006e <HAL_TIM_ConfigClockSource+0x15a>
 800ffa4:	2b30      	cmp	r3, #48	@ 0x30
 800ffa6:	d86b      	bhi.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ffa8:	2b20      	cmp	r3, #32
 800ffaa:	d060      	beq.n	801006e <HAL_TIM_ConfigClockSource+0x15a>
 800ffac:	2b20      	cmp	r3, #32
 800ffae:	d867      	bhi.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d05c      	beq.n	801006e <HAL_TIM_ConfigClockSource+0x15a>
 800ffb4:	2b10      	cmp	r3, #16
 800ffb6:	d05a      	beq.n	801006e <HAL_TIM_ConfigClockSource+0x15a>
 800ffb8:	e062      	b.n	8010080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ffca:	f000 fb2f 	bl	801062c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ffdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	609a      	str	r2, [r3, #8]
      break;
 800ffe6:	e04f      	b.n	8010088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fff8:	f000 fb18 	bl	801062c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	689a      	ldr	r2, [r3, #8]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801000a:	609a      	str	r2, [r3, #8]
      break;
 801000c:	e03c      	b.n	8010088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801001a:	461a      	mov	r2, r3
 801001c:	f000 fa8c 	bl	8010538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2150      	movs	r1, #80	@ 0x50
 8010026:	4618      	mov	r0, r3
 8010028:	f000 fae5 	bl	80105f6 <TIM_ITRx_SetConfig>
      break;
 801002c:	e02c      	b.n	8010088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801003a:	461a      	mov	r2, r3
 801003c:	f000 faab 	bl	8010596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2160      	movs	r1, #96	@ 0x60
 8010046:	4618      	mov	r0, r3
 8010048:	f000 fad5 	bl	80105f6 <TIM_ITRx_SetConfig>
      break;
 801004c:	e01c      	b.n	8010088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801005a:	461a      	mov	r2, r3
 801005c:	f000 fa6c 	bl	8010538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2140      	movs	r1, #64	@ 0x40
 8010066:	4618      	mov	r0, r3
 8010068:	f000 fac5 	bl	80105f6 <TIM_ITRx_SetConfig>
      break;
 801006c:	e00c      	b.n	8010088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4619      	mov	r1, r3
 8010078:	4610      	mov	r0, r2
 801007a:	f000 fabc 	bl	80105f6 <TIM_ITRx_SetConfig>
      break;
 801007e:	e003      	b.n	8010088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010080:	2301      	movs	r3, #1
 8010082:	73fb      	strb	r3, [r7, #15]
      break;
 8010084:	e000      	b.n	8010088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010098:	7bfb      	ldrb	r3, [r7, #15]
}
 801009a:	4618      	mov	r0, r3
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100a2:	b480      	push	{r7}
 80100a4:	b083      	sub	sp, #12
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80100aa:	bf00      	nop
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr

080100b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100b6:	b480      	push	{r7}
 80100b8:	b083      	sub	sp, #12
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100be:	bf00      	nop
 80100c0:	370c      	adds	r7, #12
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr

080100ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100ca:	b480      	push	{r7}
 80100cc:	b083      	sub	sp, #12
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100d2:	bf00      	nop
 80100d4:	370c      	adds	r7, #12
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr

080100de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100de:	b480      	push	{r7}
 80100e0:	b083      	sub	sp, #12
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100e6:	bf00      	nop
 80100e8:	370c      	adds	r7, #12
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100f2:	b480      	push	{r7}
 80100f4:	b083      	sub	sp, #12
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100fa:	bf00      	nop
 80100fc:	370c      	adds	r7, #12
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
	...

08010108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a3a      	ldr	r2, [pc, #232]	@ (8010204 <TIM_Base_SetConfig+0xfc>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d00f      	beq.n	8010140 <TIM_Base_SetConfig+0x38>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010126:	d00b      	beq.n	8010140 <TIM_Base_SetConfig+0x38>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a37      	ldr	r2, [pc, #220]	@ (8010208 <TIM_Base_SetConfig+0x100>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d007      	beq.n	8010140 <TIM_Base_SetConfig+0x38>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4a36      	ldr	r2, [pc, #216]	@ (801020c <TIM_Base_SetConfig+0x104>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d003      	beq.n	8010140 <TIM_Base_SetConfig+0x38>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4a35      	ldr	r2, [pc, #212]	@ (8010210 <TIM_Base_SetConfig+0x108>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d108      	bne.n	8010152 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	4313      	orrs	r3, r2
 8010150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4a2b      	ldr	r2, [pc, #172]	@ (8010204 <TIM_Base_SetConfig+0xfc>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d01b      	beq.n	8010192 <TIM_Base_SetConfig+0x8a>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010160:	d017      	beq.n	8010192 <TIM_Base_SetConfig+0x8a>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4a28      	ldr	r2, [pc, #160]	@ (8010208 <TIM_Base_SetConfig+0x100>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d013      	beq.n	8010192 <TIM_Base_SetConfig+0x8a>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4a27      	ldr	r2, [pc, #156]	@ (801020c <TIM_Base_SetConfig+0x104>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d00f      	beq.n	8010192 <TIM_Base_SetConfig+0x8a>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4a26      	ldr	r2, [pc, #152]	@ (8010210 <TIM_Base_SetConfig+0x108>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d00b      	beq.n	8010192 <TIM_Base_SetConfig+0x8a>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4a25      	ldr	r2, [pc, #148]	@ (8010214 <TIM_Base_SetConfig+0x10c>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d007      	beq.n	8010192 <TIM_Base_SetConfig+0x8a>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4a24      	ldr	r2, [pc, #144]	@ (8010218 <TIM_Base_SetConfig+0x110>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d003      	beq.n	8010192 <TIM_Base_SetConfig+0x8a>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4a23      	ldr	r2, [pc, #140]	@ (801021c <TIM_Base_SetConfig+0x114>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d108      	bne.n	80101a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	4313      	orrs	r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	695b      	ldr	r3, [r3, #20]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	689a      	ldr	r2, [r3, #8]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4a0e      	ldr	r2, [pc, #56]	@ (8010204 <TIM_Base_SetConfig+0xfc>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d103      	bne.n	80101d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	691a      	ldr	r2, [r3, #16]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2201      	movs	r2, #1
 80101dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	f003 0301 	and.w	r3, r3, #1
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d105      	bne.n	80101f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	691b      	ldr	r3, [r3, #16]
 80101ee:	f023 0201 	bic.w	r2, r3, #1
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	611a      	str	r2, [r3, #16]
  }
}
 80101f6:	bf00      	nop
 80101f8:	3714      	adds	r7, #20
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	40010000 	.word	0x40010000
 8010208:	40000400 	.word	0x40000400
 801020c:	40000800 	.word	0x40000800
 8010210:	40000c00 	.word	0x40000c00
 8010214:	40014000 	.word	0x40014000
 8010218:	40014400 	.word	0x40014400
 801021c:	40014800 	.word	0x40014800

08010220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010220:	b480      	push	{r7}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a1b      	ldr	r3, [r3, #32]
 801022e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a1b      	ldr	r3, [r3, #32]
 8010234:	f023 0201 	bic.w	r2, r3, #1
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	699b      	ldr	r3, [r3, #24]
 8010246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801024e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f023 0303 	bic.w	r3, r3, #3
 8010256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	4313      	orrs	r3, r2
 8010260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	f023 0302 	bic.w	r3, r3, #2
 8010268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	697a      	ldr	r2, [r7, #20]
 8010270:	4313      	orrs	r3, r2
 8010272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4a1c      	ldr	r2, [pc, #112]	@ (80102e8 <TIM_OC1_SetConfig+0xc8>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d10c      	bne.n	8010296 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	f023 0308 	bic.w	r3, r3, #8
 8010282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	697a      	ldr	r2, [r7, #20]
 801028a:	4313      	orrs	r3, r2
 801028c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	f023 0304 	bic.w	r3, r3, #4
 8010294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a13      	ldr	r2, [pc, #76]	@ (80102e8 <TIM_OC1_SetConfig+0xc8>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d111      	bne.n	80102c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80102ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	695b      	ldr	r3, [r3, #20]
 80102b2:	693a      	ldr	r2, [r7, #16]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	699b      	ldr	r3, [r3, #24]
 80102bc:	693a      	ldr	r2, [r7, #16]
 80102be:	4313      	orrs	r3, r2
 80102c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	693a      	ldr	r2, [r7, #16]
 80102c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	685a      	ldr	r2, [r3, #4]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	697a      	ldr	r2, [r7, #20]
 80102da:	621a      	str	r2, [r3, #32]
}
 80102dc:	bf00      	nop
 80102de:	371c      	adds	r7, #28
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr
 80102e8:	40010000 	.word	0x40010000

080102ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b087      	sub	sp, #28
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6a1b      	ldr	r3, [r3, #32]
 80102fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6a1b      	ldr	r3, [r3, #32]
 8010300:	f023 0210 	bic.w	r2, r3, #16
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801031a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	021b      	lsls	r3, r3, #8
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	4313      	orrs	r3, r2
 801032e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f023 0320 	bic.w	r3, r3, #32
 8010336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	011b      	lsls	r3, r3, #4
 801033e:	697a      	ldr	r2, [r7, #20]
 8010340:	4313      	orrs	r3, r2
 8010342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4a1e      	ldr	r2, [pc, #120]	@ (80103c0 <TIM_OC2_SetConfig+0xd4>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d10d      	bne.n	8010368 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	011b      	lsls	r3, r3, #4
 801035a:	697a      	ldr	r2, [r7, #20]
 801035c:	4313      	orrs	r3, r2
 801035e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	4a15      	ldr	r2, [pc, #84]	@ (80103c0 <TIM_OC2_SetConfig+0xd4>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d113      	bne.n	8010398 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801037e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	695b      	ldr	r3, [r3, #20]
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	4313      	orrs	r3, r2
 801038a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	699b      	ldr	r3, [r3, #24]
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	693a      	ldr	r2, [r7, #16]
 8010394:	4313      	orrs	r3, r2
 8010396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	693a      	ldr	r2, [r7, #16]
 801039c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	685a      	ldr	r2, [r3, #4]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	621a      	str	r2, [r3, #32]
}
 80103b2:	bf00      	nop
 80103b4:	371c      	adds	r7, #28
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	40010000 	.word	0x40010000

080103c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b087      	sub	sp, #28
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6a1b      	ldr	r3, [r3, #32]
 80103d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a1b      	ldr	r3, [r3, #32]
 80103d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	69db      	ldr	r3, [r3, #28]
 80103ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80103f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f023 0303 	bic.w	r3, r3, #3
 80103fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68fa      	ldr	r2, [r7, #12]
 8010402:	4313      	orrs	r3, r2
 8010404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801040c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	021b      	lsls	r3, r3, #8
 8010414:	697a      	ldr	r2, [r7, #20]
 8010416:	4313      	orrs	r3, r2
 8010418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4a1d      	ldr	r2, [pc, #116]	@ (8010494 <TIM_OC3_SetConfig+0xd0>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d10d      	bne.n	801043e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	021b      	lsls	r3, r3, #8
 8010430:	697a      	ldr	r2, [r7, #20]
 8010432:	4313      	orrs	r3, r2
 8010434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801043c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4a14      	ldr	r2, [pc, #80]	@ (8010494 <TIM_OC3_SetConfig+0xd0>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d113      	bne.n	801046e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801044c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	695b      	ldr	r3, [r3, #20]
 801045a:	011b      	lsls	r3, r3, #4
 801045c:	693a      	ldr	r2, [r7, #16]
 801045e:	4313      	orrs	r3, r2
 8010460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	011b      	lsls	r3, r3, #4
 8010468:	693a      	ldr	r2, [r7, #16]
 801046a:	4313      	orrs	r3, r2
 801046c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	693a      	ldr	r2, [r7, #16]
 8010472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	685a      	ldr	r2, [r3, #4]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	697a      	ldr	r2, [r7, #20]
 8010486:	621a      	str	r2, [r3, #32]
}
 8010488:	bf00      	nop
 801048a:	371c      	adds	r7, #28
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr
 8010494:	40010000 	.word	0x40010000

08010498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010498:	b480      	push	{r7}
 801049a:	b087      	sub	sp, #28
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a1b      	ldr	r3, [r3, #32]
 80104a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a1b      	ldr	r3, [r3, #32]
 80104ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	69db      	ldr	r3, [r3, #28]
 80104be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80104ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	021b      	lsls	r3, r3, #8
 80104d6:	68fa      	ldr	r2, [r7, #12]
 80104d8:	4313      	orrs	r3, r2
 80104da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80104e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	031b      	lsls	r3, r3, #12
 80104ea:	693a      	ldr	r2, [r7, #16]
 80104ec:	4313      	orrs	r3, r2
 80104ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a10      	ldr	r2, [pc, #64]	@ (8010534 <TIM_OC4_SetConfig+0x9c>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d109      	bne.n	801050c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80104fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	019b      	lsls	r3, r3, #6
 8010506:	697a      	ldr	r2, [r7, #20]
 8010508:	4313      	orrs	r3, r2
 801050a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	685a      	ldr	r2, [r3, #4]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	621a      	str	r2, [r3, #32]
}
 8010526:	bf00      	nop
 8010528:	371c      	adds	r7, #28
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	40010000 	.word	0x40010000

08010538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010538:	b480      	push	{r7}
 801053a:	b087      	sub	sp, #28
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	f023 0201 	bic.w	r2, r3, #1
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	699b      	ldr	r3, [r3, #24]
 801055a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	011b      	lsls	r3, r3, #4
 8010568:	693a      	ldr	r2, [r7, #16]
 801056a:	4313      	orrs	r3, r2
 801056c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	f023 030a 	bic.w	r3, r3, #10
 8010574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010576:	697a      	ldr	r2, [r7, #20]
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	4313      	orrs	r3, r2
 801057c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	693a      	ldr	r2, [r7, #16]
 8010582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	697a      	ldr	r2, [r7, #20]
 8010588:	621a      	str	r2, [r3, #32]
}
 801058a:	bf00      	nop
 801058c:	371c      	adds	r7, #28
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010596:	b480      	push	{r7}
 8010598:	b087      	sub	sp, #28
 801059a:	af00      	add	r7, sp, #0
 801059c:	60f8      	str	r0, [r7, #12]
 801059e:	60b9      	str	r1, [r7, #8]
 80105a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6a1b      	ldr	r3, [r3, #32]
 80105a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6a1b      	ldr	r3, [r3, #32]
 80105ac:	f023 0210 	bic.w	r2, r3, #16
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	699b      	ldr	r3, [r3, #24]
 80105b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80105c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	031b      	lsls	r3, r3, #12
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80105d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	011b      	lsls	r3, r3, #4
 80105d8:	697a      	ldr	r2, [r7, #20]
 80105da:	4313      	orrs	r3, r2
 80105dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	693a      	ldr	r2, [r7, #16]
 80105e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	697a      	ldr	r2, [r7, #20]
 80105e8:	621a      	str	r2, [r3, #32]
}
 80105ea:	bf00      	nop
 80105ec:	371c      	adds	r7, #28
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80105f6:	b480      	push	{r7}
 80105f8:	b085      	sub	sp, #20
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801060c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801060e:	683a      	ldr	r2, [r7, #0]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	4313      	orrs	r3, r2
 8010614:	f043 0307 	orr.w	r3, r3, #7
 8010618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	609a      	str	r2, [r3, #8]
}
 8010620:	bf00      	nop
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801062c:	b480      	push	{r7}
 801062e:	b087      	sub	sp, #28
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]
 8010638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	021a      	lsls	r2, r3, #8
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	431a      	orrs	r2, r3
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	4313      	orrs	r3, r2
 8010654:	697a      	ldr	r2, [r7, #20]
 8010656:	4313      	orrs	r3, r2
 8010658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	697a      	ldr	r2, [r7, #20]
 801065e:	609a      	str	r2, [r3, #8]
}
 8010660:	bf00      	nop
 8010662:	371c      	adds	r7, #28
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801066c:	b480      	push	{r7}
 801066e:	b087      	sub	sp, #28
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	f003 031f 	and.w	r3, r3, #31
 801067e:	2201      	movs	r2, #1
 8010680:	fa02 f303 	lsl.w	r3, r2, r3
 8010684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6a1a      	ldr	r2, [r3, #32]
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	43db      	mvns	r3, r3
 801068e:	401a      	ands	r2, r3
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	6a1a      	ldr	r2, [r3, #32]
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	f003 031f 	and.w	r3, r3, #31
 801069e:	6879      	ldr	r1, [r7, #4]
 80106a0:	fa01 f303 	lsl.w	r3, r1, r3
 80106a4:	431a      	orrs	r2, r3
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	621a      	str	r2, [r3, #32]
}
 80106aa:	bf00      	nop
 80106ac:	371c      	adds	r7, #28
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr
	...

080106b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d101      	bne.n	80106d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80106cc:	2302      	movs	r3, #2
 80106ce:	e050      	b.n	8010772 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2202      	movs	r2, #2
 80106dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	68fa      	ldr	r2, [r7, #12]
 80106fe:	4313      	orrs	r3, r2
 8010700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4a1c      	ldr	r2, [pc, #112]	@ (8010780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d018      	beq.n	8010746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801071c:	d013      	beq.n	8010746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	4a18      	ldr	r2, [pc, #96]	@ (8010784 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d00e      	beq.n	8010746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a16      	ldr	r2, [pc, #88]	@ (8010788 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d009      	beq.n	8010746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4a15      	ldr	r2, [pc, #84]	@ (801078c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d004      	beq.n	8010746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	4a13      	ldr	r2, [pc, #76]	@ (8010790 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010742:	4293      	cmp	r3, r2
 8010744:	d10c      	bne.n	8010760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801074c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	4313      	orrs	r3, r2
 8010756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	68ba      	ldr	r2, [r7, #8]
 801075e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2201      	movs	r2, #1
 8010764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010770:	2300      	movs	r3, #0
}
 8010772:	4618      	mov	r0, r3
 8010774:	3714      	adds	r7, #20
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop
 8010780:	40010000 	.word	0x40010000
 8010784:	40000400 	.word	0x40000400
 8010788:	40000800 	.word	0x40000800
 801078c:	40000c00 	.word	0x40000c00
 8010790:	40014000 	.word	0x40014000

08010794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801079e:	2300      	movs	r3, #0
 80107a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d101      	bne.n	80107b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80107ac:	2302      	movs	r3, #2
 80107ae:	e03d      	b.n	801082c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	4313      	orrs	r3, r2
 80107d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	4313      	orrs	r3, r2
 80107e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	691b      	ldr	r3, [r3, #16]
 80107fa:	4313      	orrs	r3, r2
 80107fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	695b      	ldr	r3, [r3, #20]
 8010808:	4313      	orrs	r3, r2
 801080a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	69db      	ldr	r3, [r3, #28]
 8010816:	4313      	orrs	r3, r2
 8010818:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3714      	adds	r7, #20
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010840:	bf00      	nop
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010854:	bf00      	nop
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <sniprintf>:
 8010860:	b40c      	push	{r2, r3}
 8010862:	b530      	push	{r4, r5, lr}
 8010864:	4b17      	ldr	r3, [pc, #92]	@ (80108c4 <sniprintf+0x64>)
 8010866:	1e0c      	subs	r4, r1, #0
 8010868:	681d      	ldr	r5, [r3, #0]
 801086a:	b09d      	sub	sp, #116	@ 0x74
 801086c:	da08      	bge.n	8010880 <sniprintf+0x20>
 801086e:	238b      	movs	r3, #139	@ 0x8b
 8010870:	602b      	str	r3, [r5, #0]
 8010872:	f04f 30ff 	mov.w	r0, #4294967295
 8010876:	b01d      	add	sp, #116	@ 0x74
 8010878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801087c:	b002      	add	sp, #8
 801087e:	4770      	bx	lr
 8010880:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010884:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010888:	bf14      	ite	ne
 801088a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801088e:	4623      	moveq	r3, r4
 8010890:	9304      	str	r3, [sp, #16]
 8010892:	9307      	str	r3, [sp, #28]
 8010894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010898:	9002      	str	r0, [sp, #8]
 801089a:	9006      	str	r0, [sp, #24]
 801089c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80108a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80108a2:	ab21      	add	r3, sp, #132	@ 0x84
 80108a4:	a902      	add	r1, sp, #8
 80108a6:	4628      	mov	r0, r5
 80108a8:	9301      	str	r3, [sp, #4]
 80108aa:	f000 f995 	bl	8010bd8 <_svfiprintf_r>
 80108ae:	1c43      	adds	r3, r0, #1
 80108b0:	bfbc      	itt	lt
 80108b2:	238b      	movlt	r3, #139	@ 0x8b
 80108b4:	602b      	strlt	r3, [r5, #0]
 80108b6:	2c00      	cmp	r4, #0
 80108b8:	d0dd      	beq.n	8010876 <sniprintf+0x16>
 80108ba:	9b02      	ldr	r3, [sp, #8]
 80108bc:	2200      	movs	r2, #0
 80108be:	701a      	strb	r2, [r3, #0]
 80108c0:	e7d9      	b.n	8010876 <sniprintf+0x16>
 80108c2:	bf00      	nop
 80108c4:	20000058 	.word	0x20000058

080108c8 <memset>:
 80108c8:	4402      	add	r2, r0
 80108ca:	4603      	mov	r3, r0
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d100      	bne.n	80108d2 <memset+0xa>
 80108d0:	4770      	bx	lr
 80108d2:	f803 1b01 	strb.w	r1, [r3], #1
 80108d6:	e7f9      	b.n	80108cc <memset+0x4>

080108d8 <__errno>:
 80108d8:	4b01      	ldr	r3, [pc, #4]	@ (80108e0 <__errno+0x8>)
 80108da:	6818      	ldr	r0, [r3, #0]
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	20000058 	.word	0x20000058

080108e4 <__libc_init_array>:
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	4d0d      	ldr	r5, [pc, #52]	@ (801091c <__libc_init_array+0x38>)
 80108e8:	4c0d      	ldr	r4, [pc, #52]	@ (8010920 <__libc_init_array+0x3c>)
 80108ea:	1b64      	subs	r4, r4, r5
 80108ec:	10a4      	asrs	r4, r4, #2
 80108ee:	2600      	movs	r6, #0
 80108f0:	42a6      	cmp	r6, r4
 80108f2:	d109      	bne.n	8010908 <__libc_init_array+0x24>
 80108f4:	4d0b      	ldr	r5, [pc, #44]	@ (8010924 <__libc_init_array+0x40>)
 80108f6:	4c0c      	ldr	r4, [pc, #48]	@ (8010928 <__libc_init_array+0x44>)
 80108f8:	f000 fc66 	bl	80111c8 <_init>
 80108fc:	1b64      	subs	r4, r4, r5
 80108fe:	10a4      	asrs	r4, r4, #2
 8010900:	2600      	movs	r6, #0
 8010902:	42a6      	cmp	r6, r4
 8010904:	d105      	bne.n	8010912 <__libc_init_array+0x2e>
 8010906:	bd70      	pop	{r4, r5, r6, pc}
 8010908:	f855 3b04 	ldr.w	r3, [r5], #4
 801090c:	4798      	blx	r3
 801090e:	3601      	adds	r6, #1
 8010910:	e7ee      	b.n	80108f0 <__libc_init_array+0xc>
 8010912:	f855 3b04 	ldr.w	r3, [r5], #4
 8010916:	4798      	blx	r3
 8010918:	3601      	adds	r6, #1
 801091a:	e7f2      	b.n	8010902 <__libc_init_array+0x1e>
 801091c:	08012e00 	.word	0x08012e00
 8010920:	08012e00 	.word	0x08012e00
 8010924:	08012e00 	.word	0x08012e00
 8010928:	08012e04 	.word	0x08012e04

0801092c <__retarget_lock_acquire_recursive>:
 801092c:	4770      	bx	lr

0801092e <__retarget_lock_release_recursive>:
 801092e:	4770      	bx	lr

08010930 <_free_r>:
 8010930:	b538      	push	{r3, r4, r5, lr}
 8010932:	4605      	mov	r5, r0
 8010934:	2900      	cmp	r1, #0
 8010936:	d041      	beq.n	80109bc <_free_r+0x8c>
 8010938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801093c:	1f0c      	subs	r4, r1, #4
 801093e:	2b00      	cmp	r3, #0
 8010940:	bfb8      	it	lt
 8010942:	18e4      	addlt	r4, r4, r3
 8010944:	f000 f8e0 	bl	8010b08 <__malloc_lock>
 8010948:	4a1d      	ldr	r2, [pc, #116]	@ (80109c0 <_free_r+0x90>)
 801094a:	6813      	ldr	r3, [r2, #0]
 801094c:	b933      	cbnz	r3, 801095c <_free_r+0x2c>
 801094e:	6063      	str	r3, [r4, #4]
 8010950:	6014      	str	r4, [r2, #0]
 8010952:	4628      	mov	r0, r5
 8010954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010958:	f000 b8dc 	b.w	8010b14 <__malloc_unlock>
 801095c:	42a3      	cmp	r3, r4
 801095e:	d908      	bls.n	8010972 <_free_r+0x42>
 8010960:	6820      	ldr	r0, [r4, #0]
 8010962:	1821      	adds	r1, r4, r0
 8010964:	428b      	cmp	r3, r1
 8010966:	bf01      	itttt	eq
 8010968:	6819      	ldreq	r1, [r3, #0]
 801096a:	685b      	ldreq	r3, [r3, #4]
 801096c:	1809      	addeq	r1, r1, r0
 801096e:	6021      	streq	r1, [r4, #0]
 8010970:	e7ed      	b.n	801094e <_free_r+0x1e>
 8010972:	461a      	mov	r2, r3
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	b10b      	cbz	r3, 801097c <_free_r+0x4c>
 8010978:	42a3      	cmp	r3, r4
 801097a:	d9fa      	bls.n	8010972 <_free_r+0x42>
 801097c:	6811      	ldr	r1, [r2, #0]
 801097e:	1850      	adds	r0, r2, r1
 8010980:	42a0      	cmp	r0, r4
 8010982:	d10b      	bne.n	801099c <_free_r+0x6c>
 8010984:	6820      	ldr	r0, [r4, #0]
 8010986:	4401      	add	r1, r0
 8010988:	1850      	adds	r0, r2, r1
 801098a:	4283      	cmp	r3, r0
 801098c:	6011      	str	r1, [r2, #0]
 801098e:	d1e0      	bne.n	8010952 <_free_r+0x22>
 8010990:	6818      	ldr	r0, [r3, #0]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	6053      	str	r3, [r2, #4]
 8010996:	4408      	add	r0, r1
 8010998:	6010      	str	r0, [r2, #0]
 801099a:	e7da      	b.n	8010952 <_free_r+0x22>
 801099c:	d902      	bls.n	80109a4 <_free_r+0x74>
 801099e:	230c      	movs	r3, #12
 80109a0:	602b      	str	r3, [r5, #0]
 80109a2:	e7d6      	b.n	8010952 <_free_r+0x22>
 80109a4:	6820      	ldr	r0, [r4, #0]
 80109a6:	1821      	adds	r1, r4, r0
 80109a8:	428b      	cmp	r3, r1
 80109aa:	bf04      	itt	eq
 80109ac:	6819      	ldreq	r1, [r3, #0]
 80109ae:	685b      	ldreq	r3, [r3, #4]
 80109b0:	6063      	str	r3, [r4, #4]
 80109b2:	bf04      	itt	eq
 80109b4:	1809      	addeq	r1, r1, r0
 80109b6:	6021      	streq	r1, [r4, #0]
 80109b8:	6054      	str	r4, [r2, #4]
 80109ba:	e7ca      	b.n	8010952 <_free_r+0x22>
 80109bc:	bd38      	pop	{r3, r4, r5, pc}
 80109be:	bf00      	nop
 80109c0:	20000b34 	.word	0x20000b34

080109c4 <sbrk_aligned>:
 80109c4:	b570      	push	{r4, r5, r6, lr}
 80109c6:	4e0f      	ldr	r6, [pc, #60]	@ (8010a04 <sbrk_aligned+0x40>)
 80109c8:	460c      	mov	r4, r1
 80109ca:	6831      	ldr	r1, [r6, #0]
 80109cc:	4605      	mov	r5, r0
 80109ce:	b911      	cbnz	r1, 80109d6 <sbrk_aligned+0x12>
 80109d0:	f000 fba6 	bl	8011120 <_sbrk_r>
 80109d4:	6030      	str	r0, [r6, #0]
 80109d6:	4621      	mov	r1, r4
 80109d8:	4628      	mov	r0, r5
 80109da:	f000 fba1 	bl	8011120 <_sbrk_r>
 80109de:	1c43      	adds	r3, r0, #1
 80109e0:	d103      	bne.n	80109ea <sbrk_aligned+0x26>
 80109e2:	f04f 34ff 	mov.w	r4, #4294967295
 80109e6:	4620      	mov	r0, r4
 80109e8:	bd70      	pop	{r4, r5, r6, pc}
 80109ea:	1cc4      	adds	r4, r0, #3
 80109ec:	f024 0403 	bic.w	r4, r4, #3
 80109f0:	42a0      	cmp	r0, r4
 80109f2:	d0f8      	beq.n	80109e6 <sbrk_aligned+0x22>
 80109f4:	1a21      	subs	r1, r4, r0
 80109f6:	4628      	mov	r0, r5
 80109f8:	f000 fb92 	bl	8011120 <_sbrk_r>
 80109fc:	3001      	adds	r0, #1
 80109fe:	d1f2      	bne.n	80109e6 <sbrk_aligned+0x22>
 8010a00:	e7ef      	b.n	80109e2 <sbrk_aligned+0x1e>
 8010a02:	bf00      	nop
 8010a04:	20000b30 	.word	0x20000b30

08010a08 <_malloc_r>:
 8010a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a0c:	1ccd      	adds	r5, r1, #3
 8010a0e:	f025 0503 	bic.w	r5, r5, #3
 8010a12:	3508      	adds	r5, #8
 8010a14:	2d0c      	cmp	r5, #12
 8010a16:	bf38      	it	cc
 8010a18:	250c      	movcc	r5, #12
 8010a1a:	2d00      	cmp	r5, #0
 8010a1c:	4606      	mov	r6, r0
 8010a1e:	db01      	blt.n	8010a24 <_malloc_r+0x1c>
 8010a20:	42a9      	cmp	r1, r5
 8010a22:	d904      	bls.n	8010a2e <_malloc_r+0x26>
 8010a24:	230c      	movs	r3, #12
 8010a26:	6033      	str	r3, [r6, #0]
 8010a28:	2000      	movs	r0, #0
 8010a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b04 <_malloc_r+0xfc>
 8010a32:	f000 f869 	bl	8010b08 <__malloc_lock>
 8010a36:	f8d8 3000 	ldr.w	r3, [r8]
 8010a3a:	461c      	mov	r4, r3
 8010a3c:	bb44      	cbnz	r4, 8010a90 <_malloc_r+0x88>
 8010a3e:	4629      	mov	r1, r5
 8010a40:	4630      	mov	r0, r6
 8010a42:	f7ff ffbf 	bl	80109c4 <sbrk_aligned>
 8010a46:	1c43      	adds	r3, r0, #1
 8010a48:	4604      	mov	r4, r0
 8010a4a:	d158      	bne.n	8010afe <_malloc_r+0xf6>
 8010a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8010a50:	4627      	mov	r7, r4
 8010a52:	2f00      	cmp	r7, #0
 8010a54:	d143      	bne.n	8010ade <_malloc_r+0xd6>
 8010a56:	2c00      	cmp	r4, #0
 8010a58:	d04b      	beq.n	8010af2 <_malloc_r+0xea>
 8010a5a:	6823      	ldr	r3, [r4, #0]
 8010a5c:	4639      	mov	r1, r7
 8010a5e:	4630      	mov	r0, r6
 8010a60:	eb04 0903 	add.w	r9, r4, r3
 8010a64:	f000 fb5c 	bl	8011120 <_sbrk_r>
 8010a68:	4581      	cmp	r9, r0
 8010a6a:	d142      	bne.n	8010af2 <_malloc_r+0xea>
 8010a6c:	6821      	ldr	r1, [r4, #0]
 8010a6e:	1a6d      	subs	r5, r5, r1
 8010a70:	4629      	mov	r1, r5
 8010a72:	4630      	mov	r0, r6
 8010a74:	f7ff ffa6 	bl	80109c4 <sbrk_aligned>
 8010a78:	3001      	adds	r0, #1
 8010a7a:	d03a      	beq.n	8010af2 <_malloc_r+0xea>
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	442b      	add	r3, r5
 8010a80:	6023      	str	r3, [r4, #0]
 8010a82:	f8d8 3000 	ldr.w	r3, [r8]
 8010a86:	685a      	ldr	r2, [r3, #4]
 8010a88:	bb62      	cbnz	r2, 8010ae4 <_malloc_r+0xdc>
 8010a8a:	f8c8 7000 	str.w	r7, [r8]
 8010a8e:	e00f      	b.n	8010ab0 <_malloc_r+0xa8>
 8010a90:	6822      	ldr	r2, [r4, #0]
 8010a92:	1b52      	subs	r2, r2, r5
 8010a94:	d420      	bmi.n	8010ad8 <_malloc_r+0xd0>
 8010a96:	2a0b      	cmp	r2, #11
 8010a98:	d917      	bls.n	8010aca <_malloc_r+0xc2>
 8010a9a:	1961      	adds	r1, r4, r5
 8010a9c:	42a3      	cmp	r3, r4
 8010a9e:	6025      	str	r5, [r4, #0]
 8010aa0:	bf18      	it	ne
 8010aa2:	6059      	strne	r1, [r3, #4]
 8010aa4:	6863      	ldr	r3, [r4, #4]
 8010aa6:	bf08      	it	eq
 8010aa8:	f8c8 1000 	streq.w	r1, [r8]
 8010aac:	5162      	str	r2, [r4, r5]
 8010aae:	604b      	str	r3, [r1, #4]
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	f000 f82f 	bl	8010b14 <__malloc_unlock>
 8010ab6:	f104 000b 	add.w	r0, r4, #11
 8010aba:	1d23      	adds	r3, r4, #4
 8010abc:	f020 0007 	bic.w	r0, r0, #7
 8010ac0:	1ac2      	subs	r2, r0, r3
 8010ac2:	bf1c      	itt	ne
 8010ac4:	1a1b      	subne	r3, r3, r0
 8010ac6:	50a3      	strne	r3, [r4, r2]
 8010ac8:	e7af      	b.n	8010a2a <_malloc_r+0x22>
 8010aca:	6862      	ldr	r2, [r4, #4]
 8010acc:	42a3      	cmp	r3, r4
 8010ace:	bf0c      	ite	eq
 8010ad0:	f8c8 2000 	streq.w	r2, [r8]
 8010ad4:	605a      	strne	r2, [r3, #4]
 8010ad6:	e7eb      	b.n	8010ab0 <_malloc_r+0xa8>
 8010ad8:	4623      	mov	r3, r4
 8010ada:	6864      	ldr	r4, [r4, #4]
 8010adc:	e7ae      	b.n	8010a3c <_malloc_r+0x34>
 8010ade:	463c      	mov	r4, r7
 8010ae0:	687f      	ldr	r7, [r7, #4]
 8010ae2:	e7b6      	b.n	8010a52 <_malloc_r+0x4a>
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	42a3      	cmp	r3, r4
 8010aea:	d1fb      	bne.n	8010ae4 <_malloc_r+0xdc>
 8010aec:	2300      	movs	r3, #0
 8010aee:	6053      	str	r3, [r2, #4]
 8010af0:	e7de      	b.n	8010ab0 <_malloc_r+0xa8>
 8010af2:	230c      	movs	r3, #12
 8010af4:	6033      	str	r3, [r6, #0]
 8010af6:	4630      	mov	r0, r6
 8010af8:	f000 f80c 	bl	8010b14 <__malloc_unlock>
 8010afc:	e794      	b.n	8010a28 <_malloc_r+0x20>
 8010afe:	6005      	str	r5, [r0, #0]
 8010b00:	e7d6      	b.n	8010ab0 <_malloc_r+0xa8>
 8010b02:	bf00      	nop
 8010b04:	20000b34 	.word	0x20000b34

08010b08 <__malloc_lock>:
 8010b08:	4801      	ldr	r0, [pc, #4]	@ (8010b10 <__malloc_lock+0x8>)
 8010b0a:	f7ff bf0f 	b.w	801092c <__retarget_lock_acquire_recursive>
 8010b0e:	bf00      	nop
 8010b10:	20000b2c 	.word	0x20000b2c

08010b14 <__malloc_unlock>:
 8010b14:	4801      	ldr	r0, [pc, #4]	@ (8010b1c <__malloc_unlock+0x8>)
 8010b16:	f7ff bf0a 	b.w	801092e <__retarget_lock_release_recursive>
 8010b1a:	bf00      	nop
 8010b1c:	20000b2c 	.word	0x20000b2c

08010b20 <__ssputs_r>:
 8010b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b24:	688e      	ldr	r6, [r1, #8]
 8010b26:	461f      	mov	r7, r3
 8010b28:	42be      	cmp	r6, r7
 8010b2a:	680b      	ldr	r3, [r1, #0]
 8010b2c:	4682      	mov	sl, r0
 8010b2e:	460c      	mov	r4, r1
 8010b30:	4690      	mov	r8, r2
 8010b32:	d82d      	bhi.n	8010b90 <__ssputs_r+0x70>
 8010b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010b3c:	d026      	beq.n	8010b8c <__ssputs_r+0x6c>
 8010b3e:	6965      	ldr	r5, [r4, #20]
 8010b40:	6909      	ldr	r1, [r1, #16]
 8010b42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b46:	eba3 0901 	sub.w	r9, r3, r1
 8010b4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b4e:	1c7b      	adds	r3, r7, #1
 8010b50:	444b      	add	r3, r9
 8010b52:	106d      	asrs	r5, r5, #1
 8010b54:	429d      	cmp	r5, r3
 8010b56:	bf38      	it	cc
 8010b58:	461d      	movcc	r5, r3
 8010b5a:	0553      	lsls	r3, r2, #21
 8010b5c:	d527      	bpl.n	8010bae <__ssputs_r+0x8e>
 8010b5e:	4629      	mov	r1, r5
 8010b60:	f7ff ff52 	bl	8010a08 <_malloc_r>
 8010b64:	4606      	mov	r6, r0
 8010b66:	b360      	cbz	r0, 8010bc2 <__ssputs_r+0xa2>
 8010b68:	6921      	ldr	r1, [r4, #16]
 8010b6a:	464a      	mov	r2, r9
 8010b6c:	f000 fae8 	bl	8011140 <memcpy>
 8010b70:	89a3      	ldrh	r3, [r4, #12]
 8010b72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b7a:	81a3      	strh	r3, [r4, #12]
 8010b7c:	6126      	str	r6, [r4, #16]
 8010b7e:	6165      	str	r5, [r4, #20]
 8010b80:	444e      	add	r6, r9
 8010b82:	eba5 0509 	sub.w	r5, r5, r9
 8010b86:	6026      	str	r6, [r4, #0]
 8010b88:	60a5      	str	r5, [r4, #8]
 8010b8a:	463e      	mov	r6, r7
 8010b8c:	42be      	cmp	r6, r7
 8010b8e:	d900      	bls.n	8010b92 <__ssputs_r+0x72>
 8010b90:	463e      	mov	r6, r7
 8010b92:	6820      	ldr	r0, [r4, #0]
 8010b94:	4632      	mov	r2, r6
 8010b96:	4641      	mov	r1, r8
 8010b98:	f000 faa8 	bl	80110ec <memmove>
 8010b9c:	68a3      	ldr	r3, [r4, #8]
 8010b9e:	1b9b      	subs	r3, r3, r6
 8010ba0:	60a3      	str	r3, [r4, #8]
 8010ba2:	6823      	ldr	r3, [r4, #0]
 8010ba4:	4433      	add	r3, r6
 8010ba6:	6023      	str	r3, [r4, #0]
 8010ba8:	2000      	movs	r0, #0
 8010baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bae:	462a      	mov	r2, r5
 8010bb0:	f000 fad4 	bl	801115c <_realloc_r>
 8010bb4:	4606      	mov	r6, r0
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	d1e0      	bne.n	8010b7c <__ssputs_r+0x5c>
 8010bba:	6921      	ldr	r1, [r4, #16]
 8010bbc:	4650      	mov	r0, sl
 8010bbe:	f7ff feb7 	bl	8010930 <_free_r>
 8010bc2:	230c      	movs	r3, #12
 8010bc4:	f8ca 3000 	str.w	r3, [sl]
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bce:	81a3      	strh	r3, [r4, #12]
 8010bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd4:	e7e9      	b.n	8010baa <__ssputs_r+0x8a>
	...

08010bd8 <_svfiprintf_r>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	4698      	mov	r8, r3
 8010bde:	898b      	ldrh	r3, [r1, #12]
 8010be0:	061b      	lsls	r3, r3, #24
 8010be2:	b09d      	sub	sp, #116	@ 0x74
 8010be4:	4607      	mov	r7, r0
 8010be6:	460d      	mov	r5, r1
 8010be8:	4614      	mov	r4, r2
 8010bea:	d510      	bpl.n	8010c0e <_svfiprintf_r+0x36>
 8010bec:	690b      	ldr	r3, [r1, #16]
 8010bee:	b973      	cbnz	r3, 8010c0e <_svfiprintf_r+0x36>
 8010bf0:	2140      	movs	r1, #64	@ 0x40
 8010bf2:	f7ff ff09 	bl	8010a08 <_malloc_r>
 8010bf6:	6028      	str	r0, [r5, #0]
 8010bf8:	6128      	str	r0, [r5, #16]
 8010bfa:	b930      	cbnz	r0, 8010c0a <_svfiprintf_r+0x32>
 8010bfc:	230c      	movs	r3, #12
 8010bfe:	603b      	str	r3, [r7, #0]
 8010c00:	f04f 30ff 	mov.w	r0, #4294967295
 8010c04:	b01d      	add	sp, #116	@ 0x74
 8010c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0a:	2340      	movs	r3, #64	@ 0x40
 8010c0c:	616b      	str	r3, [r5, #20]
 8010c0e:	2300      	movs	r3, #0
 8010c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c12:	2320      	movs	r3, #32
 8010c14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c1c:	2330      	movs	r3, #48	@ 0x30
 8010c1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010dbc <_svfiprintf_r+0x1e4>
 8010c22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c26:	f04f 0901 	mov.w	r9, #1
 8010c2a:	4623      	mov	r3, r4
 8010c2c:	469a      	mov	sl, r3
 8010c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c32:	b10a      	cbz	r2, 8010c38 <_svfiprintf_r+0x60>
 8010c34:	2a25      	cmp	r2, #37	@ 0x25
 8010c36:	d1f9      	bne.n	8010c2c <_svfiprintf_r+0x54>
 8010c38:	ebba 0b04 	subs.w	fp, sl, r4
 8010c3c:	d00b      	beq.n	8010c56 <_svfiprintf_r+0x7e>
 8010c3e:	465b      	mov	r3, fp
 8010c40:	4622      	mov	r2, r4
 8010c42:	4629      	mov	r1, r5
 8010c44:	4638      	mov	r0, r7
 8010c46:	f7ff ff6b 	bl	8010b20 <__ssputs_r>
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	f000 80a7 	beq.w	8010d9e <_svfiprintf_r+0x1c6>
 8010c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c52:	445a      	add	r2, fp
 8010c54:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c56:	f89a 3000 	ldrb.w	r3, [sl]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	f000 809f 	beq.w	8010d9e <_svfiprintf_r+0x1c6>
 8010c60:	2300      	movs	r3, #0
 8010c62:	f04f 32ff 	mov.w	r2, #4294967295
 8010c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c6a:	f10a 0a01 	add.w	sl, sl, #1
 8010c6e:	9304      	str	r3, [sp, #16]
 8010c70:	9307      	str	r3, [sp, #28]
 8010c72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010c76:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c78:	4654      	mov	r4, sl
 8010c7a:	2205      	movs	r2, #5
 8010c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c80:	484e      	ldr	r0, [pc, #312]	@ (8010dbc <_svfiprintf_r+0x1e4>)
 8010c82:	f7ef faad 	bl	80001e0 <memchr>
 8010c86:	9a04      	ldr	r2, [sp, #16]
 8010c88:	b9d8      	cbnz	r0, 8010cc2 <_svfiprintf_r+0xea>
 8010c8a:	06d0      	lsls	r0, r2, #27
 8010c8c:	bf44      	itt	mi
 8010c8e:	2320      	movmi	r3, #32
 8010c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c94:	0711      	lsls	r1, r2, #28
 8010c96:	bf44      	itt	mi
 8010c98:	232b      	movmi	r3, #43	@ 0x2b
 8010c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ca4:	d015      	beq.n	8010cd2 <_svfiprintf_r+0xfa>
 8010ca6:	9a07      	ldr	r2, [sp, #28]
 8010ca8:	4654      	mov	r4, sl
 8010caa:	2000      	movs	r0, #0
 8010cac:	f04f 0c0a 	mov.w	ip, #10
 8010cb0:	4621      	mov	r1, r4
 8010cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cb6:	3b30      	subs	r3, #48	@ 0x30
 8010cb8:	2b09      	cmp	r3, #9
 8010cba:	d94b      	bls.n	8010d54 <_svfiprintf_r+0x17c>
 8010cbc:	b1b0      	cbz	r0, 8010cec <_svfiprintf_r+0x114>
 8010cbe:	9207      	str	r2, [sp, #28]
 8010cc0:	e014      	b.n	8010cec <_svfiprintf_r+0x114>
 8010cc2:	eba0 0308 	sub.w	r3, r0, r8
 8010cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	9304      	str	r3, [sp, #16]
 8010cce:	46a2      	mov	sl, r4
 8010cd0:	e7d2      	b.n	8010c78 <_svfiprintf_r+0xa0>
 8010cd2:	9b03      	ldr	r3, [sp, #12]
 8010cd4:	1d19      	adds	r1, r3, #4
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	9103      	str	r1, [sp, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	bfbb      	ittet	lt
 8010cde:	425b      	neglt	r3, r3
 8010ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8010ce4:	9307      	strge	r3, [sp, #28]
 8010ce6:	9307      	strlt	r3, [sp, #28]
 8010ce8:	bfb8      	it	lt
 8010cea:	9204      	strlt	r2, [sp, #16]
 8010cec:	7823      	ldrb	r3, [r4, #0]
 8010cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8010cf0:	d10a      	bne.n	8010d08 <_svfiprintf_r+0x130>
 8010cf2:	7863      	ldrb	r3, [r4, #1]
 8010cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010cf6:	d132      	bne.n	8010d5e <_svfiprintf_r+0x186>
 8010cf8:	9b03      	ldr	r3, [sp, #12]
 8010cfa:	1d1a      	adds	r2, r3, #4
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	9203      	str	r2, [sp, #12]
 8010d00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d04:	3402      	adds	r4, #2
 8010d06:	9305      	str	r3, [sp, #20]
 8010d08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010dcc <_svfiprintf_r+0x1f4>
 8010d0c:	7821      	ldrb	r1, [r4, #0]
 8010d0e:	2203      	movs	r2, #3
 8010d10:	4650      	mov	r0, sl
 8010d12:	f7ef fa65 	bl	80001e0 <memchr>
 8010d16:	b138      	cbz	r0, 8010d28 <_svfiprintf_r+0x150>
 8010d18:	9b04      	ldr	r3, [sp, #16]
 8010d1a:	eba0 000a 	sub.w	r0, r0, sl
 8010d1e:	2240      	movs	r2, #64	@ 0x40
 8010d20:	4082      	lsls	r2, r0
 8010d22:	4313      	orrs	r3, r2
 8010d24:	3401      	adds	r4, #1
 8010d26:	9304      	str	r3, [sp, #16]
 8010d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d2c:	4824      	ldr	r0, [pc, #144]	@ (8010dc0 <_svfiprintf_r+0x1e8>)
 8010d2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d32:	2206      	movs	r2, #6
 8010d34:	f7ef fa54 	bl	80001e0 <memchr>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d036      	beq.n	8010daa <_svfiprintf_r+0x1d2>
 8010d3c:	4b21      	ldr	r3, [pc, #132]	@ (8010dc4 <_svfiprintf_r+0x1ec>)
 8010d3e:	bb1b      	cbnz	r3, 8010d88 <_svfiprintf_r+0x1b0>
 8010d40:	9b03      	ldr	r3, [sp, #12]
 8010d42:	3307      	adds	r3, #7
 8010d44:	f023 0307 	bic.w	r3, r3, #7
 8010d48:	3308      	adds	r3, #8
 8010d4a:	9303      	str	r3, [sp, #12]
 8010d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d4e:	4433      	add	r3, r6
 8010d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d52:	e76a      	b.n	8010c2a <_svfiprintf_r+0x52>
 8010d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d58:	460c      	mov	r4, r1
 8010d5a:	2001      	movs	r0, #1
 8010d5c:	e7a8      	b.n	8010cb0 <_svfiprintf_r+0xd8>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	3401      	adds	r4, #1
 8010d62:	9305      	str	r3, [sp, #20]
 8010d64:	4619      	mov	r1, r3
 8010d66:	f04f 0c0a 	mov.w	ip, #10
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d70:	3a30      	subs	r2, #48	@ 0x30
 8010d72:	2a09      	cmp	r2, #9
 8010d74:	d903      	bls.n	8010d7e <_svfiprintf_r+0x1a6>
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d0c6      	beq.n	8010d08 <_svfiprintf_r+0x130>
 8010d7a:	9105      	str	r1, [sp, #20]
 8010d7c:	e7c4      	b.n	8010d08 <_svfiprintf_r+0x130>
 8010d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d82:	4604      	mov	r4, r0
 8010d84:	2301      	movs	r3, #1
 8010d86:	e7f0      	b.n	8010d6a <_svfiprintf_r+0x192>
 8010d88:	ab03      	add	r3, sp, #12
 8010d8a:	9300      	str	r3, [sp, #0]
 8010d8c:	462a      	mov	r2, r5
 8010d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8010dc8 <_svfiprintf_r+0x1f0>)
 8010d90:	a904      	add	r1, sp, #16
 8010d92:	4638      	mov	r0, r7
 8010d94:	f3af 8000 	nop.w
 8010d98:	1c42      	adds	r2, r0, #1
 8010d9a:	4606      	mov	r6, r0
 8010d9c:	d1d6      	bne.n	8010d4c <_svfiprintf_r+0x174>
 8010d9e:	89ab      	ldrh	r3, [r5, #12]
 8010da0:	065b      	lsls	r3, r3, #25
 8010da2:	f53f af2d 	bmi.w	8010c00 <_svfiprintf_r+0x28>
 8010da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010da8:	e72c      	b.n	8010c04 <_svfiprintf_r+0x2c>
 8010daa:	ab03      	add	r3, sp, #12
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	462a      	mov	r2, r5
 8010db0:	4b05      	ldr	r3, [pc, #20]	@ (8010dc8 <_svfiprintf_r+0x1f0>)
 8010db2:	a904      	add	r1, sp, #16
 8010db4:	4638      	mov	r0, r7
 8010db6:	f000 f879 	bl	8010eac <_printf_i>
 8010dba:	e7ed      	b.n	8010d98 <_svfiprintf_r+0x1c0>
 8010dbc:	08012dc4 	.word	0x08012dc4
 8010dc0:	08012dce 	.word	0x08012dce
 8010dc4:	00000000 	.word	0x00000000
 8010dc8:	08010b21 	.word	0x08010b21
 8010dcc:	08012dca 	.word	0x08012dca

08010dd0 <_printf_common>:
 8010dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd4:	4616      	mov	r6, r2
 8010dd6:	4698      	mov	r8, r3
 8010dd8:	688a      	ldr	r2, [r1, #8]
 8010dda:	690b      	ldr	r3, [r1, #16]
 8010ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010de0:	4293      	cmp	r3, r2
 8010de2:	bfb8      	it	lt
 8010de4:	4613      	movlt	r3, r2
 8010de6:	6033      	str	r3, [r6, #0]
 8010de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010dec:	4607      	mov	r7, r0
 8010dee:	460c      	mov	r4, r1
 8010df0:	b10a      	cbz	r2, 8010df6 <_printf_common+0x26>
 8010df2:	3301      	adds	r3, #1
 8010df4:	6033      	str	r3, [r6, #0]
 8010df6:	6823      	ldr	r3, [r4, #0]
 8010df8:	0699      	lsls	r1, r3, #26
 8010dfa:	bf42      	ittt	mi
 8010dfc:	6833      	ldrmi	r3, [r6, #0]
 8010dfe:	3302      	addmi	r3, #2
 8010e00:	6033      	strmi	r3, [r6, #0]
 8010e02:	6825      	ldr	r5, [r4, #0]
 8010e04:	f015 0506 	ands.w	r5, r5, #6
 8010e08:	d106      	bne.n	8010e18 <_printf_common+0x48>
 8010e0a:	f104 0a19 	add.w	sl, r4, #25
 8010e0e:	68e3      	ldr	r3, [r4, #12]
 8010e10:	6832      	ldr	r2, [r6, #0]
 8010e12:	1a9b      	subs	r3, r3, r2
 8010e14:	42ab      	cmp	r3, r5
 8010e16:	dc26      	bgt.n	8010e66 <_printf_common+0x96>
 8010e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010e1c:	6822      	ldr	r2, [r4, #0]
 8010e1e:	3b00      	subs	r3, #0
 8010e20:	bf18      	it	ne
 8010e22:	2301      	movne	r3, #1
 8010e24:	0692      	lsls	r2, r2, #26
 8010e26:	d42b      	bmi.n	8010e80 <_printf_common+0xb0>
 8010e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010e2c:	4641      	mov	r1, r8
 8010e2e:	4638      	mov	r0, r7
 8010e30:	47c8      	blx	r9
 8010e32:	3001      	adds	r0, #1
 8010e34:	d01e      	beq.n	8010e74 <_printf_common+0xa4>
 8010e36:	6823      	ldr	r3, [r4, #0]
 8010e38:	6922      	ldr	r2, [r4, #16]
 8010e3a:	f003 0306 	and.w	r3, r3, #6
 8010e3e:	2b04      	cmp	r3, #4
 8010e40:	bf02      	ittt	eq
 8010e42:	68e5      	ldreq	r5, [r4, #12]
 8010e44:	6833      	ldreq	r3, [r6, #0]
 8010e46:	1aed      	subeq	r5, r5, r3
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	bf0c      	ite	eq
 8010e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e50:	2500      	movne	r5, #0
 8010e52:	4293      	cmp	r3, r2
 8010e54:	bfc4      	itt	gt
 8010e56:	1a9b      	subgt	r3, r3, r2
 8010e58:	18ed      	addgt	r5, r5, r3
 8010e5a:	2600      	movs	r6, #0
 8010e5c:	341a      	adds	r4, #26
 8010e5e:	42b5      	cmp	r5, r6
 8010e60:	d11a      	bne.n	8010e98 <_printf_common+0xc8>
 8010e62:	2000      	movs	r0, #0
 8010e64:	e008      	b.n	8010e78 <_printf_common+0xa8>
 8010e66:	2301      	movs	r3, #1
 8010e68:	4652      	mov	r2, sl
 8010e6a:	4641      	mov	r1, r8
 8010e6c:	4638      	mov	r0, r7
 8010e6e:	47c8      	blx	r9
 8010e70:	3001      	adds	r0, #1
 8010e72:	d103      	bne.n	8010e7c <_printf_common+0xac>
 8010e74:	f04f 30ff 	mov.w	r0, #4294967295
 8010e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e7c:	3501      	adds	r5, #1
 8010e7e:	e7c6      	b.n	8010e0e <_printf_common+0x3e>
 8010e80:	18e1      	adds	r1, r4, r3
 8010e82:	1c5a      	adds	r2, r3, #1
 8010e84:	2030      	movs	r0, #48	@ 0x30
 8010e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010e8a:	4422      	add	r2, r4
 8010e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010e94:	3302      	adds	r3, #2
 8010e96:	e7c7      	b.n	8010e28 <_printf_common+0x58>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	4622      	mov	r2, r4
 8010e9c:	4641      	mov	r1, r8
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	47c8      	blx	r9
 8010ea2:	3001      	adds	r0, #1
 8010ea4:	d0e6      	beq.n	8010e74 <_printf_common+0xa4>
 8010ea6:	3601      	adds	r6, #1
 8010ea8:	e7d9      	b.n	8010e5e <_printf_common+0x8e>
	...

08010eac <_printf_i>:
 8010eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb0:	7e0f      	ldrb	r7, [r1, #24]
 8010eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010eb4:	2f78      	cmp	r7, #120	@ 0x78
 8010eb6:	4691      	mov	r9, r2
 8010eb8:	4680      	mov	r8, r0
 8010eba:	460c      	mov	r4, r1
 8010ebc:	469a      	mov	sl, r3
 8010ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ec2:	d807      	bhi.n	8010ed4 <_printf_i+0x28>
 8010ec4:	2f62      	cmp	r7, #98	@ 0x62
 8010ec6:	d80a      	bhi.n	8010ede <_printf_i+0x32>
 8010ec8:	2f00      	cmp	r7, #0
 8010eca:	f000 80d2 	beq.w	8011072 <_printf_i+0x1c6>
 8010ece:	2f58      	cmp	r7, #88	@ 0x58
 8010ed0:	f000 80b9 	beq.w	8011046 <_printf_i+0x19a>
 8010ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010edc:	e03a      	b.n	8010f54 <_printf_i+0xa8>
 8010ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ee2:	2b15      	cmp	r3, #21
 8010ee4:	d8f6      	bhi.n	8010ed4 <_printf_i+0x28>
 8010ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8010eec <_printf_i+0x40>)
 8010ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010eec:	08010f45 	.word	0x08010f45
 8010ef0:	08010f59 	.word	0x08010f59
 8010ef4:	08010ed5 	.word	0x08010ed5
 8010ef8:	08010ed5 	.word	0x08010ed5
 8010efc:	08010ed5 	.word	0x08010ed5
 8010f00:	08010ed5 	.word	0x08010ed5
 8010f04:	08010f59 	.word	0x08010f59
 8010f08:	08010ed5 	.word	0x08010ed5
 8010f0c:	08010ed5 	.word	0x08010ed5
 8010f10:	08010ed5 	.word	0x08010ed5
 8010f14:	08010ed5 	.word	0x08010ed5
 8010f18:	08011059 	.word	0x08011059
 8010f1c:	08010f83 	.word	0x08010f83
 8010f20:	08011013 	.word	0x08011013
 8010f24:	08010ed5 	.word	0x08010ed5
 8010f28:	08010ed5 	.word	0x08010ed5
 8010f2c:	0801107b 	.word	0x0801107b
 8010f30:	08010ed5 	.word	0x08010ed5
 8010f34:	08010f83 	.word	0x08010f83
 8010f38:	08010ed5 	.word	0x08010ed5
 8010f3c:	08010ed5 	.word	0x08010ed5
 8010f40:	0801101b 	.word	0x0801101b
 8010f44:	6833      	ldr	r3, [r6, #0]
 8010f46:	1d1a      	adds	r2, r3, #4
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	6032      	str	r2, [r6, #0]
 8010f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010f54:	2301      	movs	r3, #1
 8010f56:	e09d      	b.n	8011094 <_printf_i+0x1e8>
 8010f58:	6833      	ldr	r3, [r6, #0]
 8010f5a:	6820      	ldr	r0, [r4, #0]
 8010f5c:	1d19      	adds	r1, r3, #4
 8010f5e:	6031      	str	r1, [r6, #0]
 8010f60:	0606      	lsls	r6, r0, #24
 8010f62:	d501      	bpl.n	8010f68 <_printf_i+0xbc>
 8010f64:	681d      	ldr	r5, [r3, #0]
 8010f66:	e003      	b.n	8010f70 <_printf_i+0xc4>
 8010f68:	0645      	lsls	r5, r0, #25
 8010f6a:	d5fb      	bpl.n	8010f64 <_printf_i+0xb8>
 8010f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f70:	2d00      	cmp	r5, #0
 8010f72:	da03      	bge.n	8010f7c <_printf_i+0xd0>
 8010f74:	232d      	movs	r3, #45	@ 0x2d
 8010f76:	426d      	negs	r5, r5
 8010f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f7c:	4859      	ldr	r0, [pc, #356]	@ (80110e4 <_printf_i+0x238>)
 8010f7e:	230a      	movs	r3, #10
 8010f80:	e011      	b.n	8010fa6 <_printf_i+0xfa>
 8010f82:	6821      	ldr	r1, [r4, #0]
 8010f84:	6833      	ldr	r3, [r6, #0]
 8010f86:	0608      	lsls	r0, r1, #24
 8010f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8010f8c:	d402      	bmi.n	8010f94 <_printf_i+0xe8>
 8010f8e:	0649      	lsls	r1, r1, #25
 8010f90:	bf48      	it	mi
 8010f92:	b2ad      	uxthmi	r5, r5
 8010f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8010f96:	4853      	ldr	r0, [pc, #332]	@ (80110e4 <_printf_i+0x238>)
 8010f98:	6033      	str	r3, [r6, #0]
 8010f9a:	bf14      	ite	ne
 8010f9c:	230a      	movne	r3, #10
 8010f9e:	2308      	moveq	r3, #8
 8010fa0:	2100      	movs	r1, #0
 8010fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010fa6:	6866      	ldr	r6, [r4, #4]
 8010fa8:	60a6      	str	r6, [r4, #8]
 8010faa:	2e00      	cmp	r6, #0
 8010fac:	bfa2      	ittt	ge
 8010fae:	6821      	ldrge	r1, [r4, #0]
 8010fb0:	f021 0104 	bicge.w	r1, r1, #4
 8010fb4:	6021      	strge	r1, [r4, #0]
 8010fb6:	b90d      	cbnz	r5, 8010fbc <_printf_i+0x110>
 8010fb8:	2e00      	cmp	r6, #0
 8010fba:	d04b      	beq.n	8011054 <_printf_i+0x1a8>
 8010fbc:	4616      	mov	r6, r2
 8010fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8010fc6:	5dc7      	ldrb	r7, [r0, r7]
 8010fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010fcc:	462f      	mov	r7, r5
 8010fce:	42bb      	cmp	r3, r7
 8010fd0:	460d      	mov	r5, r1
 8010fd2:	d9f4      	bls.n	8010fbe <_printf_i+0x112>
 8010fd4:	2b08      	cmp	r3, #8
 8010fd6:	d10b      	bne.n	8010ff0 <_printf_i+0x144>
 8010fd8:	6823      	ldr	r3, [r4, #0]
 8010fda:	07df      	lsls	r7, r3, #31
 8010fdc:	d508      	bpl.n	8010ff0 <_printf_i+0x144>
 8010fde:	6923      	ldr	r3, [r4, #16]
 8010fe0:	6861      	ldr	r1, [r4, #4]
 8010fe2:	4299      	cmp	r1, r3
 8010fe4:	bfde      	ittt	le
 8010fe6:	2330      	movle	r3, #48	@ 0x30
 8010fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010fec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ff0:	1b92      	subs	r2, r2, r6
 8010ff2:	6122      	str	r2, [r4, #16]
 8010ff4:	f8cd a000 	str.w	sl, [sp]
 8010ff8:	464b      	mov	r3, r9
 8010ffa:	aa03      	add	r2, sp, #12
 8010ffc:	4621      	mov	r1, r4
 8010ffe:	4640      	mov	r0, r8
 8011000:	f7ff fee6 	bl	8010dd0 <_printf_common>
 8011004:	3001      	adds	r0, #1
 8011006:	d14a      	bne.n	801109e <_printf_i+0x1f2>
 8011008:	f04f 30ff 	mov.w	r0, #4294967295
 801100c:	b004      	add	sp, #16
 801100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011012:	6823      	ldr	r3, [r4, #0]
 8011014:	f043 0320 	orr.w	r3, r3, #32
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	4833      	ldr	r0, [pc, #204]	@ (80110e8 <_printf_i+0x23c>)
 801101c:	2778      	movs	r7, #120	@ 0x78
 801101e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011022:	6823      	ldr	r3, [r4, #0]
 8011024:	6831      	ldr	r1, [r6, #0]
 8011026:	061f      	lsls	r7, r3, #24
 8011028:	f851 5b04 	ldr.w	r5, [r1], #4
 801102c:	d402      	bmi.n	8011034 <_printf_i+0x188>
 801102e:	065f      	lsls	r7, r3, #25
 8011030:	bf48      	it	mi
 8011032:	b2ad      	uxthmi	r5, r5
 8011034:	6031      	str	r1, [r6, #0]
 8011036:	07d9      	lsls	r1, r3, #31
 8011038:	bf44      	itt	mi
 801103a:	f043 0320 	orrmi.w	r3, r3, #32
 801103e:	6023      	strmi	r3, [r4, #0]
 8011040:	b11d      	cbz	r5, 801104a <_printf_i+0x19e>
 8011042:	2310      	movs	r3, #16
 8011044:	e7ac      	b.n	8010fa0 <_printf_i+0xf4>
 8011046:	4827      	ldr	r0, [pc, #156]	@ (80110e4 <_printf_i+0x238>)
 8011048:	e7e9      	b.n	801101e <_printf_i+0x172>
 801104a:	6823      	ldr	r3, [r4, #0]
 801104c:	f023 0320 	bic.w	r3, r3, #32
 8011050:	6023      	str	r3, [r4, #0]
 8011052:	e7f6      	b.n	8011042 <_printf_i+0x196>
 8011054:	4616      	mov	r6, r2
 8011056:	e7bd      	b.n	8010fd4 <_printf_i+0x128>
 8011058:	6833      	ldr	r3, [r6, #0]
 801105a:	6825      	ldr	r5, [r4, #0]
 801105c:	6961      	ldr	r1, [r4, #20]
 801105e:	1d18      	adds	r0, r3, #4
 8011060:	6030      	str	r0, [r6, #0]
 8011062:	062e      	lsls	r6, r5, #24
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	d501      	bpl.n	801106c <_printf_i+0x1c0>
 8011068:	6019      	str	r1, [r3, #0]
 801106a:	e002      	b.n	8011072 <_printf_i+0x1c6>
 801106c:	0668      	lsls	r0, r5, #25
 801106e:	d5fb      	bpl.n	8011068 <_printf_i+0x1bc>
 8011070:	8019      	strh	r1, [r3, #0]
 8011072:	2300      	movs	r3, #0
 8011074:	6123      	str	r3, [r4, #16]
 8011076:	4616      	mov	r6, r2
 8011078:	e7bc      	b.n	8010ff4 <_printf_i+0x148>
 801107a:	6833      	ldr	r3, [r6, #0]
 801107c:	1d1a      	adds	r2, r3, #4
 801107e:	6032      	str	r2, [r6, #0]
 8011080:	681e      	ldr	r6, [r3, #0]
 8011082:	6862      	ldr	r2, [r4, #4]
 8011084:	2100      	movs	r1, #0
 8011086:	4630      	mov	r0, r6
 8011088:	f7ef f8aa 	bl	80001e0 <memchr>
 801108c:	b108      	cbz	r0, 8011092 <_printf_i+0x1e6>
 801108e:	1b80      	subs	r0, r0, r6
 8011090:	6060      	str	r0, [r4, #4]
 8011092:	6863      	ldr	r3, [r4, #4]
 8011094:	6123      	str	r3, [r4, #16]
 8011096:	2300      	movs	r3, #0
 8011098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801109c:	e7aa      	b.n	8010ff4 <_printf_i+0x148>
 801109e:	6923      	ldr	r3, [r4, #16]
 80110a0:	4632      	mov	r2, r6
 80110a2:	4649      	mov	r1, r9
 80110a4:	4640      	mov	r0, r8
 80110a6:	47d0      	blx	sl
 80110a8:	3001      	adds	r0, #1
 80110aa:	d0ad      	beq.n	8011008 <_printf_i+0x15c>
 80110ac:	6823      	ldr	r3, [r4, #0]
 80110ae:	079b      	lsls	r3, r3, #30
 80110b0:	d413      	bmi.n	80110da <_printf_i+0x22e>
 80110b2:	68e0      	ldr	r0, [r4, #12]
 80110b4:	9b03      	ldr	r3, [sp, #12]
 80110b6:	4298      	cmp	r0, r3
 80110b8:	bfb8      	it	lt
 80110ba:	4618      	movlt	r0, r3
 80110bc:	e7a6      	b.n	801100c <_printf_i+0x160>
 80110be:	2301      	movs	r3, #1
 80110c0:	4632      	mov	r2, r6
 80110c2:	4649      	mov	r1, r9
 80110c4:	4640      	mov	r0, r8
 80110c6:	47d0      	blx	sl
 80110c8:	3001      	adds	r0, #1
 80110ca:	d09d      	beq.n	8011008 <_printf_i+0x15c>
 80110cc:	3501      	adds	r5, #1
 80110ce:	68e3      	ldr	r3, [r4, #12]
 80110d0:	9903      	ldr	r1, [sp, #12]
 80110d2:	1a5b      	subs	r3, r3, r1
 80110d4:	42ab      	cmp	r3, r5
 80110d6:	dcf2      	bgt.n	80110be <_printf_i+0x212>
 80110d8:	e7eb      	b.n	80110b2 <_printf_i+0x206>
 80110da:	2500      	movs	r5, #0
 80110dc:	f104 0619 	add.w	r6, r4, #25
 80110e0:	e7f5      	b.n	80110ce <_printf_i+0x222>
 80110e2:	bf00      	nop
 80110e4:	08012dd5 	.word	0x08012dd5
 80110e8:	08012de6 	.word	0x08012de6

080110ec <memmove>:
 80110ec:	4288      	cmp	r0, r1
 80110ee:	b510      	push	{r4, lr}
 80110f0:	eb01 0402 	add.w	r4, r1, r2
 80110f4:	d902      	bls.n	80110fc <memmove+0x10>
 80110f6:	4284      	cmp	r4, r0
 80110f8:	4623      	mov	r3, r4
 80110fa:	d807      	bhi.n	801110c <memmove+0x20>
 80110fc:	1e43      	subs	r3, r0, #1
 80110fe:	42a1      	cmp	r1, r4
 8011100:	d008      	beq.n	8011114 <memmove+0x28>
 8011102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011106:	f803 2f01 	strb.w	r2, [r3, #1]!
 801110a:	e7f8      	b.n	80110fe <memmove+0x12>
 801110c:	4402      	add	r2, r0
 801110e:	4601      	mov	r1, r0
 8011110:	428a      	cmp	r2, r1
 8011112:	d100      	bne.n	8011116 <memmove+0x2a>
 8011114:	bd10      	pop	{r4, pc}
 8011116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801111a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801111e:	e7f7      	b.n	8011110 <memmove+0x24>

08011120 <_sbrk_r>:
 8011120:	b538      	push	{r3, r4, r5, lr}
 8011122:	4d06      	ldr	r5, [pc, #24]	@ (801113c <_sbrk_r+0x1c>)
 8011124:	2300      	movs	r3, #0
 8011126:	4604      	mov	r4, r0
 8011128:	4608      	mov	r0, r1
 801112a:	602b      	str	r3, [r5, #0]
 801112c:	f7f5 fca2 	bl	8006a74 <_sbrk>
 8011130:	1c43      	adds	r3, r0, #1
 8011132:	d102      	bne.n	801113a <_sbrk_r+0x1a>
 8011134:	682b      	ldr	r3, [r5, #0]
 8011136:	b103      	cbz	r3, 801113a <_sbrk_r+0x1a>
 8011138:	6023      	str	r3, [r4, #0]
 801113a:	bd38      	pop	{r3, r4, r5, pc}
 801113c:	20000b28 	.word	0x20000b28

08011140 <memcpy>:
 8011140:	440a      	add	r2, r1
 8011142:	4291      	cmp	r1, r2
 8011144:	f100 33ff 	add.w	r3, r0, #4294967295
 8011148:	d100      	bne.n	801114c <memcpy+0xc>
 801114a:	4770      	bx	lr
 801114c:	b510      	push	{r4, lr}
 801114e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011156:	4291      	cmp	r1, r2
 8011158:	d1f9      	bne.n	801114e <memcpy+0xe>
 801115a:	bd10      	pop	{r4, pc}

0801115c <_realloc_r>:
 801115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011160:	4680      	mov	r8, r0
 8011162:	4615      	mov	r5, r2
 8011164:	460c      	mov	r4, r1
 8011166:	b921      	cbnz	r1, 8011172 <_realloc_r+0x16>
 8011168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801116c:	4611      	mov	r1, r2
 801116e:	f7ff bc4b 	b.w	8010a08 <_malloc_r>
 8011172:	b92a      	cbnz	r2, 8011180 <_realloc_r+0x24>
 8011174:	f7ff fbdc 	bl	8010930 <_free_r>
 8011178:	2400      	movs	r4, #0
 801117a:	4620      	mov	r0, r4
 801117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011180:	f000 f81a 	bl	80111b8 <_malloc_usable_size_r>
 8011184:	4285      	cmp	r5, r0
 8011186:	4606      	mov	r6, r0
 8011188:	d802      	bhi.n	8011190 <_realloc_r+0x34>
 801118a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801118e:	d8f4      	bhi.n	801117a <_realloc_r+0x1e>
 8011190:	4629      	mov	r1, r5
 8011192:	4640      	mov	r0, r8
 8011194:	f7ff fc38 	bl	8010a08 <_malloc_r>
 8011198:	4607      	mov	r7, r0
 801119a:	2800      	cmp	r0, #0
 801119c:	d0ec      	beq.n	8011178 <_realloc_r+0x1c>
 801119e:	42b5      	cmp	r5, r6
 80111a0:	462a      	mov	r2, r5
 80111a2:	4621      	mov	r1, r4
 80111a4:	bf28      	it	cs
 80111a6:	4632      	movcs	r2, r6
 80111a8:	f7ff ffca 	bl	8011140 <memcpy>
 80111ac:	4621      	mov	r1, r4
 80111ae:	4640      	mov	r0, r8
 80111b0:	f7ff fbbe 	bl	8010930 <_free_r>
 80111b4:	463c      	mov	r4, r7
 80111b6:	e7e0      	b.n	801117a <_realloc_r+0x1e>

080111b8 <_malloc_usable_size_r>:
 80111b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111bc:	1f18      	subs	r0, r3, #4
 80111be:	2b00      	cmp	r3, #0
 80111c0:	bfbc      	itt	lt
 80111c2:	580b      	ldrlt	r3, [r1, r0]
 80111c4:	18c0      	addlt	r0, r0, r3
 80111c6:	4770      	bx	lr

080111c8 <_init>:
 80111c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ca:	bf00      	nop
 80111cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ce:	bc08      	pop	{r3}
 80111d0:	469e      	mov	lr, r3
 80111d2:	4770      	bx	lr

080111d4 <_fini>:
 80111d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d6:	bf00      	nop
 80111d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111da:	bc08      	pop	{r3}
 80111dc:	469e      	mov	lr, r3
 80111de:	4770      	bx	lr
